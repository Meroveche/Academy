<unload unload_date="2025-09-26 17:23:05">
<sp_widget action="INSERT_OR_UPDATE">
<category>standard</category>
<client_script>
<![CDATA[ function($scope, $location, $window, spUtil, amb, $http, spAriaUtil, $timeout, spNavStateManager, i18n) { var c = this; /* * options: * hide_footer (bool) = true to remove the data table footer contents * hide_header (bool) = true to remove the data table header contents * show_new (bool) = true to show the "New" record button * show_keywords (bool) = true to show the keyword search field * table (string) = the table name to query * filter (string) = the encoded query * o (string) = the order by column * d (string) = The order by direction: asc or desc * p (int) = the page to jump to * fields (string) = comma separated list of fields that become the list columns * view (string) = the default view to load for columns, overrides fields */ $scope.accessibilityModeEnabled = spAriaUtil.isAccessibilityEnabled(); $scope.exportTypes = [{ label: 'PDF', value: 'PDF' }, { label: 'Excel', value: 'EXCEL' }, { label: 'CSV', value: 'CSV' }]; $scope.guID = spUtil.generateUniqueID(); var keys = ['table', 'filter', 'p', 'o', 'd']; var i18nMsgs = { filteredResults: i18n.getMessage('Filtered {0} list showing {1} to {2} of {3} records'), unFilteredResults: i18n.getMessage('Unfiltered {0} list showing {1} to {2} of {3} records'), filteredNoResults: i18n.getMessage('Filtered {0} list showing 0 records'), unFilteredNoResults: i18n.getMessage('Unfiltered {0} list showing 0 records') }; var eventNames = { click: 'data_table.click', setFilter: 'data_table.setFilter', setKeywords: 'data_table.setKeywords' }; $scope.go = function(table, item) { //console.log(table, item); var new_url = ""; if (item.targetTable == 'x_g_dh5_hsisat_course_configuration') { if (c.data.newUI) { new_url = "?id=haisp_course_configurations_form&sys_id=" + item.sys_id; } else { new_url = "?id=hsi_course_configuration&table=" + item.targetTable + "&sys_id=" + item.sys_id; } } else if (item.targetTable == 'sysapproval_approver') { new_url = "?id=haisp_academy_approval_form&table=sysapproval_approver&sys_id=" + item.sys_id; } else if (item.targetTable == 'x_g_dh5_hsisat_instructor') { new_url = "?id=haisp_instructor_profile&sys_id=" + item.sys_id; } else if (item.targetTable == 'x_g_dh5_hsisat_class') { new_url = "?id=haisp_class_form&table=x_g_dh5_hsisat_class&sys_id=" + item.sys_id; } else if (item.targetTable == 'x_g_dh5_hsisat_course') { new_url = "?id=haisp_course_form&sys_id=" + item.sys_id; } else if (item.targetTable == 'x_g_dh5_hsisat_class_enrollment') { new_url = "?id=haisp_student_enrollment&sys_id=" + item.sys_id; } else if (item.targetTable == 'x_g_dh5_hsisat_instructor_schedule') { new_url = "?id=hsi_form&table=x_g_dh5_hsisat_instructor_schedule&sys_id=" + item.sys_id; } else if (item.targetTable == 'x_g_dh5_hsisat_class_configuration_aor_requirement') { new_url = "?id=hsi_form&table=" + item.targetTable + "&sys_id=" + item.sys_id; } else { new_url = "?id=hsi_form&instructor_id=" + item.instructor_id.value + "&table=" + item.targetTable + "&sys_id=" + item.sys_id; } location.search = new_url; if ($window.getSelection().toString().length > 0) return; spNavStateManager.onRecordChange(table).then(function() { var parms = {}; parms.table = table; parms.sys_id = item.sys_id; parms.record = item; $scope.ignoreLocationChange = true; for (var x in c.data.list) { c.data.list[x].selected = false; } item.selected = true; $scope.$emit(eventNames.click, parms); }, function() { // do nothing in case of closing the modal by clicking on x }); }; $scope.checkAndSetTinyUrl = function() { var url = $scope.data.table + '_list.do?' + 'sysparm_query=' + $scope.data.exportQueryEncoded + '&sysparm_view=' + $scope.data.view + '&sysparm_fields=' + $scope.data.fields; $scope.tinyUrlEnabled = c.data.useTinyUrl && url.length >= c.data.tinyUrlMinLength; if ($scope.tinyUrlEnabled) $scope.getTinyUrl(url); }; $scope.getTinyUrl = function(url) { $http.post('/api/now/tinyurl', { url: url }).then(function(response) { $scope.tinyUrl = new URL($window.location.origin + '/' + response.data.result).searchParams.get('sysparm_tiny'); }); }; $scope.newRecord = function() { var parms = { id: 'form', table: $scope.data.table, view: $scope.data.view, sys_id: '-1' }; if ($scope.data.table == 'x_g_dh5_hsisat_class') { parms.id = 'haisp_class_form'; } if ($scope.data.table == 'x_g_dh5_hsisat_course_configuration') { if (c.data.newUI) { const parentId = $scope.data.exportQuery.split("=")[1]; parms = { id: "haisp_course_configurations_form", parent_id: parentId, }; $location.search(parms); return; } else { parms.id = 'hsi_course_configuration'; } } if ($scope.data.table == 'x_g_dh5_hsisat_class_enrollment') { parms.id = 'haisp_student_enrollment'; } if ($scope.data.exportQuery != '') parms.query = $scope.data.exportQuery; $location.search(parms); }; function recoverStateFromUrl() { $scope.data.fields = []; var s = $location.search(); for (var x in keys) { if (s[keys[x]]) { $scope.data[keys[x]] = s[keys[x]]; } } $scope.server.update().then(function(data) { if (s.sys_id) { for (var x in data.list) { if (data.list[x].sys_id == s.sys_id) { $scope.go(s.table, data.list[x]); } } } }); } if ($scope.options.fromUrl) { var origSearch = $location.search(); $scope.$on('$locationChangeSuccess', function(e) { var s = $location.search(); if (origSearch.id !== s.id) return; if ($scope.ignoreLocationChange) { $scope.ignoreLocationChange = false; return; } // Helps to recover state when using the browser's back button recoverStateFromUrl(); }); } $scope.getNumber = function(num) { return new Array(num); } $scope.mathMin = function(v1, v2) { return Math.min(v1, v2); } function getData(updateUrl) { var f = $scope.data; spUtil.update($scope).then(function(data) { f.view = data.view; if ($scope.options.fromUrl && updateUrl) setPermalink(f.table, f.filter, f.o, f.d, f.p); if ($scope.options.show_breadcrumbs && data.filterBreadcrumbs) $scope.$broadcast('widget-filter-breadcrumbs.setBreadcrumbs', data.filterBreadcrumbs.data, data.filter); invokeResultsLiveMessage(); initRecordWatcher(f.table, f.filter); $scope.checkAndSetTinyUrl(); }); } function invokeResultsLiveMessage() { var data = $scope.data; var totalRowCount = data.row_count; var startIndex = data.window_start + 1; var endIndex = Math.min(data.window_end, totalRowCount); if (totalRowCount > 0) spAriaUtil.sendLiveMessage((data.filter ? i18nMsgs.filteredResults : i18nMsgs.unFilteredResults).withValues([data.table_plural, startIndex, endIndex, totalRowCount])); else spAriaUtil.sendLiveMessage((data.filter ? i18nMsgs.filteredNoResults : i18nMsgs.unFilteredNoResults).withValues([data.table_plural])); } function setPermalink(table, filter, orderBy, orderDirection, page) { $scope.ignoreLocationChange = true; var search = $location.search(); angular.extend(search, { spa: 1, table: table, filter: filter, p: page, o: orderBy, d: orderDirection }); $location.search(search); } var watcher; function initRecordWatcher(table, filter) { if (watcher) watcher.unsubscribe(); if (table && filter) { var watcherChannel = amb.getChannelRW(table, filter); amb.connect(); watcher = watcherChannel.subscribe(function(message) { if (!message.data) return; switch (message.data.action) { case "change": updateRowFromRW(message); break; case "exit": // A record was removed case "enter": // A record was added default: spUtil.update($scope); break; } }); } } function updateRowFromRW(message) { if (message.data && message.data.sys_id && $scope.data.list) { var row, field; for (var i = 0; i < $scope.data.list.length; i++) { row = $scope.data.list[i]; if (row.sys_id == message.data.sys_id) { var fields = Object.getOwnPropertyNames(message.data.record); for (var f in fields) { field = fields[f]; if (typeof row[field] !== 'undefined') { row[field].display_value = message.data.record[field].display_value; } } } } } } $scope.$on('$destroy', function() { if (watcher) watcher.unsubscribe(); }); $scope.setPageNum = function(num) { $scope.data.p = num; getData(true); $timeout(function() { $scope.focusOnTableHeader(); }); } $scope.setOrderBy = function(field) { // Catches tables that we don't want to sort some fields if ($scope.data.table == 'sysapproval_approver') { if (field == 'approver' || field == 'source_table') return; } if ($scope.data.table == 'x_g_dh5_hsisat_class_enrollment') { if (field == 'sys_created_on' || field == 'sys_created_by') return; } var d = "asc"; // descending default sort for date/time columns for UI consistency var fieldType = $scope.data.column_types[field]; if (fieldType == "glide_date_time" || fieldType == "glide_date") d = "desc"; if ($scope.data.o == field) { if ($scope.data.d == "asc") d = "desc"; else d = "asc"; } if (d === "asc") { spAriaUtil.sendLiveMessage($scope.data.msg.sortingByAsc); } else if (d === "desc") { spAriaUtil.sendLiveMessage($scope.data.msg.sortingByDesc); } $scope.data.o = field; $scope.data.d = d; $scope.data.setOrderUserPreferences = true; $scope.setSearch(true); } $scope.setSearch = function(updateUrl) { $scope.data.p = 1; if ($scope.data.keywords) { var previousSearchTerm = $scope.previousSearchTerm; if (previousSearchTerm) { previousSearchTerm = '123TEXTQUERY321=' + previousSearchTerm; var previousSearchTermStartIndex = $scope.data.filter.indexOf(previousSearchTerm); var previousSearchTermEndIndex = previousSearchTermStartIndex + previousSearchTerm.length; if (previousSearchTermStartIndex >= 0) $scope.data.filter = $scope.data.filter.substr(0, previousSearchTermStartIndex) + $scope.data.filter.substr(previousSearchTermEndIndex + 1, $scope.data.filter.length); } $scope.previousSearchTerm = $scope.data.keywords; } getData(updateUrl); } $scope.$on(eventNames.setFilter, function(e, newFilter) { $scope.data.filter = newFilter; $scope.setSearch(false); }); $scope.$on(eventNames.setKeywords, function(e, keywords) { $scope.data.keywords = keywords; $scope.setSearch(false); }); $scope.$on('widget-filter-breadcrumbs.queryModified', function(e, newFilter) { $scope.data.filter = newFilter; $scope.setSearch(true); }); $scope.rowsWerePruned = function() { if (!$scope.data.list) return; $scope.rowsPruned = $scope.mathMin($scope.data.window_end, $scope.data.row_count) - $scope.data.window_start - $scope.data.list.length; return $scope.rowsPruned > 0; } $scope.showFilter = function() { return !$scope.data.list.length && !$scope.data.num_pages && !$scope.data.invalid_table && !$scope.loadingData; } c.appendQuery = function(query) { if ($scope.data.filter.length > 1) $scope.data.filter += '^'; $scope.data.filter += query; $scope.setSearch(); } // Makes Widget Async $scope.data = $scope.options; $scope.loadingData = true; $scope.server.update().then(function() { if ($scope.data.newButtonUnsupported) console.log("Service Portal: New button not supported for sys_attachment list"); $scope.loadingData = false; initRecordWatcher($scope.data.table, $scope.data.filter); $scope.checkAndSetTinyUrl(); }); console.log($scope.data.table); c.newButtonLabel = 'New'; if ($scope.data.table == 'x_g_dh5_hsisat_class_enrollment') { c.newButtonLabel = 'New Student'; } function parseQuery(table, queryString) { return $http.post('/api/now/sp/parsequery/' + table, queryString).then(function(response) { return response.data.result; }); } c.createQueryTerm = function(table, field, sys_id, operator) { return $http.get('/api/now/sp/getInOutQueryTerm', { params: { table: table, sys_id: sys_id, field: field, operator: operator } }).then(function(response) { if (response && response.data && response.data.result) return response.data.result.parts; }); } c.isMultiPart = function(terms) { for (var i = 0; i < terms.length; i++) { var term = terms[i]; while (term.left) term = term.left; if (term.NQ) return true; } return false; } c.showMatching = function(field, newTerm) { var queryString = $scope.data.filter; var eq = ""; parseQuery($scope.data.table, queryString).then(function(oldTerms) { var isMultiPart = c.isMultiPart(oldTerms); for (var i = 0; i < oldTerms.length; i++) { var term = oldTerms[i]; if (!isMultiPart && isSameField(newTerm, term)) continue; if (eq.length) eq += '^'; // term may be separated into nested "left" and "right" bits, // follow the lefts to the bottom where "NQ" might be specified var termNQCheck = oldTerms[i]; while (termNQCheck.left) termNQCheck = termNQCheck.left; if (termNQCheck.NQ) { // query is multipart so apply new term to each part eq += getEncodedTerm(newTerm); eq += "^NQ"; } eq += getEncodedTerm(term); } if (eq.length) eq += '^'; eq += getEncodedTerm(newTerm); $scope.data.filter = eq; $scope.setSearch(); $location.search(angular.extend($location.$$search, { spa: 1, filter: eq, p: $scope.data.p })); }); }; c.filterOut = function(field, newTerm) { var eq = ""; if ($scope.data.filter.indexOf("^NQ") == -1) { // don't need server roundtrip to parse query, // can just append the new term eq = $scope.data.filter; if (eq.length) eq += '^'; eq += getEncodedTerm(newTerm); $scope.data.filter = eq; $scope.setSearch(); $location.search(angular.extend($location.$$search, { spa: 1, filter: eq, p: $scope.data.p })); return; } // query may be multipart so must apply new term to each part var queryString = $scope.data.filter; parseQuery($scope.data.table, queryString).then(function(oldTerms) { for (var i = 0; i < oldTerms.length; i++) { var term = oldTerms[i]; if (eq.length) eq += '^'; // term may be separated into nested "left" and "right" bits, // follow the lefts to the bottom where "NQ" might be specified var termNQCheck = oldTerms[i]; while (termNQCheck.left) termNQCheck = termNQCheck.left; if (termNQCheck.NQ) { // query is multipart so apply new term to end of each part eq += getEncodedTerm(newTerm); eq += "^NQ"; } eq += getEncodedTerm(term); } if (eq.length) eq += '^'; eq += getEncodedTerm(newTerm); $scope.data.filter = eq; $scope.setSearch(); $location.search(angular.extend($location.$$search, { spa: 1, filter: eq, })); }); }; function isSameField(t1, t2) { if ('left' in t1 && 'left' in t2) return t1.left.query_term_field === t2.left.query_term_field; else if ('left' in t1) return t1.left.query_term_field === t2.query_term_field; else if ('left' in t2) return t1.query_term_field === t2.left.query_term_field; return t1.query_term_field === t2.query_term_field; } function getEncodedTerm(term) { var eq; if (term.left) { eq = getEncodedTerm(term.left); eq += '^OR'; eq += getEncodedTerm(term.right); } else { eq = term.query_term_field; eq += term.operator; eq += term.value; } return eq; } } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.panel-heading { padding-left: 8px; } thead { border-bottom: 1px solid #ddd; } table { margin-bottom: 0; border-collapse: separate; } .table > thead > tr > th { border-right: 1px solid #ddd; border-bottom: none; cursor: pointer; vertical-align: middle; &:nth-child(2) { border-left: none; } &:last-child { border-right: none; } } th i { display: inline-block; margin-left: 5px; color: #A0A0A0; } div.data-table-high-contrast th i { color: $gray; } th .disabled{ color:#ddd; } .th-title { display: inline-block; color: $primary; } .panel-body { overflow: auto; padding: 0px; } .selected { color: #fff; background-color: $data-table-selected; border-color: 1px solid #fff; } .table-striped td.selected a:not(.text-muted):not(.btn) { color: $sp-tagline-color; } tbody tr:last-child { border-bottom: none; } .pruned-msg { padding-bottom: 10px; padding-left: 4px; text-align: center; } .pruned-msg-filter-pad { padding-top:8px; } .filter-breadcrumbs { padding-top: 3px; } .filter-breadcrumbs ~ .table { border-top: 1px solid #ddd; } .dropdown-toggle { background: none; padding: 0 0 4px 0; } .sp-list-cell { white-space: pre-wrap; } .user_image { max-width:100px; max-height:100px; } .academics { background-color:#ffffff; border:solid 1px #d3d6dc; padding-left:2px; padding-right:2px; } .defensive { background-color:#b8d3ef; padding-left:2px; padding-right:2px; } .entry { background-color:#A9DA89; padding-left:2px; padding-right:2px; } .firearms { background-color:#FF7474; padding-left:2px; padding-right:2px; } .physical { background-color:#E4E4E4; padding-left:2px; padding-right:2px; } .academics_cci { background-color:#F9CF93; padding-left:2px; padding-right:2px; } .academy { background-color:#5EAF41; padding-left:2px; padding-right:2px; } .student { background-color:#FFF586; padding-left:2px; padding-right:2px; } .legal { background-color:#D8AAED; padding-left:2px; padding-right:2px; } .misc { background-color:#FFC4CD; padding-left:2px; padding-right:2px; } .cbp { background-color:#92FFE9; padding-left:2px; padding-right:2px; } .hq { background-color:#92FFE9; padding-left:2px; padding-right:2px; } .opr { background-color:#92FFE9; padding-left:2px; padding-right:2px; } .isd { background-color:#92FFE9; padding-left:2px; padding-right:2px; } </css>
<data_table>sp_instance_table</data_table>
<demo_data>{"data": { "table": "incident", "view": "default", "o": "opened_at", "d": "desc", "filter": "activeEQtrue", "p": 1, "fields": "number,short_description" } }</demo_data>
<description/>
<docs display_value=""/>
<field_list>table,filter,field_list,maximum_entries,order,order_by,order_direction,title,color,glyph,sp_page</field_list>
<has_preview>false</has_preview>
<id>hsi-widget-data-table</id>
<internal>false</internal>
<link>
<![CDATA[ function(scope, element, attrs, ctrl){ var $ul, $contextMenu; scope.focusOnTableHeader = function() { element.find(".data-table-title").attr("tabindex", "-1").focus(); } element.on('contextmenu', function(e){ if (e.ctrlKey) return; // ctrlKey is for the debug menu, not this menu var rowScope = angular.element(e.target).scope(); var field, item, fieldVal; // Context Menu for tbody if (angular.isDefined(rowScope.field) && angular.isDefined(rowScope.item)){ e.preventDefault(); field = rowScope.field; item = rowScope.item; fieldVal = item[field].value; var items = [ ['${Show Matching}', function(){ ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '=').then(function(term){ ctrl.showMatching(field, term); }); }], ['${Filter Out}', function(){ ctrl.createQueryTerm(scope.data.table, field, item.sys_id, '!=').then(function(term){ ctrl.filterOut(field, term); }); }] ]; renderContextMenu(items); setContextMenuPosition(e); } }); function renderContextMenu(items){ var scrollHeight = $('body').get(0).scrollHeight; $contextMenu = angular.element('<div>', {'class': 'dropdown clearfix context-dropdown open'}); $contextMenu.on('click', function (e) { if ($(e.target).hasClass('dropdown')) { _clearContextMenus(event); } }); $contextMenu.on('contextmenu', function (event) { event.preventDefault(); _clearContextMenus(event); }); $contextMenu.css({ position: 'absolute', top: 0, height: scrollHeight, left: 0, right: 0, zIndex: 9999 }); $('body').append($contextMenu); $ul = angular.element('<ul>', { 'class': 'dropdown-menu', 'role': 'menu' }); renderItems(); $contextMenu.append($ul); function renderItems(){ angular.forEach(items, function (item) { var $li = angular.element('<li>'); if (item === null) { $li.addClass('divider'); } else { var $a = angular.element('<a>'); $a.attr({tabindex: '-1', href:'#'}); $a.text(item[0]); $li.append($a); $li.on('click', function (e) { e.preventDefault(); scope.$apply(function () { _clearContextMenus(e); item[1].call(item, item); }); }); } $ul.append($li); }); } } function _clearContextMenus(event){ if (!event){ return; } angular.element(event.currentTarget).removeClass('context'); var els = angular.element(".context-dropdown"); angular.forEach(els, function(el){ angular.element(el).remove(); }); } var contextMenuItemHeight = 0; function setContextMenuPosition(event){ if (contextMenuItemHeight === 0) contextMenuItemHeight = $ul.children(0).height(); // Why not just call .width() and .height() on the container? Because those calculations cause browsers to reflow // that can cause IE10 to take 200ms to render a context menu. var cmWidth = 150; var cmHeight = contextMenuItemHeight * $ul.children().length; var startX = event.pageX + cmWidth >= window.innerWidth ? event.pageX - cmWidth : event.pageX; var startY = event.pageY + cmHeight >= window.innerHeight ? event.pageY - cmHeight : event.pageY; $ul.css({ display: 'block', position: 'absolute', left: startX, top: startY, 'min-width': cmWidth }); } } ]]>
</link>
<name>HSI Data Table</name>
<option_schema>[{"hint":"If enabled, show the list filter in the breadcrumbs of the data table","name":"enable_filter","default_value":"false","section":"Behavior","label":"Enable Filter","type":"boolean"}]</option_schema>
<public>false</public>
<roles>snc_external,snc_internal</roles>
<script>
<![CDATA[ (function() { if (!input) // asynch load list return; data.newUI = gs.getProperty("x_g_dh5_hsisat.feature.ui.v2") == "true"; data.msg = {}; data.msg.sortingByAsc = gs.getMessage("Sorting by ascending"); data.msg.sortingByDesc = gs.getMessage("Sorting by descending"); data.searchMsg = gs.getMessage("Search"); /* * data.table = the table * data.p = the current page starting at 1 * data.o = the order by column * data.d = the order by direction * data.keywords = the keyword search term * data.list = the table data as an array * data.invalid_table = true if table is invalid or if data was not succesfully fetched * data.table_label = the table's display name. e.g. Incident * data.table_plural = the table's plural display name. e.g. Incidents * data.fields = a comma delimited list of field names to show in the data table * data.column_labels = a map of field name -> display name * data.window_size = the number of rows to show * data.filter = the encoded query */ // copy to data[name] from input[name] || option[name] optCopy(['table', 'p', 'o', 'd', 'filter', 'fixed_query', 'filterACLs', 'fields', 'keywords', 'view']); optCopy(['relationship_id', 'apply_to', 'apply_to_sys_id', 'window_size']); if (!data.table) { data.invalid_table = true; data.table_label = ""; return; } if (!data.fields) { if (data.view) data.fields = $sp.getListColumns(data.table, data.view); else data.fields = $sp.getListColumns(data.table); } data.view = data.view || 'mobile'; data.table = data.table || $sp.getValue('table'); data.filter = data.filter || $sp.getValue('filter'); data.keywords = data.keywords || $sp.getValue('keywords'); data.p = data.p || $sp.getValue('p') || 1; data.p = parseInt(data.p); data.o = data.o || $sp.getValue('o') || $sp.getValue('order_by'); data.d = data.d || $sp.getValue('d') || $sp.getValue('order_direction') || 'asc'; data.useTinyUrl = gs.getProperty('glide.use_tiny_urls') === 'true'; data.tinyUrlMinLength = gs.getProperty('glide.tiny_url_min_length'); var grForMetaData = new GlideRecord(data.table); if (input.setOrderUserPreferences) { // update User Preferences on a manual sort for UI consistency gs.getUser().savePreference(data.table + ".db.order", data.o); gs.getUser().savePreference(data.table + ".db.order.direction", data.d == "asc" ? "" : "DESC"); data.setOrderUserPreferences = false; } // if no sort specified, find a default column for UI consistency if (!data.o) getOrderColumn(); data.page_index = data.p - 1; data.show_new = data.show_new || options.show_new; var windowSize = data.window_size || $sp.getValue('maximum_entries') || 20; windowSize = parseInt(windowSize); if (isNaN(windowSize) || windowSize < 1) windowSize = 20; data.window_size = windowSize; var gr; // FilteredGlideRecord is not supported in scoped apps, so GlideRecordSecure will always be used in an application scope if (typeof FilteredGlideRecord != "undefined" && (gs.getProperty("glide.security.ui.filter") == "true" || grForMetaData.getAttribute("glide.security.ui.filter") != null)) { gr = new FilteredGlideRecord(data.table); gr.applyRowSecurity(); } else gr = new GlideRecordSecure(data.table); if (!gr.isValid()) { data.invalid_table = true; data.table_label = data.table; return; } data.canCreate = gr.canCreate(); data.newButtonUnsupported = data.table == "sys_attachment"; data.table_label = gr.getLabel(); data.table_plural = gr.getPlural(); data.title = input.useInstanceTitle && input.headerTitle ? gs.getMessage(input.headerTitle) : data.table_plural; data.hasTextIndex = $sp.hasTextIndex(data.table); if (data.filter) { if (data.filterACLs) gr = $sp.addQueryString(gr, data.filter); else gr.addEncodedQuery(data.filter); } if (data.keywords) { gr.addQuery('123TEXTQUERY321', data.keywords); data.keywords = null; } data.filter = gr.getEncodedQuery(); if (!gs.nil(data.fixed_query)) { gr = $sp.addQueryString(gr, data.fixed_query); } if (data.relationship_id) { var rel = GlideRelationship.get(data.relationship_id); var target = new GlideRecord(data.table); var applyTo = new GlideRecord(data.apply_to); applyTo.get("sys_id", data.apply_to_sys_id); rel.queryWith(applyTo, target); // put the relationship query into target data.exportQuery = target.getEncodedQuery(); gr = $sp.addQueryString(gr, data.exportQuery); // get the query the relationship made for us } if (data.exportQuery) data.exportQuery += '^' + data.filter; else data.exportQuery = data.filter; data.exportQueryEncoded = encodeURIComponent(data.exportQuery + (!gs.nil(data.fixed_query) ? ('^' + data.fixed_query) : '')); if (data.o) { if (data.d == "asc") gr.orderBy(data.o); else gr.orderByDesc(data.o); if (gs.getProperty("glide.secondary.query.sysid") == "true") gr.orderBy("sys_id"); } data.window_start = data.page_index * data.window_size; data.window_end = (data.page_index + 1) * data.window_size; gr.chooseWindow(data.window_start, data.window_end); gr.setCategory("service_portal_list"); gr._query(); data.row_count = gr.getRowCount(); data.num_pages = Math.ceil(data.row_count / data.window_size); data.column_labels = {}; data.column_types = {}; data.fields_array = data.fields.split(','); // use GlideRecord to get field labels vs. GlideRecordSecure for (var i in data.fields_array) { var field = data.fields_array[i]; var ge = grForMetaData.getElement(field); if (ge == null) continue; data.column_labels[field] = input.hasOwnProperty('column_labels') ? input.column_labels[field] : ge.getLabel(); data.column_types[field] = ge.getED().getInternalType(); } if(data.table == 'sysapproval_approver'){ data.column_labels['approver'] = 'Instructor'; data.column_labels['source_table'] = 'Name'; data.column_labels['sys_created_on'] = 'Submitted On'; } data.list = []; while (gr._next()) { var record = {}; $sp.getRecordElements(record, gr, data.fields); if (typeof FilteredGlideRecord != "undefined" && gr instanceof FilteredGlideRecord) { // FilteredGlideRecord doesn't do field-level // security, so take care of that here for (var f in data.fields_array) { var fld = data.fields_array[f]; if (!gr.isValidField(fld)) continue; if (!gr[fld].canRead()) { record[fld].value = null; record[fld].display_value = null; } } } if(data.table == 'x_g_dh5_hsisat_class_enrollment'){ var s_id = gr.student_id.getRefRecord(); record.sys_created_by.display_value = s_id.getDisplayValue('poc_phone'); record.sys_created_on.display_value = s_id.getDisplayValue('work_email'); } //console.log(JSON.stringify(record)); if(data.table == 'sysapproval_approver'){ record.source_table = record.source_table || {}; record.approver =record.approver || {}; record.iteration =record.iteration || {}; var d_id = gr.document_id.getRefRecord(); var i_id = d_id.instructor_id.getRefRecord(); //if(data.input.hasOwnProperty('allAppsWidget')){ // JC add your code to overwrite the source_table display value here // record.source_table.display_value = i_id.getDisplayValue Unit; // } else { if(d_id.getTableName() == 'x_g_dh5_hsisat_instructor_schedule'){ var start_date = d_id.getDisplayValue('start_date').split(' '); var end_date = d_id.getDisplayValue('end_date').split(' '); record.source_table.display_value = 'Time Off - ' + start_date[0] + ' / ' + end_date[0]; } else { record.source_table.display_value = gr.getDisplayValue('document_id') || ''; } record.approver.display_value = i_id.last_name.toString() + ', ' + i_id.first_name.toString(); var aorcode = i_id.getDisplayValue('aor_code'); if(aorcode && aorcode != ''){ record.iteration.display_value = aorcode; } } //} record.sys_id = gr.getValue('sys_id'); record.targetTable = gr.getRecordClassName(); data.list.push(record); } data.enable_filter = (input.enable_filter == true || input.enable_filter == "true" || options.enable_filter == true || options.enable_filter == "true"); var breadcrumbWidgetParams = { table: data.table, query: data.filter, enable_filter: data.enable_filter }; data.filterBreadcrumbs = $sp.getWidget('widget-filter-breadcrumbs', breadcrumbWidgetParams); // copy to data from input or options function optCopy(names) { names.forEach(function(name) { data[name] = input[name] || options[name]; }) } // getOrderColumn logic mirrors that of Desktop UI when no sort column is specified function getOrderColumn() { // First check for user preference var pref = gs.getUser().getPreference(data.table + ".db.order"); if (!GlideStringUtil.nil(pref)) { data.o = pref; if (gs.getUser().getPreference(data.table + ".db.order.direction") == "DESC") data.d = 'desc'; return; } // If no user pref, check for table default using same logic as Desktop UI: // 1) if task, use number // 2) if any field has isOrder attribute, use that // 3) use order, number, name column if exists (in that priority) if (grForMetaData.isValidField("sys_id") && grForMetaData.getElement("sys_id").getED().getFirstTableName() == "task") { data.o = "number"; return; } // Next check for isOrder attribute on any column var elements = grForMetaData.getElements(); // Global and scoped GlideRecord.getElements return two different things, // so convert to Array if needed before looping through if (typeof elements.size != "undefined") { var elementArr = []; for (var i = 0; i < elements.size(); i++) elementArr.push(elements.get(i)); elements = elementArr; } // Now we can loop through for (var j = 0; elements.length > j; j++) { var element = elements[j]; if (element.getAttribute("isOrder") == "true") { data.o = element.getName(); return; } } // As last resort, sort on Order, Number, or Name column if (grForMetaData.isValidField("order")) data.o = "order"; else if (grForMetaData.isValidField("number")) data.o = "number"; else if (grForMetaData.isValidField("name")) data.o = "name"; } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-05-31 01:23:27</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>1204c59e1bb1aa103b5e657fe54bcbcf</sys_id>
<sys_mod_count>140</sys_mod_count>
<sys_name>HSI Data Table</sys_name>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>sp_widget_1204c59e1bb1aa103b5e657fe54bcbcf</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-09-25 07:06:23</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-{{options.color}} b" ng-class="{'data-table-high-contrast': accessibilityModeEnabled}"> <div class="panel-heading form-inline" ng-hide="options.hide_header"> <span class="dropdown m-r-xs"> <button aria-label="{{data.title || data.table_plural}} ${Context Menu}" class="btn dropdown-toggle glyphicon glyphicon-menu-hamburger" style="line-height: 1.4em" id="optionsMenu-{{::guID}}" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button> <ul class="dropdown-menu" aria-labelledby="optionsMenu-{{::guID}}"> <li ng-repeat="t in ::exportTypes"> <a ng-if="!tinyUrlEnabled" ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_query={{data.exportQueryEncoded}}&sysparm_view={{data.view}}&sysparm_fields={{data.fields}}" target="_new" tabindex="-1">${Export as} {{::t.label}}</a> <a ng-if="tinyUrlEnabled" ng-href="/{{data.table}}_list.do?{{::t.value}}&sysparm_tiny={{tinyUrl}}" target="_new" tabindex="-1">${Export as} {{::t.label}}</a> </li> </ul> </span> <h2 class="panel-title" style="display:inline"><i ng-if="options.glyph" class="fa fa-{{options.glyph}} m-r"></i>{{data.title || data.table_plural}}<span class="sr-only">${table} - ${page} {{data.p}}</span></h2> <button name="new" role="button" class="btn btn-primary btn-sm m-l-xs" ng-click="newRecord()" ng-if="options.show_new && data.canCreate && !data.newButtonUnsupported" aria-label="${Create new record}">{{c.newButtonLabel}}</button> <div class="pull-right" ng-if="options.show_keywords"> <form ng-if="data.hasTextIndex" ng-submit="setSearch(true)"> <div class="input-group" role="presentation"> <input type="text" name="datatable-search" ng-model="data.keywords" ng-model-options="{debounce:250}" class="form-control" placeholder="${Keyword Search}" aria-label="${Keyword Search}"> <span class="input-group-btn"> <button name="search" class="btn btn-default" type="submit" aria-label="${Search}" data-original-title="{{::c.data.searchMsg}}" data-toggle="tooltip" data-placement="bottom"><span class="glyphicon glyphicon-search"></span></button> </span> </div> </form> </div> <div class="clearfix"></div> </div> <!-- body --> <div class="panel-body"> <div ng-if="options.show_breadcrumbs && (data.filter || data.enable_filter)" class="filter-breadcrumbs"> <sp-widget widget="data.filterBreadcrumbs"></sp-widget> </div> <div class="clearfix"></div> <div class="alert alert-info" ng-if="!data.list.length && !data.num_pages && !data.invalid_table && !loadingData"> ${No records in {{data.table_label}} <span ng-if="data.filter">using that filter</span>} </div> <div class="alert alert-info" ng-if="loadingData"> <fa name="spinner" spin="true"></fa> ${Loading data}... </div> <table class="table table-striped table-responsive" ng-if="data.list.length"> <caption class="sr-only">{{data.title || data.table_plural}}</caption> <thead> <tr> <th ng-repeat="field in data.fields_array track by $index" class="text-nowrap" ng-click="setOrderBy(field)" scope="col" role="columnheader" aria-sort="{{field == data.o ? (data.d == 'asc'? 'ascending': 'descending') : 'none'}}"> <div class="th-title" title="${Sort by} {{field == data.o ? (data.d == 'asc' ? '${Descending}': '${Ascending}') : '${Ascending}'}}" role="button" tabindex="0" aria-label="{{data.column_labels[field]}}">{{data.column_labels[field]}}</div> <i class="fa" ng-if="field == data.o" ng-class="{'asc': 'fa-chevron-up', 'desc': 'fa-chevron-down'}[data.d]"></i> </th> </tr> </thead> <tbody> <tr ng-repeat="item in data.list track by item.sys_id"> <td role="{{$first ? 'rowheader' : 'cell'}}" class="pointer sp-list-cell" ng-class="{selected: item.selected}" ng-click="go(item.targetTable, item)" ng-repeat="field in ::data.fields_array" data-field="{{::field}}" data-th="{{::data.column_labels[field]}}"> <a href="javascript:void(0)" ng-if="$first" aria-label="${Open record}: {{::item[field].display_value}}"> <span ng-if="item[field].type === 'user_image'"> <img class="user_image" src="{{item[field].display_value}}"/> </span> <span ng-if="item[field].type !== 'user_image'"> {{::item[field].display_value | limitTo : item[field].limit}}{{::item[field].display_value.length > item[field].limit ? '...' : ''}} </span> </a> <span ng-if="!$first"> <span ng-if="item[field].type === 'user_image'"> <img class="user_image" src="{{item[field].display_value}}"/> </span> <span ng-if="item[field].type !== 'user_image'" ng-class="{ 'investigations': item[field].display_value == 'Investigations', 'defensive': item[field].display_value == 'UOF: Defensive Tactics', 'entry': item[field].display_value == 'UOF: Entry Tactics', 'firearms': item[field].display_value == 'UOF: Firearms', 'physical': item[field].display_value == 'OPS: Physical Training', 'academics_cci': item[field].display_value == 'Academics: CCI', 'academy': item[field].display_value == 'Academy', 'student': item[field].display_value == 'OPS: Student Services', 'legal': item[field].display_value == 'Legal', 'misc': item[field].display_value == 'Miscellaneous Training', 'cbp': item[field].display_value == 'CBP', 'hq': item[field].display_value == 'HQ', 'opr': item[field].display_value == 'OPR', 'isd': item[field].display_value == 'ISD Forensic' }"> {{::item[field].display_value | limitTo : item[field].limit}}{{::item[field].display_value.length > item[field].limit ? '...' : ''}} </span> </span> </td> </tr> </tbody> </table> <div ng-class="{'pruned-msg-filter-pad': (!options.show_breadcrumbs || !data.filter) && !data.list.length}" class="pruned-msg" ng-if="rowsWerePruned()"> <span ng-if="rowsPruned == 1">${{{rowsPruned}} row removed by security constraints}</span> <span ng-if="rowsPruned > 1">${{{rowsPruned}} rows removed by security constraints}</span> </div> </div> <!-- footer --> <nav class="panel-footer" ng-hide="options.hide_footer" ng-if="data.row_count" role="navigation" aria-label="${Pagination}"> <div class="btn-toolbar m-r pull-left"> <div class="btn-group"> <a href="javascript:void(0)" ng-click="setPageNum(data.p - 1)" ng-class="{'disabled': data.p == 1}" class="btn btn-default" aria-label="${Previous page} {{data.p == 1 ? '${disabled}' : ''}}" data-original-title="${Previous page}" data-toggle="tooltip" data-placement="left" data-container="body" tabindex="{{(data.p == 1) ? -1 : 0}}"><i class="fa fa-chevron-left flip-icon-rtl"></i></a> </div> <div ng-if="data.num_pages > 1 && data.num_pages < 20" class="btn-group"> <a ng-repeat="i in getNumber(data.num_pages) track by $index" ng-click="setPageNum($index + 1)" href="javascript:void(0)" ng-class="{active: ($index + 1) == data.p}" type="button" class="btn btn-default" aria-label="${Page} {{$index + 1}}" ng-attr-aria-current="{{($index + 1) == data.p ? 'page' : undefined}}">{{$index + 1}}</a> </div> <div class="btn-group"> <a href="javascript:void(0)" ng-click="setPageNum(data.p + 1)" ng-class="{'disabled': data.p == data.num_pages}" class="btn btn-default" aria-label="${Next page} {{data.p == data.num_pages ? '${disabled}' : ''}}" data-original-title="${Next page}" data-toggle="tooltip" data-placement="right" data-container="body" tabindex="{{(data.p == data.num_pages) ? -1 : 0}}"><i class="fa fa-chevron-right flip-icon-rtl"></i></a> </div> </div> <div class="m-t-xs panel-title">${Rows {{data.window_start + 1}} - {{ mathMin(data.window_end,data.row_count) }} of {{data.row_count}}}</div> <span class="clearfix"></span> </nav> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; function getSortData() { $scope.sort = { 'course_id.class_id': (() => { if ($scope.data.sort.field !== "course_id.class_id") { return { sort: "none", label: "Sort by class" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class, ascending" }; } else { return { sort: "descending", label: "Sort by class, descending" }; } })(), course_id: (() => { if ($scope.data.sort.field !== "course_id") { return { sort: "none", label: "Sort by course" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by course, ascending" }; } else { return { sort: "descending", label: "Sort by course, descending" }; } })(), record_id: (() => { if ($scope.data.sort.field !== "record_id") { return { sort: "none", label: "Sort by Conflicting Resource" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by Conflicting Resource, ascending" }; } else { return { sort: "descending", label: "Sort by Conflicting Resource, descending" }; } })(), conflict_type: (() => { if ($scope.data.sort.field !== "conflict_type") { return { sort: "none", label: "Sort by Conflict Type" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by Conflict Type, ascending" }; } else { return { sort: "descending", label: "Sort by Conflict Type, descending" }; } })(), conflict_date: (() => { if ($scope.data.sort.field !== "conflict_date") { return { sort: "none", label: "Sort by date" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by date, ascending" }; } else { return { sort: "descending", label: "Sort by date, descending" }; } })(), }; } getSortData(); $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.action = "sort"; c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>th .btn { font-weight: bold; padding: 0; } [scope="row"] { font-weight: normal; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .pagination { margin: 0; } .panel-footer { display: flex; flex-wrap: wrap; gap: 0.5rem; align-items: center; justify-content: space-between; } .number { text-align: left; } .venue { background-color:#BF2121; color:#FFFFFF; padding-left:2px; padding-right:2px; } .instructor { background-color:#BF2121; color:#FFFFFF; padding-left:2px; padding-right:2px; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>haisp_widget_conflict_report</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Conflict Report</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data) { data.classId = $sp.getParameter("class_id"); //HA-395 - filtered by class data.page = 1; data.batchSize = 10; if (input) { if (GeneralUtils.areEqual(input.action, "paginate")) { data.page = Math.max(input.page, 1); } if (GeneralUtils.areEqual(input.action, "sort")) { data.page = 1; } } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "name", asc: false }); const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; const today = new GlideDate(); data.rows = []; const recordGR = new GlideRecord(Constants.COURSE_CONFLICT_TABLE); recordGR.addEncodedQuery("is_resolved==false"); if(data.classId)recordGR.addQuery("course_id.class_id", data.classId); //HA-395 if (data.sort.asc) { recordGR.orderBy(data.sort.field); } else { recordGR.orderByDesc(data.sort.field); } recordGR.chooseWindow(startIndex, endIndex); recordGR.query(); data.totalCount = recordGR.getRowCount(); while (recordGR.next()) { //check if the date of the conflict is after this morning - if so - add to the list: let courseGR = recordGR.course_id.getRefRecord(); let courseDateTime = courseGR.getValue("start_date_time"); if (courseDateTime > today) { //data.rows.push(GlideRecordUtils.toJson(recordGR, {full: true })); data.rows.push({ class_id: { label: recordGR.getDisplayValue('course_id.class_id'), value: recordGR.course_id.class_id.getValue() }, course_id: { label: recordGR.getDisplayValue('course_id'), value: recordGR.getValue('course_id') }, record_id: { label: recordGR.getDisplayValue('record_id'), value: recordGR.getValue('record_id') }, conflict_type: { label: recordGR.getDisplayValue('conflict_type'), value: recordGR.getValue('conflict_type') }, conflict_date: { label: "conflict_date", value: courseDateTime }, }) } } })($sp, data); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JMCumbee</sys_created_by>
<sys_created_on>2025-08-27 23:07:07</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>0d5a76f61b2b26105c8ccbb6624bcba1</sys_id>
<sys_mod_count>50</sys_mod_count>
<sys_name>HAISP Conflict Report</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_0d5a76f61b2b26105c8ccbb6624bcba1</sys_update_name>
<sys_updated_by>JMCumbee</sys_updated_by>
<sys_updated_on>2025-09-24 20:13:37</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Conflict Reports </h2> </div> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col" aria-sort="{{sort['course_id.class_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['course_id.class_id'].label" ng-click="sortData($event, 'course_id.class_id')"> Class Name <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['course_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['course_id'].label" ng-click="sortData($event, 'course_id')"> Course Name <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['record_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['record_id'].label" ng-click="sortData($event, 'record_id')"> Conflicting Resource <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['conflict_type'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['conflict_type'].label" ng-click="sortData($event, 'conflict_type')"> Conflict Type <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['conflict_date'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['conflict_date'].label" ng-click="sortData($event, 'conflict_date')"> Conflict Date <i class="fa fa-chevron-down"></i> </button> </th> </tr> </thead> <tbody> <tr ng-repeat="row in data.rows"> <td> <a href="?id=haisp_class_homepage&class_id={{row.class_id.value}}"> {{row.class_id.label}} </a> </td> <th scope="row"> <a href="?id=haisp_course_homepage&course_id={{row.course_id.value}}"> {{row.course_id.label || '(empty)'}} </a> </th> <td>{{row.record_id.label}}</td> <td><span ng-class="{ 'venue': row.conflict_type.value=='venue', 'instructor': row.conflict_type.value=='instructor', }">{{row.conflict_type.label}}</span></td> <td>{{row.conflict_date.value}}</td> </tr> </tbody> </table> </div> <div class="panel-footer"> <uib-pagination total-items="data.totalCount" ng-model="data.page" ng-change="paginate()" items-per-page="data.batchSize" class="pagination-sm" boundary-link-numbers="true"></uib-pagination> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, spUtil) { const c = this; c.data.assignClicked = false; async function f(data) { return await fetch("/api/now/table/x_g_dh5_hsisat_class/" + $scope.data.classId, { method: "PATCH", body: JSON.stringify(data), headers: { "Content-Type": "application/json", "X-UserToken": g_ck, }, }) } // this is to handle some styling on the chevrons // that the SCSS compilation doesn't allow for let interval; let tries = 0; interval = setInterval(() => { const els = [...document.querySelectorAll(".phases > :has(~ [aria-current=step])")]; if (els.length) { clearInterval(interval); interval = null; els.forEach((el) => { el.style.setProperty("--background", "#162e51") el.style.setProperty("--text", "#fff"); }); return; } tries += 1; if (tries > 5) { clearInterval(interval); interval = null; return; } }, 100); $scope.scheduleClass = async function () { const response = await f({ state: 3 }); if (response.ok) return location.reload(); spUtil.addErrorMessage("Unable to update class status"); }; $scope.completeClass = async function () { const response = await f({ state: 5 }); if (response.ok) return location.reload(); spUtil.addErrorMessage("Unable to update class status"); }; $scope.assignInstructors = function() { c.data.assignClicked = true; c.data.action = 'assign'; $scope.server.update().then(function(){ c.data.action = ''; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.phases { --background: #005ea2; --text: #fff; > [aria-current="step"] { --background: #162e51; --text: #fff; } } input[readonly] { background-color: transparent; box-shadow: none; cursor: default; } nav { ul { list-style: none; padding: 0; > * + * { margin-top: 0.5rem; } } a, button { text-align: left; } } .alert a { font-weight: 700; } .alert-success a { color: darken($brand-success, 20%); } .alert-info a { color: darken($brand-info, 20%); } .alert-warning a { color: darken($brand-warning-text, 20%); } .alert-danger a { color: darken($brand-danger, 20%); } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-homepage</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Homepage</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.class_details = { ...GlideRecordUtils.toJson(classGR, { full: true }), }; const today = new GlideDate().getValue(); const announcements = []; const announcementGR = new GlideRecord(Constants.ANNOUNCEMENT_TABLE); announcementGR.addQuery("class", data.classId); announcementGR.addQuery("start_date", "<=", today); announcementGR.addQuery("end_date", ">=", today); announcementGR.query(); while (announcementGR.next()) { announcements.push(GlideRecordUtils.toJson(announcementGR, { full: true })); } data.announcements = announcements; // kick off assign_instructors event if(input && input.action == 'assign'){ gs.eventQueue('x_g_dh5_hsisat.assign_instructors', classGR, classGR.getValue('sys_id')); } // action visibility data.showEditClassDetailsAction = ClassUtils.showEditClassDetailsAction(classGR); data.showEditClassDatesAction = ClassUtils.showEditClassDatesAction(classGR); data.showCreateClassAnnouncementAction = ClassUtils.showCreateClassAnnouncementAction(classGR); data.showViewStudentLibraryAction = ClassUtils.showViewStudentLibraryAction(classGR); data.showScheduleClassAction = ClassUtils.showScheduleClassAction(classGR); data.showCancelClassAction = ClassUtils.showCancelClassAction(classGR); data.showCompleteClassAction = ClassUtils.showCompleteClassAction(classGR); data.showAssignInstructors = ClassUtils.showAssignInstructors(classGR); data.showActions = [ data.showEditClassDetailsAction, data.showEditClassDatesAction, data.showCreateClassAnnouncementAction, data.showViewStudentLibraryAction, data.showScheduleClassAction, data.showCancelClassAction, data.showCompleteClassAction, ].some(Boolean); // views visibility data.showClassStatistics = ClassUtils.isClassStatisticsActive(); // Get Conflicts - if there are any that are occuring on today or in the future, and not resolved - display Conflicts link - HA-395 var conflictsGR = new GlideRecord(Constants.COURSE_CONFLICT_TABLE); conflictsGR.addQuery("course_id.class_id", data.classId); conflictsGR.addEncodedQuery("is_resolved!=true"); conflictsGR.query(); if (conflictsGR.next()) { var courseGR = conflictsGR.course_id.getRefRecord(); var courseDateTime = courseGR.getValue("start_date_time"); if (courseDateTime > today)data.showConflicts = true; } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-23 16:59:23</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>cb4691a71b726a503b5e657fe54bcb0c</sys_id>
<sys_mod_count>173</sys_mod_count>
<sys_name>HAISP Class Homepage</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_cb4691a71b726a503b5e657fe54bcb0c</sys_update_name>
<sys_updated_by>JMCumbee</sys_updated_by>
<sys_updated_on>2025-09-24 20:12:29</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div ng-if="data.classId"> <div class="row"> <div class="col-md-9"> <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Class {{data.class_details.class_number}} </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li aria-current="page" class="active"> {{data.class_details.class_number}} </li> </ol> <div class="row" ng-if="[1, 3, 4, 5].includes(data.class_details.state)"> <div class="col-xs-12"> <ol class="phases" role="list"> <li ng-if="data.class_details.state == 1" aria-current="{{data.class_details.state == 1 ? 'step' : 'false'}}">Draft</li> <li aria-current="{{data.class_details.state == 3 ? 'step' : 'false'}}">Scheduled</li> <li aria-current="{{data.class_details.state == 4 ? 'step' : 'false'}}">In Progress</li> <li aria-current="{{data.class_details.state == 5 ? 'step' : 'false'}}">Graduated</li> </ol> </div> </div> <div class="row" ng-if="data.class_details.cancellation_reason"> <div class="alert alert-danger"> <p> This class was cancelled for the following reason: </p> <p> {{data.class_details.cancellation_reason}} </p> </div> </div> <div class="row" ng-if="data.announcements.length"> <div class="col-xs-12"> <h3> Announcements </h3> <div ng-repeat="announcement in data.announcements" class="alert alert-{{announcement.type}}" role="alert" ng-bind-html="announcement.content"></div> </div> </div> <h3> Class Details </h3> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="class_number">Class Number</label> <input id="class_number" type="text" class="form-control" value="{{data.class_details.class_number}}" readonly> </div> <div class="form-group"> <label for="class_configuration_id">Curriculum Model</label> <input id="class_configuration_id" type="text" class="form-control" value="{{data.class_details.class_configuration_id.label}}" readonly> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="location_code">Location</label> <input id="location_code" type="text" class="form-control" value="{{data.class_details.location_code.label}}" readonly> </div> <div class="form-group"> <label for="homeroom_facility_id">Homeroom Location</label> <input id="homeroom_facility_id" type="text" class="form-control" value="{{data.class_details.homeroom_facility_id.label}}" readonly> </div> </div> </div> <h3> Contact Information </h3> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="class_coordinator_user_id">Class Coordinator</label> <input id="class_cordinator_user_id" type="text" class="form-control" value="{{data.class_details.class_coordinator_user_id.label}}" readonly> </div> <div class="form-group"> <label for="class_coordinator_email">Email</label> <div ng-class="{'input-group': data.class_details.class_coordinator_email}"> <input id="class_coordinator_email" type="text" class="form-control" value="{{data.class_details.class_coordinator_email}}" readonly> <span class="input-group-btn" ng-if="data.class_details.class_coordinator_email"> <a href="mailto:{{data.class_details.class_coordinator_email}}" class="btn btn-default"> <span class="sr-only">Email Class Coordinator</span> <i class="fa fa-envelope"></i> </a> </span> </div> </div> <div class="form-group"> <label for="class_coordinator_phone_number">Phone</label> <div ng-class="{'input-group': data.class_details.class_coordinator_phone_number}"> <input id="class_coordinator_phone_number" type="text" class="form-control" value="{{data.class_details.class_coordinator_phone_number}}" readonly> <span class="input-group-btn" ng-if="data.class_details.class_coordinator_phone_number"> <a href="tel:{{data.class_details.class_coordinator_phone_number}}" class="btn btn-default"> <span class="sr-only">Call Class Coordinator</span> <i class="fa fa-phone"></i> </a> </span> </div> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="teams_channel_email">Teams Channel Email</label> <div ng-class="{'input-group': data.class_details.teams_channel_email}"> <input id="teams_channel_email" type="text" class="form-control" value="{{data.class_details.teams_channel_email}}" readonly> <span class="input-group-btn" ng-if="data.class_details.teams_channel_email"> <a href="mailto:{{data.class_details.teams_channel_email}}" class="btn btn-default"> <span class="sr-only">Email Teams Channel</span> <i class="fa fa-envelope"></i> </a> </span> </div> </div> </div> </div> <h3> Important Dates </h3> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="start_date">Start Date</label> <input id="start_date" type="date" class="form-control" value="{{data.class_details.start_date}}" readonly> </div> <div class="form-group"> <label for="end_date">End Date</label> <input id="end_date" type="date" class="form-control" value="{{data.class_details.end_date}}" readonly> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="arrival_date">Arrival Date</label> <input id="arrival_date" type="date" class="form-control" value="{{data.class_details.arrival_date}}" readonly> </div> <div class="form-group"> <label for="departure_date">Departure Date</label> <input id="departure_date" type="date" class="form-control" value="{{data.class_details.departure_date}}" readonly> </div> <div class="form-group"> <label for="graduation_date">Graduation Date</label> <input id="graudation_date" type="date" class="form-control" value="{{data.class_details.graduation_date}}" readonly> </div> </div> </div> </div> </div> </div> <div class="col-md-3"> <div class="panel panel-default" ng-if="data.showActions"> <div class="panel-heading"> <h3 class="panel-title"> Actions </h3> </div> <div class="panel-body"> <nav aria-label="class actions"> <ul> <li ng-if="data.showEditClassDetailsAction"> <a class="btn btn-link btn-block" href="?id=haisp_class_edit_details&class_id={{data.classId}}">Edit Class Details</a> </li> <li ng-if="data.showEditClassDatesAction"> <a class="btn btn-link btn-block" href="?id=haisp_class_edit_dates&class_id={{data.classId}}">Edit Class Dates</a> </li> <li ng-if="data.showCreateClassAnnouncementAction"> <a class="btn btn-link btn-block" href="?id=haisp_class_announcements_add&class_id={{data.classId}}">Create Class Announcement</a> </li> <li ng-if="data.showViewStudentLibraryAction"> <a class="btn btn-link btn-block" href="https://icegov.sharepoint.com/:f:/r/sites/olcd/New%20OLCD%20Doc%20Library/Course%20Library/HSISAT/HSISAT%20%5B2.2%5D?csf=1&web=1&e=MGsd9d" target="_blank">View Student Library</a> </li> <li ng-if="data.showScheduleClassAction"> <form ng-submit="scheduleClass()"> <button type="submit" class="btn btn-link btn-block"> Schedule Class </button> </form> </li> <li ng-if="data.showCancelClassAction"> <a class="btn btn-link btn-block" href="?id=haisp_class_edit_cancel&class_id={{data.classId}}">Cancel Class</a> </li> <li ng-if="data.showCompleteClassAction"> <form ng-submit="completeClass()"> <button type="submit" class="btn btn-link btn-block">Complete Class</button> </form> </li> <li ng-if="data.showAssignInstructors"> <form ng-submit="assignInstructors()"> <button ng-disabled="c.data.assignClicked" type="submit" class="btn btn-link btn-block">Assign Instructors</button> </form> </li> </ul> </nav> </div> </div> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Views </h3> </div> <div class="panel-body"> <nav aria-label="class views"> <ul> <li> <a class="btn btn-link btn-block" href="?id=haisp_class_schedule&class_id={{data.classId}}">Schedule</a> </li> <li> <a class="btn btn-link btn-block" href="?id=haisp_class_announcements&class_id={{data.classId}}">Announcements</a> </li> <li> <a class="btn btn-link btn-block" href="?id=haisp_class_enrollment&class_id={{data.classId}}">Enrollment</a> </li> <li ng-if="data.showClassStatistics"> <a class="btn btn-link btn-block" href="?id=haisp_class_statistics&class_id={{data.classId}}">Statistics</a> </li> <li ng-if="data.showConflicts"> <a class="btn btn-link btn-block" href="?id=haisp_conflict_report&class_id={{data.classId}}">Conflicts</a> </li> </ul> </nav> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-data-table</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Data Table</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-09-23 13:32:50</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>0dc97f171b8c3650065762cae54bcb53</sys_id>
<sys_mod_count>2</sys_mod_count>
<sys_name>HAISP Data Table</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_0dc97f171b8c3650065762cae54bcb53</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-23 14:22:57</sys_updated_on>
<template>
<![CDATA[ <div class="table-responsive"> <table class="table table-striped table-hover"> <caption ng-class="{'sr-only': !data.show_caption && data.title}">{{data.title}}</caption> </table> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, spUtil) { /* widget controller */ var c = this; $scope.selectedInstructors = {}; $scope.selectedUnit = ""; $scope.startDate = ""; $scope.unitQuery = "active=true"; $scope.updateUnit = function(unit) { if($scope.selectedUnit.value != ''){ $scope.unitQuery = "active=true^aor_code=" + $scope.selectedUnit.value; } else { $scope.unitQuery = "active=true"; } } $scope.getResults = function(){ if($scope.startDate === ""){ spUtil.addErrorMessage("Select a start date to report on."); return; } if(c.data.canQuery){ if(Object.keys($scope.selectedInstructors).length === 0){ spUtil.addErrorMessage("Select instructors to report on."); return; } } else { $scope.selectedInstructors = c.data.self; } c.data.selectedInstructors = $scope.selectedInstructors; c.data.startDate = new Date($scope.startDate); c.data.action = "getResults"; $scope.server.update().then(function(){ c.data.action = ""; }) } $scope.getObjectLength = function(obj) { return Object.keys(obj).length; }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>table { width: 100%; } table, td, th { border: solid 1px $brand-primary; padding-left: 5px; padding-right: 5px; text-align: right; } tr:nth-child(even) { background-color: #f5f7fa; } .week-header { text-align: center; } .week-col { width: 6.5%; } .instructor-col { text-align: left; } .fa.fa-asterisk.mandatory { color: red; } </css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Instructor Hours Report</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { const hoursUtil = new InstructorHoursUtil(); data.self = { value: gs.getUserID(), displayValue: gs.getUserDisplayName() } data.isInstructor = SecurityUtils.isInstructor(); data.isSectionChief = SecurityUtils.isSectionChief(); data.isUnitChief = SecurityUtils.isUnitChief(); data.isProgramManager = SecurityUtils.isProgramManager(); data.isAppAdmin = SecurityUtils.isApplicationAdministrator(); data.canQuery = (data.isSectionChief || data.isUnitChief || data.isProgramManager || data.isAppAdmin); if(input && input.action == 'getResults'){ let startDate = new GlideDate(); const selectedInstructorsIDs = input.selectedInstructors.value.split(','); const selectedInstructorsDVs = input.selectedInstructors.displayValue.split('####'); data.hoursObj = {}; for(let instructor in selectedInstructorsIDs){ const instructorID = selectedInstructorsIDs[instructor] let startDate = new GlideDateTime(); startDate.setValue(input.startDate); data.hoursObj[instructorID] = {}; data.hoursObj[instructorID].displayValue = selectedInstructorsDVs[instructor]; data.hoursObj[instructorID].hours = []; data.weekOfArray = []; for(let i = 1; i <= 12; i++){ const hourObj = JSON.parse(hoursUtil.getTheWeekv2(instructorID, startDate)); //console.log(hourObj); const date = hourObj.date.split(' '); const month = date[0].split('-'); data.weekOfArray.push({ value: month[1] + '-' + month[2] }); data.hoursObj[instructorID].hours.push({ value: hourObj.value }); startDate.addDaysUTC(7); //console.log(data.hoursObj); } } //console.log(JSON.stringify(data.hoursObj)); } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-09-12 13:37:50</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>8d51d7ff1b7f2ed0065762cae54bcbf2</sys_id>
<sys_mod_count>162</sys_mod_count>
<sys_name>HAISP Instructor Hours Report</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_8d51d7ff1b7f2ed0065762cae54bcbf2</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-18 15:43:02</sys_updated_on>
<template>
<![CDATA[ <div> <div class="col-lg-3 col-md-3"> <div class="panel panel-default"> <div class="panel-heading"> <div class="panel-title"> Search Criteria </div> </div> <div class="panel-body"> <div class="form-group"> <i ng-class="{'fa fa-asterisk mandatory': startDate === ''}"></i> <label class="field-label">Start Date</label> <input type="date" class="form-control" ng-model="startDate"> </div> <div class="form-group" ng-if="data.canQuery"> <label class="field-label">Filter Instructors by Unit</label> <sn-record-picker ng-change="updateUnit()" field="selectedUnit" table="'x_g_dh5_hsisat_aor_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="20" default-query="'is_active=true'" ></sn-record-picker> </div> <div class="form-group" ng-if="data.canQuery"> <i ng-class="{'fa fa-asterisk mandatory': getObjectLength(selectedInstructors) === 0}"></i> <label class="field-label">Select Instructors</label> <sn-record-picker field="selectedInstructors" table="'x_g_dh5_hsisat_instructor'" display-field="'user_id'" value-field="'sys_id'" search-fields="'user_id'" page-size="20" multiple="true" default-query="unitQuery" ></sn-record-picker> </div> <div class="form-group"> <button class="btn btn-primary" ng-click="getResults()">Run Report</button> </div> </div> </div> </div> <div class="col-lg-9 col-md-9"> <div class="panel panel-default"> <div class="panel-heading"> <div class="panel-title"> Results </div> </div> <div class="panel-body"> <table ng-if="data.weekOfArray.length > 0"> <tr> <th></th> <th class="week-header" colspan="12">Week Beginning On</th> </tr> <tr> <th class="instructor-col">Instructor</th> <th class="week-col" ng-repeat="week in data.weekOfArray">{{week.value}}</th> </tr> <tr ng-repeat="instructor in data.hoursObj"> <td class="instructor-col class-label">{{instructor.displayValue}}</td> <td class="week-col" ng-repeat="week in instructor.hours">{{week.value}}</td> </tr> </table> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope) { /* widget controller */ var c = this; var new_url = "?id=haisp_instructor_profile&sys_id=" + c.data.instructor; $rootScope.$on("sp.form.record.updated", () => location.search = new_url); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Academy Form Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.isNew = ($sp.getParameter("sys_id")=="-1"); data.instructor = $sp.getParameter('instructor_id'); data.current_user = gs.getUserID(); data.hsi_form_widget = $sp.getWidget("widget-form", { ...options, query: "instructor_id=" + data.instructor }); data.canDelegate = LogicUtils.or( SecurityUtils.isSectionChief(), SecurityUtils.isUnitChief(), SecurityUtils.isProgramManager() ); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JMCumbee</sys_created_by>
<sys_created_on>2025-05-09 19:53:47</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>eafdabd31b916e10065762cae54bcb91</sys_id>
<sys_mod_count>17</sys_mod_count>
<sys_name>HSI Academy Form Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_eafdabd31b916e10065762cae54bcb91</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-16 15:43:33</sys_updated_on>
<template>
<![CDATA[ <div> <sp-widget widget="data.hsi_form_widget"></sp-widget> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>nav { ul { list-style: none; padding: 0; > * + * { margin-top: 0.5rem; } } a, button { text-align: left; font-weight: bold; } .description { padding-left: 13px; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Reports</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.show_conflict_report = true; data.conflict_report = "?id=haisp_conflict_report"; data.show_instructor_report = true; data.instructor_report = "?id=haisp_instructor_report"; })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-08-29 00:01:41</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>d750549f1be3e610065762cae54bcb79</sys_id>
<sys_mod_count>13</sys_mod_count>
<sys_name>HAISP Reports</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_d750549f1be3e610065762cae54bcb79</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-15 12:05:15</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <div class="panel-title"> Reports </div> </div> <div class="panel-body"> <nav aria-label=""> <ul> <li ng-if="data.show_conflict_report"> <a class="btn btn-link btn-block" href="{{data.conflict_report}}">Conflict List Report</a> <div class="description"> A report for the Schedulers to view all conflicts for a class. Report includes Instructors not meeting requirements and/or facilities assigned not being one of the preferred facilities identified on the courses. </div> </li> <li ng-if="data.show_instructor_report"> <a class="btn btn-link btn-block" href="{{data.instructor_report}}">Instructor Hours Report</a> <div class="description"> Overview of instructors' total teaching hours to support workload management and staffing decisions. </div> </li> </ul> </nav> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal) { const c = this; $scope.submitting = false; $scope.error = ""; $scope.added = []; $scope.add = function () { $scope.added.push({ sys_id: crypto.randomUUID().replace(/-/g, ""), facility_id: "", }); }; $scope.remove = function (rowId) { const index = $scope.added.findIndex((item) => item.sys_id === rowId); if (index > -1) { $scope.added.splice(index, 1); } }; $scope.deleted = []; $scope.delete = function (rowId) { $scope.deleted.push(rowId); }; $scope.undo = function (rowId) { const index = $scope.deleted.indexOf(rowId); if (index > -1) { $scope.deleted.splice(index, 1); } }; c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.cancel = function () { $scope.submitting = true; let changes = ($scope.deleted.length + $scope.added.length) > 0; if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_course_homepage&course_id=" + $scope.data.courseId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_course_homepage&course_id=" + $scope.data.courseId; } }; $scope.submit = function () { $scope.error = ""; $scope.submitting = true; const missing = $scope.added.filter((item) => !item.facility_id?.value).length; if (missing) { $scope.error = "A facility must be added prior to submitting"; $scope.submitting = false; return; } c.data.added = $scope.added; c.data.deleted = $scope.deleted; c.server.update() .then(function (response) { if (response.success) { location.search = "?id=haisp_course_homepage&course_id=" + $scope.data.courseId; } else { $scope.submitting = false; } }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; } sp-variable-layout [role="heading"] { position: absolute; left: -999vw; } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } } th, td { vertical-align: middle !important; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-haisp-manage-facilities-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Manage Facilities Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function ($sp, data, options, input) { const log = new Logger("Manage Facilities Form", "Portal Widget"); data.courseId = $sp.getParameter("course_id"); if (GeneralUtils.isEmpty(data.courseId)) return; const courseGR = new GlideRecord(Constants.COURSE_TABLE); if (LogicUtils.not(courseGR.get(data.courseId))) { data.courseId = Constants.VALUE_EMPTY; return; } data.course_details = GlideRecordUtils.toJson(courseGR, { full: true }); data.canEdit = courseGR.canWrite(); if (LogicUtils.not(data.canEdit)) return; if (input) { data.success = true; for (let i = 0; i < input.added.length; i++) { const { facility_id: { value: facility_id } } = input.added[i]; try { GlideRecordUtils.save(new GlideRecord(Constants.COURSE_FACILITY_TABLE), { facility_id, course_id: data.courseId, }); } catch (err) { log.error(err.message, "add_facility"); data.success = false; } } if (input.deleted.length) { const deleteGR = new GlideRecord(Constants.COURSE_FACILITY_TABLE); deleteGR.addQuery("sys_id", "IN", input.deleted); deleteGR.query(); while (deleteGR.next()) { try { GlideRecordUtils.save(deleteGR, { is_deleted: true, }); } catch (err) { log.error(err.message, "delete_facility"); } } } CourseUtils.triggerEvent_CheckPreferredFacility(courseGR); const isClassInProgress = GeneralUtils.areEqual( GlideRecordUtils.getValue(courseGR, "class_id.state"), ClassUtils.STATE_IN_PROGRESS ); if (isClassInProgress && (input.added.length || input.deleted.length)) { CourseUtils.triggerEvent_FacilityChanges(courseGR); } } data.facilities = []; const facilityGR = new GlideRecord(Constants.COURSE_FACILITY_TABLE); facilityGR.addQuery("course_id", data.courseId); facilityGR.addQuery("is_deleted", false); facilityGR.query(); while (facilityGR.next()) { data.facilities.push( GlideRecordUtils.toJson(facilityGR, { full: true }) ); } data.query = "location_code=" + GlideRecordUtils.getValue(courseGR, "class_id.location_code") + "^ORDERBYbuilding_room"; })($sp, data, options, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-31 19:11:33</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>f441074e1b8f26d03b5e657fe54bcbaa</sys_id>
<sys_mod_count>77</sys_mod_count>
<sys_name>HAISP Manage Facilities Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_f441074e1b8f26d03b5e657fe54bcbaa</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-12 19:01:24</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.courseId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form ng-if="data.courseId && data.canEdit" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Manage Assigned Facilities ({{data.course_details.instructional_block_name}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.course_details.class_id.value}}"> {{data.course_details.class_id.label}} </a> </li> <li> <a href="?id=haisp_course_homepage&course_id={{data.courseId}}"> {{data.course_details.instructional_block_name}} </a> </li> <li aria-current="page" class="active"> Manage Assigned Facilities </li> </ol> <h3> Assigned Facilities </h3> <div class="alert alert-danger" role="alert" ng-if="error"> {{error}} </div> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col">Facility</th> <th scope="col"> <span class="sr-only">Remove Facility</span> </th> </tr> </thead> <tbody> <tr ng-if="!data.facilities.length && !added.length"> <td colspan="2">No facilities currently assigned</td> </tr> <tr ng-repeat="facility in data.facilities"> <th scope="row">{{facility.facility_id.label}}</th> <td> <button type="button" class="btn btn-danger pull-right" ng-click="delete(facility.sys_id)" ng-if="!deleted.includes(facility.sys_id)"> <i class="fa fa-remove"></i> <span class="sr-only">Remove {{facility.facility_id.label}}</span> </button> <button type="button" class="btn btn-default pull-right" ng-click="undo(facility.sys_id)" ng-if="deleted.includes(facility.sys_id)"> <i class="fa fa-undo"></i> <span class="sr-only">Undo removal of {{facility.facility_id.label}}</span> </button> </td> </tr> <tr ng-repeat="facility in added track by facility.sys_id"> <th scope="row"> <sn-record-picker field="facility.facility_id" table="'x_g_dh5_hsisat_facility'" display-field="'building_room'" value-field="'sys_id'" search-fields="'building_room'" page-size="100" default-query="data.query"></sn-record-picker> </th> <td> <button type="button" class="btn btn-danger pull-right" ng-click="remove(facility.sys_id)"> <i class="fa fa-remove"></i> <span class="sr-only">Remove {{facility.facility_id}}</span> </button> </td> </tr> </tbody> <tfoot> <td colspan="2"> <button type="button" class="btn btn-default" ng-click="add()"> Add Facility </button> </td> </tfoot> </table> </div> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $window) { /* widget controller */ var c = this; //console.log(c.data.number_of_assigned_instructors) } ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; vertical-align: middle; } textarea[readonly], input[readonly] { background-color: transparent; box-shadow: none; cursor: default; height: min-content; resize: none !important; } .number { text-align: right; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Scheduler Course Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.courseId = $sp.getParameter("course"); const courseGR = new GlideRecord(Constants.COURSE_TABLE); if (courseGR.get(data.courseId)) { data.course = { ...GlideRecordUtils.toJson(courseGR, { full: true }), start_date_time: GlideRecordUtils.getDisplayValue(courseGR, "start_date_time"), required_instructors_number: GlideRecordUtils.getDisplayValue( courseGR, "course_configuration_id.required_instructor_count" ), }; data.class_number = courseGR.getDisplayValue("class_id"); data.course_identifier = courseGR.getDisplayValue("course_number"); // Replace with your actual field names data.course_number = courseGR.getDisplayValue("course_number"); data.instructional_block_name = courseGR.getDisplayValue("instructional_block_name"); data.unit_class_sequence = courseGR.getDisplayValue("unit_class_sequence"); data.unit_aor = courseGR.getDisplayValue("unit_aor"); data.start_date_time = courseGR.getDisplayValue("start_date_time"); data.required_instructors_number = courseGR.getDisplayValue("required_instructors_number"); data.roles = []; const configGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); configGR.addQuery("course_configuration_id", courseGR.getValue("course_configuration_id")); configGR.query(); while (configGR.next()) { data.roles.push({ role: GlideRecordUtils.getDisplayValue(configGR, "instructor_role_code"), count: GlideRecordUtils.getDisplayValue(configGR, "instructor_count"), }); } data.number_of_assigned_instructors = 0; const instructorGA = new GlideAggregate(Constants.COURSE_INSTRUCTOR_TABLE); instructorGA.addQuery("course_id", data.courseId); instructorGA.addAggregate("COUNT"); instructorGA.query(); if(instructorGA.next()){ data.number_of_assigned_instructors = instructorGA.getAggregate("COUNT"); } } else { data.courseId = Constants.VALUE_EMPTY; } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JHudson1</sys_created_by>
<sys_created_on>2025-06-23 18:02:02</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>1e254fb11b92a2d05c8ccbb6624bcb61</sys_id>
<sys_mod_count>64</sys_mod_count>
<sys_name>HAISP Scheduler Course Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_1e254fb11b92a2d05c8ccbb6624bcb61</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-11 19:03:09</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default" ng-if="!data.courseId"> <div class="panel-heading"> <h2 class="panel-title"> Course Not Found </h2> </div> <div class="panel-body"> <p> The requested course could not be found. </p> </div> </div> <div class="panel panel-default" ng-if="data.courseId"> <div class="panel-heading"> <h2 class="panel-title">Schedule Instructors</h2> </div> <div class="panel-body"> <h3 class="h4">Course Details</h3> <div class="form-group"> <label>Class Number</label> <input class="form-control" type="text" value="{{data.course.class_id.label}}" readonly> </div> <div class="form-group"> <label>HSI LP#</label> <input class="form-control" type="text" value="{{data.course.course_number}}" readonly> </div> <div class="form-group"> <label>Instructional Block Name</label> <input class="form-control" type="text" value="{{data.course.instructional_block_name}}" readonly> </div> <div class="form-group"> <label>Class Sequence</label> <input class="form-control" type="text" value="{{data.course.unit_class_sequence}}" readonly> </div> <div class="form-group"> <label>Unit</label> <input class="form-control" type="text" value="{{data.course.unit_aor.label}}" readonly> </div> <div class="form-group"> <label>Start Time</label> <input class="form-control" type="text" value="{{data.course.start_date_time}}" readonly> </div> <div class="form-group"> <label>Required Number of Instructors</label> <input class="form-control" type="text" value="{{data.course.required_instructors_number}}" readonly> </div> <div class="form-group"> <label>Number of Assigned Instructors</label> <input class="form-control" type="text" value="{{data.number_of_assigned_instructors}}" readonly> </div> <div> <h4>Instructor Role Requirements</h4> <table class="table table-striped"> <thead> <tr> <th scope="col">Instructor Role</th> <th scope="col" class="number">Number of Instructors</th> </tr> </thead> <tbody> <tr ng-repeat="role in data.roles"> <th scope="row">{{role.role}}</th> <td class="number">{{role.count}}</td> </tr> <tr ng-if="!data.roles.length"> <td colspan="2">No instructor requirements defined for this course.</td> </tr> </tbody> </table> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $location, $uibModal) { /* widget controller */ var c = this; if (!$scope.data.course_id) return; $scope.show_qualified = false; $scope.show_available = false; $scope.show_in_unit = true; $scope.removed_instructors = []; $scope.add = function (id){ const index = $scope.data.available_instructors.findIndex(i => i.instructor_id.value === id); const addedInstructor = $scope.data.available_instructors.splice(index, 1)[0]; addedInstructor.week_hours += $scope.data.course_hours; $scope.data.scheduled_instructors = [ addedInstructor, ...$scope.data.scheduled_instructors, ].sort((a, b) => { if (a.instructor_id.displayValue > b.instructor_id.displayValue) { return 1; } if (a.instructor_id.displayValue < b.instructor_id.displayValue) { return -1; } return 0; }); $scope.filter(); if (addedInstructor.sys_id) { const removedIndex = $scope.removed_instructors.findIndex(({ sys_id }) => sys_id === addedInstructor.sys_id); $scope.removed_instructors.splice(removedIndex, 1); } } $scope.remove = function(id) { const index = $scope.data.scheduled_instructors.findIndex(i => i.instructor_id.value === id); const removedInstructor = $scope.data.scheduled_instructors.splice(index, 1)[0]; removedInstructor.week_hours -= $scope.data.course_hours; removedInstructor.week_hours = Math.max(removedInstructor.week_hours, 0); $scope.data.available_instructors = [ removedInstructor, ...$scope.data.available_instructors, ].sort((a, b) => { if (a.instructor_id.displayValue > b.instructor_id.displayValue) { return 1; } if (a.instructor_id.displayValue < b.instructor_id.displayValue) { return -1; } return 0; }); $scope.filter(); if (removedInstructor.sys_id) { $scope.removed_instructors.push(removedInstructor); } } function redirect() { if ($scope.data.opened_from === "calendar") { $location.search("id=haisp_class_details&class_id=" + $scope.data.class_id); } else { $location.search("id=haisp_course_homepage&course_id=" + $scope.data.course_id); } } $scope.goBack = function () { redirect(); }; $scope.submitRecord = function () { $scope.submitting = true; console.log($scope.removed_instructors); c.data.action = "submit"; c.data.instructorsToWrite = $scope.data.scheduled_instructors; c.data.instructorsToDelete = $scope.removed_instructors; c.server.update() .then(function (response) { delete c.data.action; delete c.data.instructorsToWrite; delete c.data.instructorsToDelete; redirect(); }); }; $scope.submitting = false; c.modalController = function($scope, $uibModalInstance) { $scope.accept = function() { $uibModalInstance.close("accept"); }; $scope.dismiss = function() { $uibModalInstance.dismiss("cancel"); }; }; $scope.cancel = function() { $scope.submitting = true; const changes = $scope.removed_instructors.length || $scope.data.scheduled_instructors.filter(({ sys_id }) => !sys_id).length; if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function() { redirect(); }, function() { $scope.submitting = false; }); } else { redirect(); } }; $scope.batch_size = 10; $scope.current_page = 1; $scope.filtered_instructors = [ ...$scope.data.available_instructors, ]; $scope.displayed_instructors = [ ...$scope.filtered_instructors.slice(0, $scope.batch_size), ]; $scope.total_count = $scope.filtered_instructors.length; $scope.paginate = function () { $scope.displayed_instructors = [ ...$scope.filtered_instructors.slice( Math.max($scope.current_page - 1, 0) * $scope.batch_size, (Math.max($scope.current_page - 1, 0) + 1) * $scope.batch_size ), ]; }; $scope.filter = function () { $scope.filtered_instructors = $scope.data.available_instructors.filter( (instructor) => { let filters = [true]; if ($scope.show_available) { filters.push(instructor.is_available); } if ($scope.show_qualified) { filters.push(instructor.is_qualified); } if ($scope.show_in_unit) { filters.push(instructor.is_in_unit) } return filters.every(Boolean); } ); $scope.current_page = 1; $scope.total_count = $scope.filtered_instructors.length; $scope.paginate(); }; if ($scope.data.course_id) $scope.filter(); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>thead [colspan] { text-align: center; border-bottom: 0; } [scope="row"] { font-weight: normal; } td, th { vertical-align: middle !important; } .form-inline .form-group { display: inline-block; margin-bottom: 0; vertical-align: middle; label { display: flex; align-items: center; gap: 0.5em; margin-right: 2em; } } .number { text-align: right; } .pagination { margin: 0; } .badge { background-color: var(--badge-color, #777); box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); color: var(--badge-text); font-size: inherit; font-weight: normal; } [type="checkbox"][role="switch"] { -webkit-appearance: none; -moz-appearance: none; appearance: none; position: relative; font-size: inherit; width: 2.5em; height: 0.75em; box-sizing: content-box; border: 1px solid #777; border-radius: 1em; vertical-align: text-bottom; color: inherit; background: #c5c5c5; &:checked { background: $brand-primary; } } [type="checkbox"][role="switch"]::before { content: ""; position: absolute; top: 50%; left: -0.125rem; transform: translate(0, -50%); box-sizing: border-box; width: 1.5em; height: 1.5em; border: 1px solid #777; border-radius: 50%; background: #fff; transition: 0.125s ease-in-out; box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.1); } [type="checkbox"][role="switch"]:checked::before { left: 2rem; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-assign-instructors-v2</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Assigned Course Instructor v2</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, input) { const log = new Logger("Assign Course Instructors", "Portal Widget"); data.displayed_instructors = []; data.course_id = $sp.getParameter("course"); data.opened_from = $sp.getParameter("opened_from") || "course"; const courseGR = new GlideRecordSecure(Constants.COURSE_TABLE); if (LogicUtils.not(courseGR.get(data.course_id))) { data.course_id = Constants.VALUE_EMPTY; return; } data.class_id = courseGR.getValue("class_id"); data.canEdit = CourseUtils.showScheduleInstructorsAction(courseGR); if (GeneralUtils.areEqual(input?.action, "submit")) { if (GeneralUtils.hasValue(input.instructorsToWrite)) { for (let i = 0, instructor; (instructor = input.instructorsToWrite[i]); i++) { const instructorGR = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); if (LogicUtils.not(GeneralUtils.hasValue(instructor.sys_id) && instructorGR.get(instructor.sys_id))) { instructorGR.newRecord(); } try { GlideRecordUtils.save(instructorGR, { course_id: data.course_id, instructor_id: instructor.instructor_id.value, instructor_role_code: instructor.instructor_role_code.value, }); } catch (err) { log.error(err.message, "save"); } } } if (GeneralUtils.hasValue(input.instructorsToDelete)) { for (let i = 0, instructor; (instructor = input.instructorsToDelete[i]); i++) { const instructorGR = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); if (GeneralUtils.hasValue(instructor.sys_id) && instructorGR.get(instructor.sys_id)) { instructorGR.deleteRecord(); } } } } const course_start = GlideRecordUtils.getValue(courseGR, "start_date_time"); const course_end = GlideRecordUtils.getValue(courseGR, "end_date_time"); const course_week = new GlideDateTime(course_start); const day_of_week = course_week.getDayOfWeekUTC(); course_week.addDaysUTC(-1 * (day_of_week % 7)); const week_start = gs.dateGenerate(course_week.getDate().getValue(), "00:00:00"); course_week.addDaysUTC(6); const week_end = gs.dateGenerate(course_week.getDate().getValue(), "23:59:59"); const start_gdt = new GlideDateTime(course_start); const end_gdt = new GlideDateTime(course_end); data.course_hours = GlideDateTime.subtract(start_gdt, end_gdt).getNumericValue() / (60 * 60 * 1000); const course_unit = GlideRecordUtils.getValue(courseGR, "unit_aor"); // get course instructor requirements const requirementGR = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); requirementGR.addQuery("course_configuration_id", courseGR.getValue("course_configuration_id")); requirementGR.query(); let certifications = new Set(); while (requirementGR.next()) { GlideRecordUtils.getValue(requirementGR, "certifications") .forEach((certification) => certifications.add(certification)); } certifications = [...certifications].filter(Boolean); const instructors = []; const assigned_ids = []; // get assigned instructors const assignedGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_TABLE); assignedGR.addQuery("course_id", data.course_id); assignedGR.query(); while (assignedGR.next()) { assigned_ids.push(assignedGR.getValue("instructor_id")); const instructor = GlideRecordUtils.toJson(assignedGR, { full: true }); for (let field in instructor) { if (instructor[field].label) { instructor[field].displayValue = instructor[field].label; delete instructor[field].label; } } instructors.push(instructor); } // get all instructors const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); const q = instructorGR.addQuery("active", true); if (GeneralUtils.hasValue(assigned_ids)) { q.addOrCondition("sys_id", "IN", assigned_ids); } instructorGR.orderBy("user_id.name"); instructorGR.query(); while (instructorGR.next()) { let instructor = instructors.find(({ instructor_id }) => instructorGR.getUniqueValue() === instructor_id?.value); const backgroundColor = GlideRecordUtils.getValue(instructorGR, "aor_code.aor_color"); // get week hours const hoursGA = new GlideAggregate(Constants.INSTRUCTOR_SCHEDULE_TABLE); hoursGA.addQuery("instructor_id", instructorGR.getUniqueValue()); hoursGA.addNullQuery("deleted_at"); hoursGA.addNotNullQuery("course_id"); hoursGA.addQuery("start_date", ">=", week_start); hoursGA.addQuery("start_date", "<=", week_end); hoursGA.addAggregate("SUM", "hours_unavailable"); hoursGA.groupBy("instructor_id"); hoursGA.query() let week_hours = 0; if (hoursGA.next()) { week_hours = parseFloat(hoursGA.getAggregate("SUM", "hours_unavailable")); } // get availability const scheduleGR = new GlideRecord(Constants.INSTRUCTOR_SCHEDULE_TABLE); scheduleGR.addNullQuery("deleted_at"); scheduleGR.addQuery("instructor_id", instructorGR.getUniqueValue()); scheduleGR.addQuery("course_id", "!=", data.course_id); scheduleGR.addQuery("start_date", "<=", course_start); scheduleGR.addQuery("end_date", ">=", course_start); scheduleGR.setLimit(1); scheduleGR.query(); let is_available = LogicUtils.not(scheduleGR.hasNext()); // get qualified let is_qualified = true; if (GeneralUtils.hasValue(certifications)) { const certificationGR = new GlideRecord(Constants.INSTRUCTOR_CERTIFICATION_TABLE); certificationGR.addQuery("instructor_id", instructorGR.getUniqueValue()); certificationGR.addQuery("certification_code", "IN", certifications); certificationGR.addQuery("active", true); certificationGR.addQuery("approval", "NOT IN", ["requested", "rejected"]); certificationGR.setLimit(1); certificationGR.query(); is_qualified = certificationGR.hasNext(); } if (GeneralUtils.hasValue(instructor)) { instructor.aor_code = { value: GlideRecordUtils.getValue(instructorGR, "aor_code"), displayValue: GlideRecordUtils.getDisplayValue(instructorGR, "aor_code"), background: "#" + backgroundColor, text: getTextColorForBackground(hexToRgb(backgroundColor)), }; instructor.week_hours = week_hours; instructor.is_available = is_available; instructor.is_qualified = is_qualified; instructor.is_in_unit = GeneralUtils.areEqual( course_unit, instructor.aor_code.value ); } else { instructor = { sys_id: Constants.VALUE_EMPTY, instructor_id: { value: instructorGR.getUniqueValue(), displayValue: instructorGR.getDisplayValue(), }, instructor_role_code: { value: Constants.VALUE_EMPTY, displayValue: Constants.VALUE_EMPTY, }, course_id: { value: courseGR.getUniqueValue(), displayValue: courseGR.getDisplayValue(), }, aor_code: { value: GlideRecordUtils.getValue(instructorGR, "aor_code"), displayValue: GlideRecordUtils.getDisplayValue(instructorGR, "aor_code"), background: "#" + backgroundColor, text: getTextColorForBackground(hexToRgb(backgroundColor)), }, week_hours, is_available, is_qualified, is_in_unit: GeneralUtils.areEqual( course_unit, GlideRecordUtils.getValue(instructorGR, "aor_code") ) }; instructors.push(instructor); } } data.scheduled_instructors = instructors.filter((instructor) => { return GeneralUtils.hasValue(instructor.sys_id); }); data.available_instructors = instructors.filter((instructor) => { return GeneralUtils.isEmpty(instructor.sys_id); }); function hexToRgb(hex) { // Remove the hash (#) if present hex = hex.replace(/^#/, ""); // Parse the red, green, and blue components const r = parseInt(hex.substring(0, 2), 16) || 255; // red const g = parseInt(hex.substring(2, 4), 16) || 255; // green const b = parseInt(hex.substring(4, 6), 16) || 255; // blue return [r, g, b]; } function getTextColorForBackground([r, g, b] = []) { // Normalize RGB values const normalizedR = r / 255; const normalizedG = g / 255; const normalizedB = b / 255; // Apply luminance formula components const calcComponent = (value) => value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4); const luminance = 0.2126 * calcComponent(normalizedR) + 0.7152 * calcComponent(normalizedG) + 0.0722 * calcComponent(normalizedB); // Compare luminance against threshold (0.5) return luminance > 0.5 ? "#1b1b1b" : "#ffffff"; } })($sp, data, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-09-09 18:34:08</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>89883c8f1bf3e2d0065762cae54bcbc3</sys_id>
<sys_mod_count>110</sys_mod_count>
<sys_name>HAISP Assigned Course Instructor v2</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_89883c8f1bf3e2d0065762cae54bcbc3</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-10 21:41:22</sys_updated_on>
<template>
<![CDATA[ <form ng-show="data.class_id"> <fieldset ng-disabled="submitting"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Assigned Instructors</h3> </div> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col"> <span class="sr-only">Instructor Actions</span> </th> <th scope="col">Name</th> <th scope="col">Unit</th> <th scope="col" class="number">Hours for Week</th> <th scope="col">Role</th> </tr> </thead> <tbody> <tr ng-if="!data.scheduled_instructors.length"> <td colspan="5">No instructors currently assigned</td> </tr> <tr ng-repeat="instructor in data.scheduled_instructors track by instructor.instructor_id.value"> <td> <button type="button" class="btn action" ng-click="remove(instructor.instructor_id.value)" ng-if="data.canEdit"> <span class="sr-only">Unassign Instructor</span> <i class="fa fa-minus" aria-hidden="true"></i> </button> </td> <th scope="row"> <a href="hsi-academy?id=haisp_instructor_profile&sys_id={{instructor.instructor_id.value}}" target="_blank">{{instructor.instructor_id.displayValue}}</a> </th> <td> <span class="badge" style="--badge-color:{{instructor.aor_code.background}}; --badge-text:{{instructor.aor_code.text}};">{{instructor.aor_code.displayValue}}</span> </td> <td class="number">{{instructor.week_hours}}</td> <td> <span ng-if="data.canEdit"> <label for="{{instructor.instructor_id.value}}_role" class="sr-only">Instructor Role</label> <sn-record-picker id="{{instructor.instructor_id.value}}_role" field="instructor.instructor_role_code" table="'x_g_dh5_hsisat_instructor_role_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="data.role_filter" ></sn-record-picker> </span> <span ng-if="!data.canEdit"> {{instructor.instructor_role_code.displayValue}} </span> </td> </tr> </tbody> </table> </div> </div> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">All Instructors</h3> </div> <div class="panel-body"> <div class="form-inline"> <div class="form-group"> <label> <span data-label>Available</span> <input type="checkbox" role="switch" ng-model="show_available" ng-change="filter()"> </label> </div> <div class="form-group"> <label> <span data-label>Qualified</span> <input type="checkbox" role="switch" ng-model="show_qualified" ng-change="filter()"> </label> </div> <div class="form-group"> <label> <span data-label>In Unit</span> <input type="checkbox" role="switch" ng-model="show_in_unit" ng-change="filter()"> </label> </div> </div> </div> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col"> <span class="sr-only">Remove Instructor</span> </th> <th scope="col">Name</th> <th scope="col">Unit</th> <th scope="col" class="number">Hours for Week</th> <th scope="col" class="text-center">Available</th> <th scope="col" class="text-center">Qualified</th> </tr> </thead> <tbody> <tr ng-if="!displayed_instructors.length"> <td colspan="6">No instructors meet the selected criteria</td> </tr> <tr ng-repeat="instructor in displayed_instructors track by instructor.instructor_id.value"> <td> <button type="button" class="btn action" ng-click="add(instructor.instructor_id.value)" ng-if="data.canEdit"> <span class="sr-only">Assign Instructor</span> <i class="fa fa-plus" aria-hidden="true"></i> </button> </td> <th scope="row"> <a href="hsi-academy?id=haisp_instructor_profile&sys_id={{instructor.instructor_id.value}}" target="_blank">{{instructor.instructor_id.displayValue}}</a> </th> <td> <span class="badge" style="--badge-color:{{instructor.aor_code.background}}; --badge-text:{{instructor.aor_code.text}};">{{instructor.aor_code.displayValue}}</span> </td> <td class="number">{{instructor.week_hours}}</td> <td class="text-center text-2x"> <span class="sr-only">{{instructor.is_available ? "Yes" : "No"}}</span> <i ng-if="instructor.is_available" class="fa fa-check-circle text-success" aria-hidden="true"></i> </td> <td class="text-center text-2x"> <span class="sr-only">{{instructor.is_qualified ? "Yes" : "No"}}</span> <i ng-if="instructor.is_qualified" class="fa fa-check-circle text-success" aria-hidden="true"></i> </td> </tr> </tbody> </table> </div> <div class="panel-footer"> <uib-pagination total-items="total_count" items-per-page="batch_size" ng-model="current_page" class="pagination-sm" boundary-link-numbers="true" rotate="false" ng-click="paginate(current_page)"></uib-pagination> </div> </div> <div class="panel panel-body"> <button ng-if="data.canEdit" type="submit" class="btn btn-primary" ng-click="submitRecord()"> Submit </button> <button ng-if="data.canEdit" type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> <button ng-if="!data.canEdit" type="button" class="btn btn-default" ng-click="goBack()"> Go Back </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, spUtil) { /* widget controller */ var c = this; $scope.updateClass = function(selected_class) { spUtil.get('hsi-widget-data-table', { ...$scope.data.todays_classes_options, filter: "class_id=" + selected_class.value + $scope.data.todays_classes_default_filter, }).then(function (response){ $scope.data.today = response; }); spUtil.get('hsi-widget-data-table', { ...$scope.data.upcoming_classes_options, filter: "class_id=" + selected_class.value + $scope.data.upcoming_classes_default_filter, }).then(function (response){ $scope.data.this_week = response; }); } }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.select2-container { margin-bottom: 1rem; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>hsi-courses</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI This Week Courses PH</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function ($sp, data, options, input) { const INSTRUCTOR_QUERY = "^RLQUERYx_g_dh5_hsisat_course_instructor.course_id,>=1^instructor_id.user_idDYNAMIC90d1921e5f510100a9ad2572f2b477fe^ENDRLQUERY"; const me = gs.getUserID(); const my_classes = new Set(); // get base access let is_student = SecurityUtils.isStudent(); let is_instructor = SecurityUtils.isInstructor(); // check to see if they are in any other groups that would // override being an instructor or student const memberGR = new GlideRecord(Constants.USER_GROUP_MEMBER_TABLE); memberGR.addQuery("user", gs.getUserID()); memberGR.addQuery("group.name", "STARTSWITH", "HAISP"); memberGR.addQuery( "group.name", "NOT IN", [ SecurityUtils.GROUP_ALL_USERS, SecurityUtils.GROUP_INSTRUCTORS, SecurityUtils.GROUP_STUDENTS, ] ); memberGR.setLimit(1); memberGR.query(); if (memberGR.next()) { is_student = false; is_instructor = false; } if (is_instructor) { is_student = false; const assignmentGA = new GlideAggregate(Constants.COURSE_INSTRUCTOR_TABLE); assignmentGA.addQuery("instructor_id.user_id", me); assignmentGA.addAggregate("COUNT"); assignmentGA.groupBy("course_id.class_id"); assignmentGA.query(); while (assignmentGA.next()) { my_classes.add(assignmentGA.getValue("course_id.class_id")); } } if (is_student) { const enrollmentGR = new GlideRecord(Constants.CLASS_ENROLLMENT_TABLE); enrollmentGR.addQuery("student_id.user_id", me); enrollmentGR.query(); while (enrollmentGR.next()) { my_classes.add(enrollmentGR.getValue("class_id")); } } const query = []; if (LogicUtils.or(is_student, is_instructor)) { query.push("sys_idIN" + [...my_classes]); } query.push("stateNOT IN5,-1^RLQUERYx_g_dh5_hsisat_course.class_id,>=1^start_date_time>=javascript:gs.beginningOfToday()^start_date_timeRELATIVELT@dayofweek@ahead@7^ENDRLQUERY^ORDERBYgraduation_date"); data.query = query.join("^"); const classGR = new GlideRecord(Constants.CLASS_TABLE); classGR.addEncodedQuery(data.query); classGR.setLimit(2); classGR.query(); data.class_count = classGR.getRowCount(); data.has_classes = classGR.next(); data.selected_class = data.has_classes && { value: classGR.getUniqueValue(), displayValue: classGR.getDisplayValue(), }; if (!data.has_classes) return; const COLUMNS = { instructional_block_name: "Instructional Block Name", start_date_time: "Course Date/Time", unit_aor: "Unit (AOR)", }; if (is_student) { COLUMNS.uniform_code = "Dress Code"; } data.todays_classes_default_filter = "^start_date_timeONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^ORDERBYclass_id^ORDERBYstart_date_time" if (is_instructor) { data.todays_classes_default_filter += INSTRUCTOR_QUERY; } data.todays_classes_options = { table: Constants.COURSE_TABLE, filter: data.has_classes ? "class_id=" + data.selected_class.value + data.todays_classes_default_filter : "class_id=-1", show_breadcrumbs: false, window_size: 10, headerTitle: "Today's Courses", useInstanceTitle: true, fields: Object.keys(COLUMNS).toString(), column_labels: COLUMNS, o: "start_date_time", }; data.today = $sp.getWidget("hsi-widget-data-table", data.todays_classes_options); data.upcoming_classes_default_filter = "^start_date_time>=javascript:gs.beginningOfToday()^start_date_timeRELATIVELT@dayofweek@ahead@7^ORDERBYclass_id^ORDERBYstart_date_time" if (is_instructor) { data.upcoming_classes_default_filter += INSTRUCTOR_QUERY; } data.upcoming_classes_options = { table: Constants.COURSE_TABLE, filter: data.has_classes ? "class_id=" + data.selected_class.value + data.upcoming_classes_default_filter : "class_id=-1", show_breadcrumbs: false, window_size: 10, headerTitle: "This Week's Courses", useInstanceTitle: true, fields: Object.keys(COLUMNS).toString(), column_labels: COLUMNS, o: "start_date_time", }; data.this_week = $sp.getWidget("hsi-widget-data-table", data.upcoming_classes_options); })($sp, data, options, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-05-13 14:57:20</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>8db1d3601ba1aa50065762cae54bcb3d</sys_id>
<sys_mod_count>153</sys_mod_count>
<sys_name>HSI This Week Courses PH</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_8db1d3601ba1aa50065762cae54bcb3d</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-10 16:55:59</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Upcoming Courses</h3> </div> <div class="panel-body"> <div class="row"> <div class="col-md-4"> <sn-record-picker ng-if="data.has_classes" ng-change="updateClass(c.data.selected_class)" field="data.selected_class" table="'x_g_dh5_hsisat_class'" display-field="'class_number'" value-field="'sys_id'" search-fields="'class_number'" page-size="100" default-query="data.query" ></sn-record-picker> <p ng-if="!data.has_classes"> There are no classes with upcoming courses available for viewing </p> </div> </div> <div class="row"> <div class="col-xs-12"> <sp-widget widget="data.today"></sp-widget> <sp-widget widget="data.this_week"></sp-widget> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function ($scope, $uibModal, spUtil) { var c = this; c.action = function(state) { c.data.op = state; c.data.state = state; c.server.update().then(function(){ //?id=haisp_my_pending_approvals //?id=haisp_academy_approvals&table=x_g_dh5_hsisat_instructor_certification&filter=requested_byDYNAMIC" +c.data.user var approvalsURL = ("?id=haisp_my_pending_approvals"); // Redirect to a specific location.search = approvalsURL; }); } //Opens the pop-up for Rections comments. JWD c.openModal = function(btn) { c.data.comments = ""; c.modalInstance = $uibModal.open({ templateUrl: 'modalTemplate', scope: $scope }); } // Modal for Approval: c.openModalApprove = function(btn) { c.data.comments = ""; c.modalInstance = $uibModal.open({ templateUrl: 'modalTemplateApprove', scope: $scope }); } // Close Modal c.closeModal = function() { c.modalInstance.close(); } } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.question { text-align: center; margin-top: 1em; } .spacer { display:inline-block; width:5%; } .btn-question { width: 45%; }</css>
<data_table>sp_instance</data_table>
<demo_data>{ "data": { "fields": [ { "type": "glide_date_time", "value": "2016-01-31T17:33:54+00:00", "label": "Approval Example Label" } ], "state": "requested", "label": "incident" }, "options": { "color": "default" } }</demo_data>
<description/>
<docs display_value=""/>
<field_list>color</field_list>
<has_preview>true</has_preview>
<id>hsi_academy_approval_info</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Academy Approval Info</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ var gr = $sp.getRecord(); data.user = gs.getUserID(); if (input && input.op && gr) { gr.comments = input.comments; gr.state = input.op; gr.update(); } var fields = $sp.getFields(gr, 'state,sys_created_on'); if (gr) { if (gr.sys_mod_count > 0) fields.push($sp.getField(gr, 'sys_updated_on')); data.fields = fields; data.state = gr.state.toString(); data.sys_updated_on = gr.sys_updated_on.toString(); data.sys_id = gr.getUniqueValue(); data.table = gr.getTableName(); data.label = getRecordBeingApproved(gr).getLabel(); } function getRecordBeingApproved(gr) { if (!gr.sysapproval.nil()) return gr.sysapproval.getRefRecord(); return gr.document_id.getRefRecord(); } ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JMCumbee</sys_created_by>
<sys_created_on>2025-04-22 15:59:54</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>aca69bfd1b49a2d03b5e657fe54bcbf7</sys_id>
<sys_mod_count>38</sys_mod_count>
<sys_name>HSI Academy Approval Info</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_aca69bfd1b49a2d03b5e657fe54bcbf7</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-09-09 19:09:10</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-{{::c.options.color}} b"> <div class="panel-heading"> <h4 class="panel-title" ng-if="c.data.state == 'requested'">${This {{c.data.label}} requires your approval}</h4> <h4 class="panel-title" ng-if="c.data.state == 'approved'">${Approved} <sn-time-ago timestamp="::c.data.sys_updated_on" /></h4> <h4 class="panel-title" ng-if="c.data.state == 'rejected'">${Rejected} <sn-time-ago timestamp="::c.data.sys_updated_on" /></h4> </div> <div class="panel-body"> <form ng-submit="$event.preventDefault()" class="form-horizontal"> <div ng-if="c.data.fields.length > 0"> <div ng-repeat="field in c.data.fields" class="m-b-xs" ng-if="field.value"> <label class="m-n">{{field.label}}</label> <span ng-switch="field.type"> <div ng-switch-when="glide_date_time" title="{{field.display_value}}"><sn-time-ago timestamp="::field.value" /></div> <div ng-switch-default >{{field.display_value}}</div> </span> </div> </div> <div ng-if="c.data.state == 'requested'" class="question"> <!--button type="button" name="approve" class="btn btn-success btn-question" ng-click="c.action('approved')">${Approve}</button--> <button type="button" name="approve" class="btn btn-success btn-question" ng-click="c.openModalApprove()">${Approve}</button> <div class="spacer"></div> <button type="button" name="reject" class="btn btn-default btn-question" ng-click="c.openModal()">${Reject}</button> </div> </form> </div> </div> <!--Setting Window for Comments JWD --> <script type="text/ng-template" id="modalTemplate"> <div class="modal-header"> <h4 class="modal-title">Provide a Rejection Reason</h4> </div> <div class="modal-body"> <div class="form-group"> <label for="rejection_reason">Reason for Rejection</label> <input id="rejection_reason" class="form-control" ng-model="c.data.comments" required /> </div> </div> <div class="modal-footer"> <button ng-disabled="!c.data.comments" class="btn btn-primary" ng-click="c.action('rejected');c.closeModal();">${Submit}</button> <button class="btn btn-default" ng-click="c.closeModal()">Cancel</button> </div> </script> <script type="text/ng-template" id="modalTemplateApprove"> <div class="modal-header"> <h4 class="modal-title">Provide Additional Comments</h4> </div> <div class="modal-body"> <div class="form-group"> <label for="approval_comments">Comments Requested when Approving</label> <input id="approval_comments" class="form-control" ng-model="c.data.comments" required /> </div> </div> <div class="modal-footer"> <button class="btn btn-primary" ng-click="c.action('approved');c.closeModal();">${Submit Approval}</button> <button class="btn btn-default" ng-click="c.closeModal()">Cancel</button> </div> </script> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.nav-tabs a { background-color: transparent !important }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>hsi_course_configuration_list</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Course Configuration List</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.sys_id = $sp.getParameter('sys_id'); const configs = [ { title: "Curriculum Model Courses", widgetName: "hsi-widget-data-table", options: { table: "x_g_dh5_hsisat_course_configuration", filter: "class_configuration_id=" + data.sys_id, o: "sys_created_on", d: "asc", show_new: true, window_size: 50, }, }, { title: "Unit Requirements", widgetName: "hsi-widget-data-table", options: { table: "x_g_dh5_hsisat_class_configuration_aor_requirement", filter: "class_configuration_id=" + data.sys_id, o: "sys_created_on", d: "asc", show_new: true, window_size: 50, fields: "unit_code,use_defined_instructors", }, } ]; data.widgets = configs.map((config) => { return { title: config.title, widget: $sp.getWidget(config.widgetName, config.options), }; }); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-06-05 19:13:04</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>d8b8620c1b026e50065762cae54bcbc9</sys_id>
<sys_mod_count>19</sys_mod_count>
<sys_name>HSI Course Configuration List</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_d8b8620c1b026e50065762cae54bcbc9</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-06 01:56:18</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default" ng-if="data.sys_id && data.sys_id != '-1'"> <div class="panel-body"> <uib-tabset active="active"> <uib-tab ng-repeat="widget in data.widgets" index="{{$index}}" heading="{{widget.title}}"> <sp-widget widget="widget.widget"></sp-widget> </uib-tab> </uib-tabset> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $location, $window, spUtil, spModal) { /* widget controller */ var c = this; c.data.addInstructor = ""; $scope.show_qualified = c.data.show_qualified; $scope.show_available = c.data.show_available; $scope.show_in_unit = c.data.show_in_unit; $scope.add = function(instructor){ c.data.scheduled_instructors.push({ 'name': instructor.name, 'aor_code': instructor.aor_code, 'week_hours': instructor.week_hours, 'role': { 'value': '', 'displayValue': '' }, 'sys_id': '', 'instructor_sys_id': instructor.sys_id }) c.data.scheduled_instructors_ids.push(instructor.sys_id); c.server.update().then(function() {}) } $scope.remove = function(index){ c.data.scheduled_instructors.splice(index, 1); c.data.scheduled_instructors_ids.splice(index, 1); c.server.update().then(function() {}) } $scope.submitRecord = function(){ //console.log(c.data.scheduled_instructors) c.data.action = 'submit'; c.server.update().then(function() { c.data.action = ''; //console.log(c.data.addInstructor); var new_url = ""; if(c.data.opened_from == 'course'){ new_url = "id=haisp_course_form&sys_id=" + c.data.course; } if(c.data.opened_from == 'calendar'){ new_url = "id=haisp_class_details&class_id=" + c.data.class; } $location.search(new_url); }) }; $scope.instructorCount = c.data.instructorCount; $scope.batchSize = 10; $scope.currentIndex = 0; $scope.currentPage = 1; $scope.paginate = function (index) { $scope.currentPage = index; var newIndex = index - 1; if (newIndex == 0) { $scope.currentIndex = 0; } else { $scope.currentIndex = $scope.batchSize * (newIndex); } }; $scope.filter = function(){ c.data.show_qualified = $scope.show_qualified; c.data.show_available = $scope.show_available; c.data.show_in_unit = $scope.show_in_unit; c.server.update().then(function(){ $scope.instructorCount = c.data.instructorCount; }); }; function getInstructors() { var str = "<p>"; c.data.scheduled_instructors.forEach(function(instructor){ str += '<b>' + instructor.name + '</b> - ' + instructor.role.displayValue + '<br>'; }) str += '</p>'; return str; } }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>thead [colspan] { text-align: center; border-bottom: 0; } [scope="row"] { font-weight: normal; } td, th { vertical-align: middle !important; } .form-inline .form-group { display: inline-block; margin-bottom: 0; vertical-align: middle; label { display: flex; align-items: center; gap: 0.5em; margin-right: 2em; } } .number { text-align: right; } .pagination { margin: 0; } .label { font-size: 100%; font-weight: normal; } [type="checkbox"][role="switch"] { -webkit-appearance: none; -moz-appearance: none; appearance: none; position: relative; font-size: inherit; width: 2.5em; height: 0.75em; box-sizing: content-box; border: 1px solid #777; border-radius: 1em; vertical-align: text-bottom; color: inherit; background: #c5c5c5; &:checked { background: $brand-primary; } } [type="checkbox"][role="switch"]::before { content: ""; position: absolute; top: 50%; left: -0.125rem; transform: translate(0, -50%); box-sizing: border-box; width: 1.5em; height: 1.5em; border: 1px solid #777; border-radius: 50%; background: #fff; transition: 0.125s ease-in-out; box-shadow: 0 1px 4px 0 rgba(0, 0, 0, 0.1); } [type="checkbox"][role="switch"]:checked::before { left: 2rem; } .submit-holder { float: right; padding-bottom: 20px; clear: both; } .text-dark { color:#1b1b1b; } .academics { background-color:#ffffff; border:solid 1px #d3d6dc; } .defensive { background-color:#b8d3ef; } .entry { background-color:#A9DA89; } .firearms { background-color:#FF7474; } .physical { background-color:#E4E4E4; } .academics_cci { background-color:#F9CF93; } .academy { background-color:#5EAF41; } .student { background-color:#FFF586; } .legal { background-color:#D8AAED; } .misc { background-color:#FFC4CD; } .cbp { background-color:#92FFE9; } .hq { background-color:#92FFE9; } .opr { background-color:#92FFE9; } .isd { background-color:#92FFE9; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>haisp_assigned__course_instructor</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Assigned Course Instructor</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.displayed_instructors = []; data.course = $sp.getParameter('course'); data.opened_from = $sp.getParameter('opened_from') || 'course'; data.show_qualified = false; data.show_available = false; data.show_in_unit = false; var gr_course = new GlideRecordSecure(Constants.COURSE_TABLE); gr_course.get(data.course); data.canEdit = CourseUtils.showScheduleInstructorsAction(gr_course); data.class = gr_course.getValue('class_id'); data.start_date_time = gr_course.getValue('start_date_time'); data.unit = gr_course.getDisplayValue('unit_aor'); data.course_number = gr_course.getDisplayValue('course_number'); const roles = []; var required_certs_know = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); required_certs_know.addQuery('course_configuration_id', gr_course.getValue('course_configuration_id')); required_certs_know.query(); var cert_found = false; var know_found = false; while(required_certs_know.next()){ if(required_certs_know.getValue('skills')){ know_found = true; } if(required_certs_know.getValue('certifications')){ cert_found = true; } roles.push(required_certs_know.getValue("instructor_role_code")); } data.role_filter = "is_active=true" + (GeneralUtils.hasValue(roles) ? "^sys_idIN" + roles.join(",") : ""); //console.log(know_found + ' - ' + cert_found); if(cert_found == true || know_found == true){ data.show_qualified = true; data.show_in_unit = true; } else { data.show_in_unit = true; } if (input) { data.scheduled_instructors = input.scheduled_instructors; data.scheduled_instructors_ids = input.scheduled_instructors_ids; data.show_available = input.show_available; data.show_qualified = input.show_qualified; data.show_in_unit = input.show_in_unit; if (input.action == 'submit') { var new_instructors = []; //console.log(input.addInstructor); var let_run = true; if (let_run) { for (var i in data.scheduled_instructors) { var sys_id = data.scheduled_instructors[i].sys_id; var inst_sys_id = data.scheduled_instructors[i].instructor_sys_id; if (sys_id == '') { var gr_ins = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); gr_ins.initialize(); gr_ins.setValue('instructor_id', data.scheduled_instructors[i].instructor_sys_id); gr_ins.setValue('course_id', gr_course.getValue('sys_id')); gr_ins.setValue('instructor_role_code', data.scheduled_instructors[i].role.value); var ins_sys_id = gr_ins.insert(); new_instructors.push(ins_sys_id); } else { var gr_get = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); gr_get.addQuery('course_id', gr_course.getValue('sys_id')); gr_get.addQuery('instructor_id', inst_sys_id); gr_get.query(); if (gr_get.next()) { if (gr_get.getValue('instructor_role_code') != data.scheduled_instructors[i].role.value) { gr_get.setValue('instructor_role_code', data.scheduled_instructors[i].role.value); gr_get.update(); } } new_instructors.push(sys_id); } } var gr_del = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); if (input.addInstructor == 'Yes') { gr_del.addEncodedQuery('course_id.class_id=' + data.class); } if (input.addInstructor == 'No') { gr_del.addQuery('course_id', data.course); } gr_del.addEncodedQuery('sys_idNOT IN' + new_instructors); gr_del.query(); gr_del.deleteMultiple(); } } } else { data.scheduled_instructors = []; data.scheduled_instructors_ids = []; var gr_assigned_i = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); gr_assigned_i.addQuery('course_id', data.course); gr_assigned_i.orderBy('instructor_id'); gr_assigned_i.query(); //console.log('rows ' + gr_instructors.getRowCount()); while (gr_assigned_i.next()) { var hoursUtil = new InstructorHoursUtil(); var hours = hoursUtil.getTheWeek(gr_assigned_i.getValue('instructor_id'), data.start_date_time); //console.log('hours ' + hours); data.scheduled_instructors.push({ 'name': gr_assigned_i.getDisplayValue('instructor_id'), 'aor_code': gr_assigned_i.getDisplayValue('instructor_id.aor_code'), 'week_hours': hours, 'role': { 'value': gr_assigned_i.getValue('instructor_role_code'), 'displayValue': gr_assigned_i.getDisplayValue('instructor_role_code') }, 'sys_id': gr_assigned_i.getValue('sys_id'), 'instructor_sys_id': gr_assigned_i.getValue('instructor_id') }) data.scheduled_instructors_ids.push(gr_assigned_i.getValue('instructor_id')); } } // Location for HA-45 code // Check if chosen instructors have the same Course config_id as the Course Instructor Config id // Define new GlideRecord for ('x_g_dh5_hsisat_course_instructor_configuration') var qualified_instructors = []; var unavailable_instructors = []; if (data.show_available) { var start_time = gr_course.getDisplayValue('start_date_time').split(' '); var end_time = gr_course.getDisplayValue('end_date_time').split(' '); //console.log(start_time[0] + ' - ' + start_time[1] + ' - ' + end_time[0] + ' - ' + end_time[1]); var gr_assigned_check = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_TABLE); gr_assigned_check.addEncodedQuery("course_id.start_date_time<=javascript:gs.dateGenerate('" + end_time[0] + "','" + end_time[1] + "')^course_id.end_date_time>=javascript:gs.dateGenerate('" + start_time[0] + "','" + start_time[1] + "')") gr_assigned_check.query(); //console.log(gr_assigned_check.getRowCount()); while (gr_assigned_check.next()) { unavailable_instructors.push(gr_assigned_check.getValue('instructor_id')); } var gr_to_check = new GlideRecordSecure(Constants.INSTRUCTOR_SCHEDULE_TABLE); gr_to_check.addQuery('unavailability_type', 'TO'); gr_to_check.addQuery('state', 2); gr_to_check.addEncodedQuery("start_date<=javascript:gs.dateGenerate('" + end_time[0] + "','" + end_time[1] + "')^end_date>=javascript:gs.dateGenerate('" + start_time[0] + "','" + start_time[1] + "')"); gr_to_check.query(); //console.log(gr_to_check.getRowCount()); while (gr_to_check.next()) { unavailable_instructors.push(gr_to_check.getValue('instructor_id')); } //console.log(unavailable_instructors); } if (data.show_qualified) { var certification = []; var knowledge = []; var gr_course_inst_config = new GlideRecordSecure(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); gr_course_inst_config.addQuery('course_configuration_id', gr_course.getValue('course_configuration_id')); gr_course_inst_config.query(); while (gr_course_inst_config.next()) { if (gr_course_inst_config.getValue('skills')) { var know_arr = gr_course_inst_config.getValue('skills').split(','); know_arr.forEach(function(skill) { knowledge.push(skill); }); } if (gr_course_inst_config.getValue('certifications')) { var cert_arr = gr_course_inst_config.getValue('certifications').split(','); cert_arr.forEach(function(cert) { certification.push(cert); }); } } //console.log(knowledge.length); //console.log(certification.length); var know_arr_new = [] knowledge.forEach(function(skill) { know_arr_new.push('skill_code=' + skill); }); var cert_arr_new = [] certification.forEach(function(cert) { cert_arr_new.push('certification_code=' + cert); }); if (knowledge.length > 0) { var gr_current_know = new GlideRecordSecure(Constants.INSTRUCTOR_SKILL_TABLE) gr_current_know.addEncodedQuery('status=APPROVED^instructor_idISNOTEMPTY^' + know_arr_new.join('^OR')); gr_current_know.query(); while (gr_current_know.next()) { qualified_instructors.push(gr_current_know.getValue('instructor_id')); } } if (certification.length > 0) { var gr_current_cert = new GlideRecordSecure(Constants.INSTRUCTOR_CERTIFICATION_TABLE) gr_current_cert.addEncodedQuery('status=APPROVED^instructor_idISNOTEMPTY^' + cert_arr_new.join('^OR')); gr_current_cert.query(); while (gr_current_cert.next()) { qualified_instructors.push(gr_current_cert.getValue('instructor_id')); } } } //console.log('qi ' + qualified_instructors); var gr_avail_i = new GlideRecordSecure(Constants.INSTRUCTOR_TABLE); gr_avail_i.addEncodedQuery('sys_idNOT IN' + data.scheduled_instructors_ids); if (data.show_available) { gr_avail_i.addEncodedQuery('sys_idNOT IN' + unavailable_instructors); } if (data.show_qualified) { gr_avail_i.addEncodedQuery('sys_idIN' + qualified_instructors); } if (data.show_in_unit) { gr_avail_i.addEncodedQuery('aor_code=' + gr_course.getValue('unit_aor')); } gr_avail_i.orderBy('user_id'); gr_avail_i.query(); while (gr_avail_i.next()) { var hoursUtil = new InstructorHoursUtil(); var hours = hoursUtil.getTheWeek(gr_avail_i.getValue('sys_id'), data.start_date_time); //console.log('hours ' + hours); data.displayed_instructors.push({ 'name': gr_avail_i.getDisplayValue('user_id'), 'aor_code': gr_avail_i.getDisplayValue('aor_code'), 'week_hours': hours, 'is_available': 'Yes', 'is_qualified': 'No', 'sys_id': gr_avail_i.getValue('sys_id') }) } data.instructorCount = gr_avail_i.getRowCount(); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JHudson1</sys_created_by>
<sys_created_on>2025-06-18 13:47:41</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>0aaa48141b566e505c8ccbb6624bcbda</sys_id>
<sys_mod_count>275</sys_mod_count>
<sys_name>HAISP Assigned Course Instructor</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_0aaa48141b566e505c8ccbb6624bcbda</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-06 01:45:31</sys_updated_on>
<template>
<![CDATA[ <form class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Assigned Instructors</h3> </div> <fieldset class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col"> <span class="sr-only">Instructor Actions</span> </th> <th scope="col">Name</th> <th scope="col">Unit</th> <th scope="col" class="number">Hours for Week</th> <th scope="col">Role</th> </tr> </thead> <tbody> <tr ng-if="!data.scheduled_instructors.length"> <td colspan="5">No instructors currently assigned</td> </tr> <tr ng-repeat="instructor in data.scheduled_instructors"> <td> <button type="button" class="btn action" ng-click="remove($index)" ng-if="data.canEdit"> <span class="sr-only">Unassign Instructor</span> <i class="fa fa-minus" aria-hidden="true"></i> </button> </td> <th scope="row"> <a href="hsi-academy?id=haisp_instructor_profile&sys_id={{instructor.instructor_sys_id}}" target="_blank">{{instructor.name}}</a> </th> <td> <span class="label text-dark" ng-class="{ 'academics': instructor.aor_code == 'Academics', 'defensive': instructor.aor_code == 'UOF: Defensive Tactics', 'entry': instructor.aor_code == 'UOF: Entry Tactics', 'firearms': instructor.aor_code == 'UOF: Firearms', 'physical': instructor.aor_code == 'OPS: Physical Training', 'academics_cci': instructor.aor_code == 'Academics: CCI', 'academy': instructor.aor_code == 'Academy', 'student': instructor.aor_code == 'OPS: Student Services', 'legal': instructor.aor_code == 'Legal', 'misc': instructor.aor_code == 'Miscellaneous Training', 'cbp': instructor.aor_code == 'CBP', 'hq': instructor.aor_code == 'HQ', 'opr': instructor.aor_code == 'OPR', 'isd': instructor.aor_code == 'ISD Forensic' }">{{instructor.aor_code}}</span> </td> <td class="number">{{instructor.week_hours}}</td> <td> <!-- <label for="{{instructor.id}}_role" class="sr-only">Instructor Role</label> --> <sn-record-picker ng-if="data.canEdit" field="data.scheduled_instructors[$index].role" table="'x_g_dh5_hsisat_instructor_role_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="data.role_filter" > </sn-record-picker> <span ng-if="!data.canEdit"> {{data.scheduled_instructors[$index].role.displayValue}} </span> <!-- <select id="{{instructor.id}}_role" class="form-control" ng-model="instructor.role"> <option value=""></option> <option value="lead">Lead</option> <option value="co_lead">Co-Lead</option> </select> --> </td> </tr> </tbody> </table> </fieldset> </form> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">All Instructors</h3> </div> <div class="panel-body"> <form class="form-inline"> <div class="form-group"> <label> <span data-label>Available</span> <input type="checkbox" role="switch" ng-model="show_available" ng-change="filter()"> </label> </div> <div class="form-group"> <label> <span data-label>Qualified</span> <input type="checkbox" role="switch" ng-model="show_qualified" ng-change="filter()"> </label> </div> <div class="form-group"> <label> <span data-label>In Unit</span> <input type="checkbox" role="switch" ng-model="show_in_unit" ng-change="filter()"> </label> </div> </form> </div> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col"> <span class="sr-only">Remove Instructor</span> </th> <th scope="col">Name</th> <th scope="col">Unit</th> <th scope="col" class="number">Hours for Week</th> <th scope="col" class="text-center">Available</th> <th scope="col" class="text-center">Qualified</th> </tr> </thead> <tbody> <tr ng-if="!data.displayed_instructors.length"> <td colspan="6">No instructors meet the selected criteria</td> </tr> <tr ng-repeat="instructor in data.displayed_instructors | limitTo:batchSize:currentIndex"> <td> <button type="button" class="btn action" ng-click="add(instructor)" ng-if="data.canEdit"> <span class="sr-only">Assign Instructor</span> <i class="fa fa-plus" aria-hidden="true"></i> </button> </td> <th scope="row"> <a href="hsi-academy?id=haisp_instructor_profile&sys_id={{instructor.sys_id}}" target="_blank">{{instructor.name}}</a> </th> <td> <span class="label text-dark" ng-class="{ 'academics': instructor.aor_code == 'Academics', 'defensive': instructor.aor_code == 'UOF: Defensive Tactics', 'entry': instructor.aor_code == 'UOF: Entry Tactics', 'firearms': instructor.aor_code == 'UOF: Firearms', 'physical': instructor.aor_code == 'OPS: Physical Training', 'academics_cci': instructor.aor_code == 'Academics: CCI', 'academy': instructor.aor_code == 'Academy', 'student': instructor.aor_code == 'OPS: Student Services', 'legal': instructor.aor_code == 'Legal', 'misc': instructor.aor_code == 'Miscellaneous Training', 'cbp': instructor.aor_code == 'CBP', 'hq': instructor.aor_code == 'HQ', 'opr': instructor.aor_code == 'OPR', 'isd': instructor.aor_code == 'ISD Forensic' }">{{instructor.aor_code}}</span> </td> <td class="number">{{instructor.week_hours}}</td> <td class="text-center text-2x"> <span class="sr-only">{{instructor.is_available ? "Yes" : "No"}}</span> <i ng-if="instructor.is_available" class="fa fa-check-circle text-success" aria-hidden="true"></i> </td> <td class="text-center text-2x"> <span class="sr-only">{{instructor.is_qualified ? "Yes" : "No"}}</span> <i ng-if="instructor.is_qualified" class="fa fa-check-circle text-success" aria-hidden="true"></i> </td> </tr> </tbody> </table> </div> <div class="panel-footer"> <uib-pagination total-items="instructorCount" items-per-page="batchSize" ng-model="currentPage" class="pagination-sm" boundary-link-numbers="true" rotate="false" ng-click="paginate(currentPage)"></uib-pagination> </div> </div> <div class="panel panel-body" ng-if="data.canEdit"> <button class="btn btn-primary pull-right" ng-click="submitRecord()"> Submit </button> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope) { var c = this; $scope.active_tab = ""; document.getElementById('certification').style.display = 'none'; document.getElementById('knowledge_area').style.display = 'none'; document.getElementById('time_off_request').style.display = 'none'; $scope.activateTab = function(tabId) { //console.log(tabId) if($scope.active_tab != ""){ document.getElementById('btn_' + $scope.active_tab).classList.remove('btn-primary'); document.getElementById('btn_' + $scope.active_tab).classList.add('btn-default'); document.getElementById($scope.active_tab).style.display = 'none'; } // Show the selected tab content $scope.active_tab = tabId; document.getElementById('btn_' + tabId).classList.add('btn-primary'); document.getElementById('btn_' + tabId).classList.remove('btn-default'); document.getElementById(tabId).style.display = ''; }; // Initialize certification tab as primary $scope.activateTab('certification'); } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.nav-link { border: .1rem solid #005ea2; margin-top: 2rem; margin-left: 2rem; } .nav-link:hover { background-color: #005ea2; color: white; border: .1rem solid #005ea2; } .coming_soon { padding: 40px; } .b { border: .1rem solid #dee5e7; border-top: .1rem solid #005ea2; } .nav-tabs { border-bottom: .1rem solid #005ea2; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>haisp_all_requests</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP All Requests</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.cert_options = {}; data.cert_options.table = Constants.INSTRUCTOR_CERTIFICATION_TABLE; data.cert_options.filter = "status=approved^ORstatus=rejected"; data.cert_options.fields = "certification_code,instructor_id,status,sys_created_on"; data.cert_options.o = "sys_created_on"; data.cert_options.d = "asc"; data.cert_list = $sp.getWidget('hsi-widget-data-table', data.cert_options); data.know_options = {}; data.know_options.table = Constants.INSTRUCTOR_SKILL_TABLE; data.know_options.filter = "status=approved^ORstatus=rejected"; data.know_options.fields = "skill_code,instructor_id,status,sys_created_on"; data.know_options.o = "sys_created_on"; data.know_options.d = "asc"; data.know_list = $sp.getWidget('hsi-widget-data-table', data.know_options); data.timeoff_options = {}; data.timeoff_options.table = Constants.INSTRUCTOR_SCHEDULE_TABLE; data.timeoff_options.filter = "approval=approved^ORapproval=rejected"; data.timeoff_options.fields = "type_of_leave,instructor_id,start_date,end_date,approval"; data.timeoff_options.o = "sys_created_on"; data.timeoff_options.d = "asc"; data.timeoff_list = $sp.getWidget('hsi-widget-data-table', data.timeoff_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-09-06 01:15:01</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>82eded311b37e6905c8ccbb6624bcbcc</sys_id>
<sys_mod_count>1</sys_mod_count>
<sys_name>HAISP All Requests</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_82eded311b37e6905c8ccbb6624bcbcc</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-06 01:21:01</sys_updated_on>
<template>
<![CDATA[ <div class="tabs panel panel-default"> <ul class="nav nav-tabs"> <li class="nav-item"> <a id="btn_certification" class="btn btn-default nav-link" ng-click="activateTab('certification')">Certification</a> </li> <li class="nav-item"> <a id="btn_knowledge_area" class="btn btn-default nav-link" ng-click="activateTab('knowledge_area')">Knowledge Area</a> </li> <li class="nav-item"> <a id="btn_time_off_request" class="btn btn-default nav-link" ng-click="activateTab('time_off_request')">Time Off Request</a> </li> </ul> <div id="certification" class="tab-content"> <sp-widget widget="data.cert_list"></sp-widget> </div> <div id="knowledge_area" class="tab-content"> <sp-widget widget="data.know_list"></sp-widget> </div> <div id="time_off_request" class="tab-content"> <sp-widget widget="data.timeoff_list"></sp-widget> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope) { var c = this; $scope.active_tab = ""; document.getElementById('certification').style.display = 'none'; document.getElementById('knowledge_area').style.display = 'none'; document.getElementById('time_off_request').style.display = 'none'; $scope.activateTab = function(tabId) { //console.log(tabId) if($scope.active_tab != ""){ document.getElementById('btn_' + $scope.active_tab).classList.remove('btn-primary'); document.getElementById('btn_' + $scope.active_tab).classList.add('btn-default'); document.getElementById($scope.active_tab).style.display = 'none'; } // Show the selected tab content $scope.active_tab = tabId; document.getElementById('btn_' + tabId).classList.add('btn-primary'); document.getElementById('btn_' + tabId).classList.remove('btn-default'); document.getElementById(tabId).style.display = ''; }; // Initialize certification tab as primary $scope.activateTab('certification'); } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.nav-link { border: .1rem solid #005ea2; margin-top: 2rem; margin-left: 2rem; } .nav-link:hover { background-color: #005ea2; color: white; border: .1rem solid #005ea2; } .coming_soon { padding: 40px; } .b { border: .1rem solid #dee5e7; border-top: .1rem solid #005ea2; } .nav-tabs { border-bottom: .1rem solid #005ea2; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>hsi_pending_requests</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Pending Requests</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.cert_options = {}; data.cert_options.table = Constants.INSTRUCTOR_CERTIFICATION_TABLE; data.cert_options.filter = "status=SECTION_CHIEF^ORstatus=UNIT_CHIEF"; data.cert_options.fields = "certification_code,instructor_id,status,sys_created_on"; data.cert_options.o = "sys_created_on"; data.cert_options.d = "asc"; data.cert_list = $sp.getWidget('hsi-widget-data-table', data.cert_options); data.know_options = {}; data.know_options.table = Constants.INSTRUCTOR_SKILL_TABLE; data.know_options.filter = "status=SECTION_CHIEF^ORstatus=UNIT_CHIEF"; data.know_options.fields = "skill_code,instructor_id,status,sys_created_on"; data.know_options.o = "sys_created_on"; data.know_options.d = "asc"; data.know_list = $sp.getWidget('hsi-widget-data-table', data.know_options); data.timeoff_options = {}; data.timeoff_options.table = Constants.INSTRUCTOR_SCHEDULE_TABLE; data.timeoff_options.filter = "unavailability_type=TO^approval=requested"; data.timeoff_options.fields = "type_of_leave,instructor_id,start_date,end_date,approval"; data.timeoff_options.o = "sys_created_on"; data.timeoff_options.d = "asc"; data.timeoff_list = $sp.getWidget('hsi-widget-data-table', data.timeoff_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-05-30 23:19:56</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>41c7ecde1bbd6a103b5e657fe54bcb63</sys_id>
<sys_mod_count>134</sys_mod_count>
<sys_name>HSI Pending Requests</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_41c7ecde1bbd6a103b5e657fe54bcb63</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-06 01:20:24</sys_updated_on>
<template>
<![CDATA[ <div class="tabs panel panel-default"> <ul class="nav nav-tabs"> <li class="nav-item"> <a id="btn_certification" class="btn btn-default nav-link" ng-click="activateTab('certification')">Certification</a> </li> <li class="nav-item"> <a id="btn_knowledge_area" class="btn btn-default nav-link" ng-click="activateTab('knowledge_area')">Knowledge Area</a> </li> <li class="nav-item"> <a id="btn_time_off_request" class="btn btn-default nav-link" ng-click="activateTab('time_off_request')">Time Off Request</a> </li> </ul> <div id="certification" class="tab-content"> <sp-widget widget="data.cert_list"></sp-widget> </div> <div id="knowledge_area" class="tab-content"> <sp-widget widget="data.know_list"></sp-widget> </div> <div id="time_off_request" class="tab-content"> <sp-widget widget="data.timeoff_list"></sp-widget> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope) { var c = this; $scope.active_tab = ""; document.getElementById('certification').style.display = 'none'; document.getElementById('knowledge_area').style.display = 'none'; document.getElementById('time_off_request').style.display = 'none'; $scope.activateTab = function(tabId) { //console.log(tabId) if($scope.active_tab != ""){ document.getElementById('btn_' + $scope.active_tab).classList.remove('btn-primary'); document.getElementById('btn_' + $scope.active_tab).classList.add('btn-default'); document.getElementById($scope.active_tab).style.display = 'none'; } // Show the selected tab content $scope.active_tab = tabId; document.getElementById('btn_' + tabId).classList.add('btn-primary'); document.getElementById('btn_' + tabId).classList.remove('btn-default'); document.getElementById(tabId).style.display = ''; }; // Initialize certification tab as primary $scope.activateTab('certification'); } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.nav-link { border: .1rem solid #005ea2; margin-top: 2rem; margin-left: 2rem; } .nav-link:hover { background-color: #005ea2; color: white; border: .1rem solid #005ea2; } .coming_soon { padding: 40px; } .b { border: .1rem solid #dee5e7; border-top: .1rem solid #005ea2; } .nav-tabs { border-bottom: .1rem solid #005ea2; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>my_pending_approvals</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI My Pending Approvals</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.isNotUnitChief = !SecurityUtils.isCurrentUserMemberOfGroup(SecurityUtils.GROUP_UNIT_CHIEFS); //console.log("isNotUnitChief " + isNotUnitChief); data.cert_options = {}; data.cert_options.table = "sysapproval_approver"; data.cert_options.filter = "state=requested^approverIN" + getDelegatedApprovals()+"^source_table=x_g_dh5_hsisat_instructor_certification"; data.cert_options.fields = "approver,iteration,source_table,sys_created_on"; data.cert_options.column_labels = {'approver': 'Approver','iteration' : 'Unit', 'source_table': 'Name', 'sys_created_on': 'Submitted On'}; data.cert_options.o = "sys_created_on"; data.cert_options.d = "des"; data.cert_options.allAppsWidget = true; data.cert_list = $sp.getWidget('hsi-widget-data-table', data.cert_options); data.know_options = {}; data.know_options.table = "sysapproval_approver"; data.know_options.filter = "state=requested^approverIN" + getDelegatedApprovals()+"^source_table=x_g_dh5_hsisat_instructor_skill"; data.know_options.fields = "approver,iteration,source_table,sys_created_on"; data.know_options.column_labels = {'approver': 'Approver','iteration' : 'Unit', 'source_table': 'Name', 'sys_created_on': 'Submitted On'}; data.know_options.o = "sys_created_on"; data.know_options.d = "des"; data.know_options.allAppsWidget = true; data.know_list = $sp.getWidget('hsi-widget-data-table', data.know_options); data.timeoff_options = {}; data.timeoff_options.table = "sysapproval_approver"; data.timeoff_options.filter = "state=requested^approverIN" + getDelegatedApprovals()+"^source_table=x_g_dh5_hsisat_instructor_schedule"; data.timeoff_options.fields = "approver,iteration,source_table,sys_created_on"; data.timeoff_options.column_labels = {'approver': 'Approver','iteration' : 'Unit', 'source_table': 'Name', 'sys_created_on': 'Submitted On'}; data.timeoff_options.o = "sys_created_on"; data.timeoff_options.d = "des"; data.timeoff_options.allAppsWidget = true; data.timeoff_list = $sp.getWidget('hsi-widget-data-table', data.timeoff_options); function getDelegatedApprovals() { var user = gs.getUserID(); var answer = []; var i = 0; answer[i++] = user.toString(); var g = new GlideRecord("sys_user_delegate"); g.addQuery("delegate", user); g.addQuery("approvals", "true"); g.addQuery("starts", "<=", gs.daysAgo(0)); g.addQuery("ends", ">=", gs.daysAgo(0)); g.query(); while (g.next()) answer[i++] =g.user.toString(); return answer; } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>LSingh</sys_created_by>
<sys_created_on>2025-08-20 18:17:03</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>23c4b5ac1ba3ea503b5e657fe54bcbca</sys_id>
<sys_mod_count>58</sys_mod_count>
<sys_name>HSI My Pending Approvals</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_23c4b5ac1ba3ea503b5e657fe54bcbca</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-09-05 15:15:22</sys_updated_on>
<template>
<![CDATA[ <div class="tabs panel panel-default"> <ul class="nav nav-tabs"> <li class="nav-item"> <a id="btn_certification" class="btn btn-default nav-link" ng-click="activateTab('certification')">Certification</a> </li> <li class="nav-item"> <a id="btn_knowledge_area" class="btn btn-default nav-link" ng-click="activateTab('knowledge_area')">Knowledge Area</a> </li> <li ng-if="data.isNotUnitChief" class="nav-item"> <a id="btn_time_off_request" class="btn btn-default nav-link" ng-click="activateTab('time_off_request')">Time Off Request</a> </li> </ul> <div id="certification" class="tab-content"> <sp-widget widget="data.cert_list"></sp-widget> </div> <div id="knowledge_area" class="tab-content"> <sp-widget widget="data.know_list"></sp-widget> </div> <div id="time_off_request" class="tab-content"> <sp-widget widget="data.timeoff_list"></sp-widget> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $uibModal) { /* widget controller */ const c = this; function getSortData() { $scope.sort = { type: (() => { if ($scope.data?.sort.field !== "type_of_leave") { return { sort: "none", label: "Sort by type" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by type, ascending" }; } else { return { sort: "descending", label: "Sorted by type, descending" }; } })(), start: (() => { if ($scope.data?.sort.field !== "start_date") { return { sort: "none", label: "Sort by start date" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by start date, ascending" }; } else { return { sort: "descending", label: "Sorted by start date, descending" }; } })(), end: (() => { if ($scope.data?.sort.field !== "end_date") { return { sort: "none", label: "Sort by end date" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by end date, ascending" }; } else { return { sort: "descending", label: "Sorted by end date, descending" }; } })(), status: (() => { if ($scope.data?.sort.field !== "approval") { return { sort: "none", label: "Sort by status" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by status, ascending" }; } else { return { sort: "descending", label: "Sorted by status, descending" }; } })(), }; } if ($scope.data.instructorId) getSortData(); $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; }); }; $scope.expand = function (event) { event.target.closest("tr").nextElementSibling.classList.toggle("hidden"); const btn = event.target.closest("button"); const icon = btn.querySelector(".fa"); if (btn.getAttribute("aria-expanded") === "false") { icon.classList.remove("fa-plus"); icon.classList.add("fa-minus"); btn.setAttribute("aria-expanded", "true"); } else { icon.classList.remove("fa-minus"); icon.classList.add("fa-plus"); btn.setAttribute("aria-expanded", "false"); } }; c.modalController = function ($scope, $uibModalInstance) { $scope.errors = []; $scope.max_date = new Date().toISOString().split("T")[0]; $scope.knowledge_areas = c.data.knowledge_areas; $scope.selected = null; $scope.knowledge = { instructor_id: c.data.instructorId, skill_code: "", other: "", recent_experience_date: "", explanation_of_your_experience: "", }; $scope.submit = function () { if (!$scope.validate($scope.knowledge)) return; $uibModalInstance.close($scope.knowledge); }; $scope.cancel = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.open = function () { const modalInstance = $uibModal.open({ animation: true, controller: c.modalController, templateUrl: "add-knowledge-modal.html", }) .result .then(function (knowledge) { c.data.dataToInsert = knowledge; c.server.update() .then(function (res) { delete c.data.dataToInsert; }); }); }; $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>ol { list-style: none; padding: 0; > * + * { margin-top: 1.5rem; } } tbody { border: none !important; tr + tr > * { border-top: none !important; } th, td { vertical-align: middle !important; } } [scope="row"] { font-weight: normal; } [aria-sort] > button { font-weight: bold; padding: 0; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .date, .actions { text-align: right; } .panel-body > * + * { margin-top: 1rem; } .panel-footer { display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center; } .pagination { margin: 0; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-haisp-instructor-time-off</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Instructor Profile Time Off</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ const log = new Logger("Time off request", "Portal Widget"); data.instructorId = $sp.getParameter("sys_id"); data.page = 1; if (input?.sort) { data.page = 1; } if (input?.action === "paginate") { data.page = Math.max(input.page, 1); } data.batchSize = 5; if (GeneralUtils.isEmpty(data.instructorId)) return; const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); if (GeneralUtils.areEqual(data.instructorId, "me")) { instructorGR.addQuery("user_id", gs.getUserID()); } else { instructorGR.addQuery("sys_id", data.instructorId); } instructorGR.query(); if (LogicUtils.not(instructorGR.next())) { data.instructorId = Constants.VALUE_EMPTY; return; } data.instructorId = instructorGR.getUniqueValue(); data.sysUserId = GlideRecordUtils.getValue(instructorGR, "user_id"); data.canEdit = LogicUtils.or( GeneralUtils.areEqual(data.sysUserId, gs.getUserID()), SecurityUtils.isInstructorEditor() ); data.sort = GeneralUtils.defaultValue(input?.sort, { field: "start_date", asc: false }); const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; const scheduleGR = new GlideRecord('x_g_dh5_hsisat_instructor_schedule'); scheduleGR.addQuery("instructor_id", data.instructorId); scheduleGR.addQuery("unavailability_type", InstructorScheduleUtils.UNAVAILABILITY_TYPE_TIME_OFF); if (LogicUtils.not(data.canEdit)) { scheduleGR.addQuery("approval", "approved"); } if (data.sort.asc) { scheduleGR.orderBy(data.sort.field); } else { scheduleGR.orderByDesc(data.sort.field); } scheduleGR.chooseWindow(startIndex, endIndex); scheduleGR.query(); data.totalCount = scheduleGR.getRowCount(); const schedule = []; while (scheduleGR.next()) { schedule.push({ sys_id: scheduleGR.getUniqueValue(), type: scheduleGR.getDisplayValue('type_of_leave'), start: scheduleGR.getDisplayValue('start_date'), end: scheduleGR.getDisplayValue('end_date'), status: scheduleGR.getDisplayValue('approval'), history: (() => { const journalGR = new GlideRecord("sys_journal_field"); journalGR.addQuery("element", "approval_history"); journalGR.addQuery("element_id", scheduleGR.getUniqueValue()); journalGR.orderByDesc("sys_created_on"); journalGR.query(); const history = []; while (journalGR.next()) { history.push(journalGR.getValue("sys_created_on") + " - " + journalGR.getValue("value").replaceAll("\n", "<br>")); } return history.filter(Boolean); })(), }); } data.instructor = { schedule, }; })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-07-03 18:05:37</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>07c5a6451bee26903b5e657fe54bcb99</sys_id>
<sys_mod_count>55</sys_mod_count>
<sys_name>HAISP Instructor Profile Time Off</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_07c5a6451bee26903b5e657fe54bcb99</sys_update_name>
<sys_updated_by>JMCumbee</sys_updated_by>
<sys_updated_on>2025-09-05 12:48:15</sys_updated_on>
<template>
<![CDATA[ <div ng-if="data.instructorId" class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Time Off </h3> </div> <div class="table-responsive"> <table class="table"> <caption>Please include any upcoming time off</caption> <thead> <tr> <th scope="col" aria-sort="{{sort['type'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['type'].label}}" ng-click="sortData($event, 'type_of_leave')"> Type of Leave <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['start'].sort}}" class="date"> <button type="button" class="btn btn-clear" aria-label="{{sort['start'].label}}" ng-click="sortData($event, 'start_date')"> Start Date <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['end'].sort}}" class="date"> <button type="button" class="btn btn-clear" aria-label="{{sort['end'].label}}" ng-click="sortData($event, 'end_date')"> End Date <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['status'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['status'].sort}}" ng-click="sortData($event, 'approval')"> Status <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col"> <span class="sr-only">Actions</span> </th> </tr> </thead> <tbody ng-repeat="schedule in data.instructor.schedule"> <tr> <th scope="row"> <a ng-href="?id=hsi_form&instructor_id={{data.instructorId}}&table=x_g_dh5_hsisat_instructor_schedule&sys_id={{schedule.sys_id}}"> {{schedule.type}} </a> </th> <td class="date">{{schedule.start | date}}</td> <td class="date">{{schedule.end | date}}</td> <td>{{schedule.status}}</td> <td> <button type="button" class="btn btn-default pull-right" ng-click="expand($event)" aria-expanded="false" aria-controls="details-{{schedule.sys_id}}"> <span class="sr-only">Expand {{schedule.type_of_leave}}</span> <i aria-hidden="true" class="fa fa-plus"></i> </button> </td> </tr> <tr id="details-{{schedule.sys_id}}" class="hidden"> <td colspan="3"> <div class="row"> <div class="col-xs-12"> <p> {{schedule.description}} </p> <h4> Approval History </h4> <ol ng-if="schedule.history.length"> <li ng-repeat="history in schedule.history" ng-bind-html="history"></li> </ol> <p ng-if="!schedule.history.length"> No approval history for this time off </p> </div> </div> </td> </tr> </tbody> <tbody ng-if="!data.instructor.schedule.length"> <tr> <td colspan="4">There are no recorded time off for this instructor.</td> </tr> </tbody> </table> </div> <div class="panel-footer"> <a class="btn btn-default" href="?id=haisp_sc_cat_item&sys_id=3f4c628d1b2266903b5e657fe54bcb6a" ng-if="data.canEdit">Add Time-Off Request</a> <uib-pagination total-items="data.totalCount" items-per-page="data.batchSize" ng-model="data.page" ng-change="paginate()" boundary-link-numbers="true" rotate="false"></uib-pagination> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $location, uiCalendarConfig) { const c = this; $scope.navigate = function (view) { $scope.data.view = view; const search = new URLSearchParams(location.search); $location.search("view", $scope.data.view); $location.search("spa", 1); }; $scope.calendar = "class_calendar"; $scope.events = [...$scope.data.courses]; $scope.eventSources = [$scope.events]; $scope.onViewRender = function onViewRender(view, element) { $scope.cView = view; switch (view.name) { case "month": $scope.step = "month"; break; case "agendaWeek": $scope.step = "week"; break; case "agendaDay": $scope.step = "day"; break; default: $scope.step = "month"; } }; $scope.changeView = function changeView(view) { uiCalendarConfig.calendars[$scope.calendar].fullCalendar( "changeView", view ); }; $scope.stepCalendar = function stepCalendar(step) { uiCalendarConfig.calendars[$scope.calendar].fullCalendar(step); }; $scope.goToToday = function goToToday() { uiCalendarConfig.calendars[$scope.calendar].fullCalendar("today"); }; $scope.uiConfig = { calendar: { editable: false, header: { left: null, center: null, right: null, }, viewRender: $scope.onViewRender, nowIndicator: true, allDaySlot: false, slotEventOverlap: false, defaultDate: $scope.data.class_details.start_date, }, }; $scope.list = [...$scope.data.courses].map((item) => { item.actions_required = item.actions_required.split(",").filter(Boolean); return item; }); $scope.batchSize = 25; $scope.course_list = $scope.list.slice(0, $scope.batchSize); $scope.paginate = function () { const startIndex = ($scope.data.page - 1) * $scope.batchSize; const endIndex = $scope.data.page * $scope.batchSize; $scope.course_list = $scope.list.slice(startIndex, endIndex); }; $scope.data.sort = { field: "start", asc: true, }; function getSortData() { $scope.sort = { title: (() => { if ($scope.data?.sort.field !== "title") { return { sort: "none", label: "Sort by Instructional Block Name" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by Instructional Block Name, ascending" }; } else { return { sort: "descending", label: "Sorted by Instructional Block Name, descending" }; } })(), course_number: (() => { if ($scope.data?.sort.field !== "course_number") { return { sort: "none", label: "Sort by HSI LP Number" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by HSI LP Number, ascending" }; } else { return { sort: "descending", label: "Sorted by HSI LP Number, descending" }; } })(), aor_code: (() => { if ($scope.data?.sort.field !== "aor_code") { return { sort: "none", label: "Sort by unit" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by unit, ascending" }; } else { return { sort: "descending", label: "Sorted by unit, descending" }; } })(), start: (() => { if ($scope.data?.sort.field !== "start") { return { sort: "none", label: "Sort by start date" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by start date, ascending" }; } else { return { sort: "descending", label: "Sorted by start date, descending" }; } })(), }; } if ($scope.data.classId) getSortData(); $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field: field, asc: order === "ascending" ? false : true, }; getSortData(); $scope.list.sort((a, b) => { if (order === "ascending") { return b[field] > a[field] ? 1 : -1; } else { return a[field] > b[field] ? 1 : -1; } }); $scope.data.page = 1; $scope.paginate(); }; $scope.exportTypes = [{label:'PDF', value: 'PDF'}, {label:'Excel', value:'EXCEL'}, {label:'CSV', value:'CSV'}]; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>td { vertical-align: text-top; } th .btn { font-weight: bold; padding: 0; } [scope="row"] { font-weight: normal; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } } .page-controls, .calendar-controls { display: flex; align-items: center; justify-content: space-between; gap: 1.5rem; margin-bottom: 1rem; flex-wrap: wrap; } .fc-toolbar { display: none; } .fc-event-container { cursor: pointer; } .pagination { margin: 0; } .cursor-default { cursor: default; } .date, .actions { text-align: right; } .badge { background-color: var(--badge-color, #777); box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); color: var(--badge-text); font-size: inherit; font-weight: normal; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-schedule</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Schedule</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecord(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.view = $sp.getParameter("view") || "calendar"; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); const courses = []; const courseGR = new GlideRecord(Constants.COURSE_TABLE); courseGR.addQuery("class_id", data.classId); courseGR.orderBy("start_date_time"); courseGR.query(); while (courseGR.next()) { const backgroundColor = GlideRecordUtils.getValue(courseGR, "course_configuration_id.aor_code.aor_color") || "ffffff"; const start = new GlideDateTime(GlideRecordUtils.getValue(courseGR, "start_date_time")).getDisplayValue(); const end = new GlideDateTime(GlideRecordUtils.getValue(courseGR, "end_date_time")).getDisplayValue(); courses.push({ courseId: courseGR.getUniqueValue(), title: GlideRecordUtils.getDisplayValue(courseGR, "instructional_block_name"), backgroundColor: "#" + backgroundColor, borderColor: (backgroundColor === "ffffff" || GeneralUtils.isEmpty(backgroundColor)) ? "#ccc" : ("#" + backgroundColor), textColor: getTextColorForBackground(hexToRgb(backgroundColor)), url: "?id=haisp_course_homepage&course_id=" + courseGR.getUniqueValue(), start, end, course_number: GlideRecordUtils.getValue(courseGR, "course_number"), aor_code: GlideRecordUtils.getDisplayValue(courseGR, "unit_aor"), sequence: GlideRecordUtils.getDisplayValue(courseGR, "unit_class_sequence"), uniform_code: GlideRecordUtils.getDisplayValue(courseGR, "uniform_code"), actions_required: GlideRecordUtils.getDisplayValue(courseGR, "actions_required"), }); } data.courses = courses; data.page = 1; function hexToRgb(hex) { // Remove the hash (#) if present hex = hex.replace(/^#/, ""); // Parse the red, green, and blue components const r = parseInt(hex.substring(0, 2), 16) || 255; // red const g = parseInt(hex.substring(2, 4), 16) || 255; // green const b = parseInt(hex.substring(4, 6), 16) || 255; // blue return [r, g, b]; } function getTextColorForBackground([r, g, b] = []) { // Normalize RGB values const normalizedR = r / 255; const normalizedG = g / 255; const normalizedB = b / 255; // Apply luminance formula components const calcComponent = (value) => value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4); const luminance = 0.2126 * calcComponent(normalizedR) + 0.7152 * calcComponent(normalizedG) + 0.0722 * calcComponent(normalizedB); // Compare luminance against threshold (0.5) return luminance > 0.5 ? "#1b1b1b" : "#ffffff"; } data.canExport = (() => { if (SecurityUtils.isClassAdmin()) return true; if (SecurityUtils.isInstructorUser()) return true; const enrollmentGR = new GlideRecord(Constants.CLASS_ENROLLMENT_TABLE); enrollmentGR.addQuery("class_id", data.classId); enrollmentGR.addQuery("student_id.user_id", gs.getUserID()); enrollmentGR.setLimit(1); enrollmentGR.query(); return enrollmentGR.hasNext(); })(); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-24 14:44:54</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>fa31c2ff1bb22e503b5e657fe54bcb3e</sys_id>
<sys_mod_count>132</sys_mod_count>
<sys_name>HAISP Class Schedule</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_fa31c2ff1bb22e503b5e657fe54bcb3e</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-04 16:00:19</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div ng-if="data.classId" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Class Schedule ({{data.class_details.class_number}}) </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Class Schedule </li> </ol> <div ng-if="!course_list.length"> <h3> No Assigned Courses </h3> <p> There are no courses currently assigned to this class. </p> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">Return to Class Homepage</a> </div> <div ng-if="course_list.length"> <div class="page-controls"> <div class="btn-group" role="group" aria-label="view schedule as"> <button type="button" class="btn btn-default" ng-click="navigate('calendar')" ng-class="{'btn-primary': data.view == 'calendar'}"> <span class="sr-only">Calendar</span> <i class="fa fa-calendar"></i> </button> <button type="button" class="btn btn-default" ng-click="navigate('list')" ng-class="{'btn-primary': data.view == 'list'}"> <span class="sr-only">List</span> <i class="fa fa-list"></i> </button> </div> <div ng-if="data.canExport" class="btn-group" uib-dropdown> <button id="export-menu" type="button" class="btn btn-default" uib-dropdown-toggle> Export Schedule <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> <ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelled-by="export-menu"> <li ng-repeat="type in exportTypes" role="menuitem"> <a href="/x_g_dh5_hsisat_course_list.do?{{type.value}}&sysparm_query=class_id={{data.classId}}^ORDERBYstart_date_time&sysparm_view=export&landscape=true" target="_new">Export as {{type.label}}</a> </li> </ul> </div> </div> <div ng-if="data.view == 'calendar'"> <h3> Class Course Calendar </h3> <h4> {{cView.title}} </h4> <div class="calendar-controls"> <div class="btn-group" role="group" aria-label="view calendar as"> <button type="button" class="btn btn-default" ng-click="changeView('agendaDay')" ng-class="{'btn-primary': cView.name == 'agendaDay'}"> Day </button> <button type="button" class="btn btn-default" ng-click="changeView('agendaWeek')" ng-class="{'btn-primary': cView.name == 'agendaWeek'}"> Week </button> <button type="button" class="btn btn-default" ng-click="changeView('month')" ng-class="{'btn-primary': cView.name == 'month'}"> Month </button> </div> <div> <button type="button" class="btn btn-default" ng-click="goToToday()"> Today </button> <div class="btn-group"> <button type="button" class="btn btn-default" ng-click="stepCalendar('prevYear')"> <span class="sr-only">Previous Year</span> <i aria-hidden="true" class="fa fa-angle-double-left"></i> </button> <button type="button" class="btn btn-default" ng-click="stepCalendar('prev')"> <span class="sr-only">Previous {{ step }}</span> <i aria-hidden="true" class="fa fa-angle-left"></i> </button> <button type="button" class="btn btn-default" ng-click="stepCalendar('next')"> <span class="sr-only">Next {{ step }}</span> <i aria-hidden="true" class="fa fa-angle-right"></i> </button> <button type="button" class="btn btn-default" ng-click="stepCalendar('nextYear')"> <span class="sr-only">Next Year</span> <i aria-hidden="true" class="fa fa-angle-double-right"></i> </button> </div> </div> </div> <div ui-calendar="uiConfig.calendar" calendar="{{ calendar }}" ng-model="eventSources"></div> </div> <div ng-if="data.view == 'list'"> <h3> Class Course List </h3> <div class="table-responsive"> <table class="table table-striped"> <thead> <th scope="col" aria-sort="{{sort['title'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['title'].label}}" ng-click="sortData($event, 'title')"> Instructional Block Name <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['course_number'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['course_number'].label}}" ng-click="sortData($event, 'course_number')"> HSI LP # <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['aor_code'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['aor_code'].label}}" ng-click="sortData($event, 'aor_code')"> Unit <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" class="date" aria-sort="{{sort['start'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['start'].label}}" ng-click="sortData($event, 'start')"> Course Start <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col"> <span class="btn btn-clear cursor-default">Actions Required</span> </th> </thead> <tbody> <tr ng-repeat="row in course_list"> <th scope="row"> <a href="{{row.url}}">{{row.title}}</a> </th> <td>{{row.course_number}}</td> <td> <span class="badge" style="--badge-color: {{row.backgroundColor}}; --badge-text: {{row.textColor || '#1b1b1b'}}">{{row.aor_code}}</span> </td> <td class="date">{{row.start|date}}</td> <td> <span ng-repeat="action in row.actions_required" class="label label-danger">{{action}}</span> </td> </tr> <tr ng-if="!course_list.length"> <td colspan="5">There are no courses assigned to this class</td> </tr> </tbody> </table> <uib-pagination total-items="list.length" items-per-page="batchSize" ng-model="data.page" ng-change="paginate()" boundary-link-numbers="true" rotate="false"></uib-pagination> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>sc</category>
<client_script>
<![CDATA[ function($scope, $http, spScUtil, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil, $document, spModal, $q, spAtf, $location, spAriaFocusManager, spSCNavStateManager, cabrillo, snAnalytics) { var c = this; c.isNative = cabrillo.isNative() && c.data.isMEE == 'true'; c.isAgentApp = navigator.userAgent.indexOf('Agent') > -1; var webAnalyticsMsgSuffix = c.isNative ? " - NOW Mobile" : ""; if (c.data.sc_cat_item && $scope.data.hasOwnProperty("_generatedItemGUID")) { c.data.sc_cat_item._attachmentGUID = $scope.data._generatedItemGUID; } $scope.m = $scope.data.msgs; if ($scope.data.redirectToItem) { $location.search("id=sc_cat_item&sys_id=" + $scope.data.sc_cat_item.sys_id); return; } if (c.isNative && c.data.hasDraftItem && !c.data.is_draft_item && !c.data.sc_cat_item.no_save_as_draft) cabrillo.message.showMessage(cabrillo.message.INFO_MESSAGE_STYLE, $scope.m.draftAlreadyExistCabrilloMsg); c.isAccessibilityEnabled = $window.g_accessibility; c.draftExistsWithLinkMsg = (!!c.data.sc_cat_item && !!c.data.sc_cat_item.name) ? $sce.trustAsHtml(generateMessageWithLink($scope.m.draftExistsMsg, { "id": "view_draft", "link": "?id=my_requests&draftSearchText=" + encodeURIComponent(c.data.sc_cat_item.name) }, $scope.m.newDraftInfoMsg, false)) : ""; $scope.isSCCartFixed = (c.options.display_cart_on_right === 'true' && c.isAccessibilityEnabled == 'false'); $rootScope.isSCCartFixed = $scope.isSCCartFixed; $scope.setDefaultValue = !$scope.data.is_cart_item && !$scope.data.is_wishlist_item && !$scope.data.is_draft_item; $scope.disableControls = function() { return $scope.submitting || $scope.submitted || c.data.isPreview || !!$scope.validating; } if (c.data.isPreview) { spUtil.recordWatch($scope, "sc_item_produced_record", "record_key=" + c.data.sys_id, function(response, data) { $window.location.reload(); }); } $scope.getFocus = function(field) { var focusVar = (field.type == "reference") ? "sp_formfield_reference_" : "sp_formfield_"; focusVar += (field.name.startsWith("IO:") ? field._children[0] : field.name); var elem = document.getElementById(focusVar); if (field.type == "url" && elem.style.display == "none") elem = document.getElementById(focusVar + "_unlock"); else if (field.type == "sc_multi_row") elem = document.getElementById(field.sys_id + "_add_row"); else if (field.type == "sc_attachment") { var buttonElem = angular.element(elem).find('button')[0]; if (buttonElem) elem = buttonElem; } else if (field.type != "html") { var inputElem = angular.element(elem).find('input')[0]; if (inputElem) elem = inputElem; } if (elem) elem.focus(); } c.quantity = c.data.quantity ? c.data.quantity + "" : "1"; c.mandatory = []; $scope.stickyHeaderTop = '0px'; c.widget._debugContextMenu = [ [i18n.getMessage("Open") + " sc_cat_item", function() { var item = c.data.sc_cat_item; $window.open("/sp_config?id=form&table=" + item.table + "&sys_id=" + item.sys_id); }] ]; spUtil.recordWatch($scope, "sys_attachment", "table_sys_id=" + $scope.data._generatedItemGUID, function(response, data) { $scope.attachmentHandler.getAttachmentList(); if (response.data) { var options = {}; options.operation = response.data.operation; options.filename = response.data.display_value; options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : ""; if (options.operation === 'update' && options.state === 'not_available') $rootScope.$broadcast("$$uiNotification", { type: 'error', message: i18n.getMessage('Upload file scan failed').withValues([options.filename]) }); } }); $rootScope.$on('spModel.gForm.rendered', function() { $timeout(function() { spAtf.init().then(function(atf) { $scope._atf = atf; atf.expose('catalog_util', catalogUtil); }); }, 10); }); // ATF helper object var catalogUtil = { updateGform: function() { $scope._atf.expose('g_form', spAtf.augmentForm(g_form)); }, addRow: function(fieldId, timeoutInMS) { if (timeoutInMS <= 0) timeoutInMS = 1000; var deferred = $q.defer(); $scope.$broadcast("$sp.sc_multi_row.create_row", fieldId, $scope.data.sc_cat_item.sys_id); $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) { if (gFormInstance.getSysId() == fieldId) deferred.resolve(); }); $timeout(function() { deferred.reject(); }, timeoutInMS); return deferred.promise; }, submit: function(timeout) { var deferred = $q.defer(); $scope.triggerOnSubmit(timeout); var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() { cleanup(); deferred.reject("Can't submit form"); }); if (g_form) { g_form.$private.events.on('submitted', function() { var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) { $timeout(function() { cleanUp(); deferred.resolve(result); }, 10); }); }); } else deferred.reject('g_form not initialized'); return deferred.promise; }, addToCart: function(timeout) { var defer = $q.defer(); $scope.triggerAddToCart(timeout); var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() { cleanup(); defer.reject("Can't submit form"); }); if (g_form) { g_form.$private.events.on('submitted', function() { var cleanup = $scope.$on('$sp.sc_cat_item.add_to_cart', function(o, result) { $timeout(function() { cleanup(); defer.resolve(result); }, 10); }); }); } else defer.reject('g_form not initialized'); return defer.promise; }, submitCatItem: function(timeout) { var defer = $q.defer(); $scope.triggerOnSubmit(timeout); var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function() { cleanup(); defer.reject("Can't submit form"); }); if (g_form) { g_form.$private.events.on('submitted', function() { if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") { defer.resolve(); } else { //When not two step, if reached this step means the form validation is done and it is the item submission that should be monitored if (cleanup && typeof cleanup === 'function') cleanup(); var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function(o, result) { $timeout(function() { cleanUp(); result.single_step = true; defer.resolve(result); }, 10); }); var failedSubmitCleanUp = $scope.$on('$sp.sc_cat_item.submit_failed', function() { failedSubmitCleanUp(); defer.reject("Can't submit form"); }); } }); } else defer.reject('g_form not initialized'); return defer.promise; }, setQuantity: function(quantity) { if ($scope.c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && $scope.c.data.sc_cat_item.sys_class_name !== "std_change_record_producer") { $scope.c.quantity = quantity; $scope.$apply(); } }, getQuantity: function() { return $scope.c.quantity; }, getPrice: function() { var obj = {}; obj.price = $scope.data.sc_cat_item.price_display; obj.recurring_price = $scope.data.sc_cat_item.recurring_price_display; obj.recurring_frequency = $scope.data.sc_cat_item.recurring_frequency; return obj; } } c.showAddCartBtn = function() { return !$scope.submitted && c.options.show_add_cart_button && c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" && !c.data.sc_cat_item.no_cart && !c.data.is_cart_item; } c.showPrice = function() { return c.data.showPrices && ((c.data.sc_cat_item.price ? true : false) || (c.data.sc_cat_item.recurring_price ? true : false)); } c.showDeliveryTime = function() { return !c.data.hideDeliveryTime && !c.data.sc_cat_item.no_delivery_time && (c.data.sc_cat_item.estimated_delivery_time ? true : false); } var i18nQuantity = i18n.getMessage("Quantity {0}"); updateQuantityAriaAttributes = function(initialLoad) { if (c.data.isMEE == 'true' && $('#catItemQuantity').length > 0) { var quantityElement = $('#catItemQuantity'); var prevDiv = quantityElement.prev(); var anchor = prevDiv.find('.select2-choice'); anchor.attr('aria-label', i18nQuantity.withValues([c.quantity])); if (initialLoad) { anchor.attr('role', 'button').attr('tabindex', '0'); prevDiv.find('.select2-search-choice-close').attr('aria-hidden', 'true'); } } } $timeout(function() { updateQuantityAriaAttributes(true); }, 100); c.showQuantitySelector = function() { return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" && !c.data.sc_cat_item.no_quantity && !c.data.sc_cat_item.read_only_quantity && (c.data.sc_cat_item.cart_guide === undefined || c.data.sc_cat_item.cart_guide === null) && (!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart); } c.showOrderNowButton = function() { return !$scope.data.is_cart_item && (c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now); } c.showAddToWishlist = function() { return !$scope.submitted && (c.data.showWishlist && !c.data.sc_cat_item.no_wishlist && !c.data.is_draft_item && !c.data.is_cart_item && c.options.show_add_to_wishlist_button === 'true'); } c.showDraftButtons = function() { return !!spScUtil.saveCatalogItem && !c.data.sc_cat_item.no_save_as_draft && !(c.options.hide_save_as_draft_button == "true") && !c.data.draft_buttons_hidden_via_property; } c.allowOrder = function() { if (c.data.sc_cat_item.use_sc_layout) return true; if (c.data.sc_cat_item.no_order) return false; if (c.data.sc_cat_item.no_order_now && c.data.sc_cat_item.no_cart) return false; return true; } c.showCart = function() { return c.data.can_create_cart_item && (c.data.is_cart_item || c.showPrice() || c.showDeliveryTime() || c.showAddCartBtn() || c.showOrderNowButton() || c.showAddToWishlist()); } c.hideCartMsg = function() { $scope.data.showMsg = false; } c.showAttachments = function() { return !$scope.submitted && c.data.sc_cat_item && !c.data.sc_cat_item.no_attachments && c.data.sc_cat_item.sys_class_name !== "std_change_record_producer"; }; c.updateQuantity = function(item) { var liveMessageQuantity = i18n.getMessage("Updated {0} quantity to {1}").withValues([item.name, c.quantity]); spAriaUtil.sendLiveMessage(liveMessageQuantity); updateQuantityAriaAttributes(false); } $scope.$on('dialog.upload_too_large.show', function(e) { $log.error($scope.m.largeAttachmentMsg); spUtil.addErrorMessage($scope.m.largeAttachmentMsg); }); var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError); function appendError(error) { spUtil.addErrorMessage(error.msg + error.fileName); } ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize); function setAttachments(attachments, action) { if (!angular.equals($scope.attachments, attachments)) $scope.attachments = attachments; if (action === "added") { spAriaUtil.sendLiveMessage($scope.m.attachmentAddedMsg); if ($scope.attachments.length > 0) $scope.data.sc_cat_item.attachment_submitted = true; } if (action === "renamed") spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg); if (action === "deleted") { spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg); if ($scope.attachments.length == 0) $scope.data.sc_cat_item.attachment_submitted = false; } $scope.data.sc_cat_item.attachment_action_in_progress = false; spUtil.get($scope, { action: "from_attachment" }); } if (c.showAttachments() && (c.data.is_cart_item || c.data.is_wishlist_item || c.data.is_draft_item)) $scope.attachmentHandler.getAttachmentList(); $scope.confirmDeleteAttachment = function(attachment) { if (c.isNative) { if (confirm($scope.data.msgs.delete_attachment)) { $scope.data.sc_cat_item.attachment_action_in_progress = true; $scope.attachmentHandler.deleteAttachment(attachment); $scope.setFocusToAttachmentButton(); } } else { spModal.confirm($scope.data.msgs.delete_attachment).then(function() { $scope.data.sc_cat_item.attachment_action_in_progress = true; $scope.attachmentHandler.deleteAttachment(attachment); $scope.setFocusToAttachmentButton(); }); } } $scope.dismissWishListMessage = function() { $scope.is_update_wishlist = false; } if ($scope.data.sc_cat_item) { /*if ($scope.data.sc_cat_item.content_type == 'external') { $window.location.href = $scope.data.sc_cat_item.url; return; } if ($scope.data.sc_cat_item.content_type == 'kb') { $location.search("id=kb_article&sys_id=" + $scope.data.sc_cat_item.kb_article); return; }*/ $scope.data.sc_cat_item.trusted_description = $sce.trustAsHtml($scope.data.sc_cat_item.description); if (!$scope.data.sc_cat_item._fields || angular.equals($scope.data.sc_cat_item._fields, {})) $scope.data.no_fields = true; if ($scope.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && $scope.data.sc_cat_item.sys_class_name !== "std_change_record_producer") { if ($scope.data.sc_cat_item.request_method == "request") $scope.submitButtonMsg = $scope.m.requestMsg; else if ($scope.data.sc_cat_item.request_method == "submit") $scope.submitButtonMsg = $scope.m.submitMsg; else $scope.submitButtonMsg = $scope.m.orderNowMsg; } else { if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer" && $scope.data.record_producer_label) $scope.submitButtonMsg = $scope.data.record_producer_label; else $scope.submitButtonMsg = $scope.m.submitMsg; } // Breadcrumbs if (!$scope.data.categories) $scope.data.categories = []; $scope.data.categories.forEach(function(category, index, categories) { categories[index].url = category.url + '&catalog_id=' + $scope.data.catalog_id; }); if ($scope.data.is_wishlist_item) { $scope.data.categories.unshift({ label: $scope.m.wishlistMsg, url: '?id=sc_wishlist' }); $scope.data.categories.push({ label: $scope.data.sc_cat_item.name, url: '#' }); } else if ($scope.data.is_cart_item) { $scope.data.categories.unshift({ label: $scope.m.cartMsg, url: '?id=sc_cart' }); $scope.data.categories.push({ label: $scope.data.sc_cat_item.name, url: '#' }); } else if ($scope.data.is_draft_item) { $scope.data.categories.unshift({ label: $scope.m.draftItemMsg, url: '?id=my_requests&selectDraftTab=true' }); $scope.data.categories.unshift({ label: $scope.m.myRequestsMsg, url: '?id=my_requests' }); $scope.data.categories.push({ label: $scope.data.draftItemName, url: '#' }); } else if ($scope.data.categories.length > 0) { $scope.data.categories.unshift({ label: $scope.data.sc_catalog || $scope.page.title, url: '?id=' + $scope.data.sc_category_page + "&catalog_id=" + $scope.data.catalog_id }); $scope.data.categories.push({ label: $scope.data.sc_cat_item.name, url: '#' }); if ($scope.data.all_catalog_msg) { $scope.data.categories.unshift({ label: $scope.data.all_catalog_msg, url: '?id=' + $scope.data.sc_category_page + "&catalog_id=-1" }); } } else { $scope.data.categories.push({ label: $scope.data.sc_cat_item.name, url: '#' }); } $timeout(function() { $scope.$emit('sp.update.breadcrumbs', $scope.data.categories); }); spUtil.setSearchPage('sc'); // Set Title in Mobile if (c.isNative) cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name); // Set Title in Workspace else if ($scope.options.isServiceWorkspace) $window.postMessage({ msg: 'CATALOG_ITEM_SET_TITLE', title: $scope.data.sc_cat_item.name }, $location.origin); } else { var notFoundBC = [{ label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page }]; $timeout(function() { $scope.$emit('sp.update.breadcrumbs', notFoundBC); }); spUtil.setSearchPage('sc'); } c.getItemId = function() { return $scope.data.sc_cat_item ? $scope.data.sc_cat_item.sys_id : -1; }; function showNativeMobileButtons() { if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_content') return; if (c.isNative) { cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name); if ($scope.data.is_cart_item) addCartItemButtons(); else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name == "std_change_record_producer") addRPButton(); else addOrderButtons(); } } function nativeGoBackToCart() { cabrillo.viewLayout.setNavigationBarButtons(); var button = [{ imageName: 'back', buttonStyle: cabrillo.viewLayout.REPLACE_BACK_BUTTON_STYLE, enabled: true }]; cabrillo.viewLayout.setNavigationBarButtons(button, function() { $location.search('id=sc_cart'); }); } function displayNativeButtons() { if (c.isNative && (!$scope.orderConfirmation && !$scope.saveConfirmation)) { cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name); showNativeMobileButtons(); cabrillo.viewLayout.showBackButton(); if ($scope.data.is_cart_item) { cabrillo.viewLayout.hideBackButton(); cabrillo.viewLayout.setNavigationBarButtons(); nativeGoBackToCart(); } } } var mespClosePopupUnregister = $rootScope.$on("mesp.popup.close", function() { //Do not display cabrillo buttons when there is an active mrvs row as it will have it's own buttons. var activeRowElement = document.getElementById("mrvs_active_row"); if (!!activeRowElement) return; // Timeout is to give a better user experience otherwise when this popup opens, // the cabrillo buttons will be displayed immediately giving a bad user experience. $timeout(function() { displayNativeButtons(); }); }); var mespOpenPopupUnregister = $rootScope.$on("mesp.popup.open", function() { // Timeout is to give a better user experience otherwise when this popup opens, // the cabrillo buttons will be displayed immediately giving a bad user experience. $timeout(function() { removeCabrilloButtons(); }); }); if ($scope.options.isServiceWorkspace && $window.frameElement) { var workspaceParams = {}; workspaceParams.sysparm_parent_table = $window.frameElement.getAttribute('parent-table') || $window.frameElement.dataParentTable; workspaceParams.sysparm_parent_sys_id = $window.frameElement.getAttribute('parent-sys-id') || $window.frameElement.dataParentSysId; //Extract the query if there is one passed in var urlParams = new URLSearchParams($window.frameElement.src); var params = Object.fromEntries(urlParams); if (params.query) workspaceParams.target_query = params.query; $scope.data.parentParams = workspaceParams; } else if (!$scope.options.isServiceWorkspace && $scope.options.parentTable && $scope.options.parentSysId) { var portalParentParams = {}; portalParentParams.sysparm_parent_table = $scope.options.parentTable; portalParentParams.sysparm_parent_sys_id = $scope.options.parentSysId; $scope.data.parentParams = portalParentParams; } var g_form; $scope.$on('spModel.gForm.initialized', function(e, gFormInstance) { if (gFormInstance.getSysId() != -1 && gFormInstance.getSysId() != c.getItemId()) return; g_form = gFormInstance; spSCNavStateManager.register(g_form); spSCNavStateManager.isNative(c.isNative); spSCNavStateManager.isPreview(c.data.isPreview); if (c.isNative) { cabrillo.viewLayout.setTitle($scope.data.sc_cat_item.name); $rootScope.$on('spModel.gForm.showNativeMobileButtons', displayNativeButtons); } if ($scope.setDefaultValue && c.options.requested_for_id && c.options.requested_for_display && $scope.data.sc_cat_item.requested_for_variable_name) { $scope.setDefaultValue = false; $scope.data.sc_cat_item.hideAlsoRequestFor = true; setValueInNextDigestCycle(g_form, c.options.requested_for_id, c.options.requested_for_display); } else if ($scope.setDefaultValue && $scope.data.parentParams && $scope.data.parentParams.sysparm_parent_table && $scope.data.parentParams.sysparm_parent_sys_id) { $scope.setDefaultValue = false; $scope.data.sc_cat_item.hideAlsoRequestFor = true; $scope.server.get({ action: 'get_requested_for', parentParams: $scope.data.parentParams }).then(function(response) { if (response.data.requested_for) { $scope.data.requested_for = response.data.requested_for; setValueInNextDigestCycle(g_form, response.data.requested_for.id, response.data.requested_for.displayValue); } }); } $timeout(function() { $rootScope.$emit('spModel.gForm.rendered', g_form); showNativeMobileButtons(); }, 175); // This runs after all onSubmit scripts have executed g_form.$private.events.on('submitted', function() { cleanFailedSubmit(); $scope.submitting = true; if ($scope.data.sc_cat_item.item_action === "order") getOne(); else if ($scope.data.sc_cat_item.item_action === "add_to_cart") addToCart(); else if ($scope.data.sc_cat_item.item_action == "update_cart") updateCart(); spUtil.simulateFakeFormSubmitForAutoComplete('catalog-form', $scope.data.sc_cat_item._fields); }); }); function setValueInNextDigestCycle(g_form, value, displayValue) { $timeout(function() { g_form.setValue($scope.data.sc_cat_item.requested_for_variable_name, value, displayValue); }); } function getVarData(fields) { var reqData = {}; for (var obj in fields) reqData[fields[obj].name] = fields[obj].value; return reqData; } function getValidatedVarData(fields) { //Filtering out invalid masked variables, to avoid adding them to wishlist var validFields = Object.values(fields).filter(function(field) { return !(field.type == 'masked' && field.useConfirmation && field.value != field.confirmPassword); }); return getVarData(validFields); } function addLink(url, msg, elem_id) { return "<a id=" + elem_id + " class='link alert-link' href=" + url + ">" + msg + "</a>"; } function getAlsoRequestForValue(fields) { if ($scope.data.sc_cat_item.requested_for_variable_name) { var requested_for_variable = fields[$scope.data.sc_cat_item.requested_for_variable_name]; if (!!requested_for_variable && requested_for_variable.hasOwnProperty('also_request_for_value')) return fields[$scope.data.sc_cat_item.requested_for_variable_name].also_request_for_value; return ""; } } function confirmAlsoRequestedFor(successFn) { $scope.submitting = true; var alsoRequestFor = getAlsoRequestForValue($scope.data.sc_cat_item._fields); if (alsoRequestFor) { spModal.confirm($scope.m.alsoReqForClearConfirmMsg).then(successFn, function() { $scope.submitting = false; }); } else successFn(); } $scope.triggerAddToWishlist = function() { confirmAlsoRequestedFor(addToWishlist); } $scope.triggerSaveItem = function() { confirmAlsoRequestedFor(function() { if ($scope.data.hasDraftItem && !$scope.data.is_draft_item) showSaveAsDraftModal($scope.data.draftItemName); else saveCatalogItem($scope.data.draftItemName); }); } function showSaveAsDraftModal(name) { var payload = { action: "save_item", draftName: name, message: $scope.m.save_draft_description, infoMessage: $scope.data.is_cart_item ? $scope.m.cartItemDeletionMsg : ($scope.data.is_wishlist_item ? $scope.m.wishlistItemDeletionMsg : null), }; $scope.server.get(payload).then(function(response) { var saveItemModalCtrl; var unregisterSave = $scope.$on('$sp.service_catalog.save.cancel', function() { $scope.submitting = false; $timeout(function() { if (saveItemModalCtrl) saveItemModalCtrl.close(); }); $scope.saveConfirmation = false; displayNativeButtons(); }); var closeModalOnSave = $scope.$on('$sp.service_catalog.save.submitted', function(event, payload) { $timeout(function() { if (saveItemModalCtrl) saveItemModalCtrl.close(); $scope.saveConfirmation = false; saveCatalogItem(payload.draft_name); }); }); var saveItemModal = angular.copy(response.data.saveItemModal); saveItemModal.options.afterOpen = function(ctrl) { saveItemModalCtrl = ctrl; if (c.data.isMEE == 'true') { spAriaUtil.sendLiveMessage($scope.m.saveItemDialogMsg); } }; saveItemModal.options.afterClose = function() { unregisterSave(); closeModalOnSave(); c.saveItemModal = null; saveItemModalCtrl = null; $scope.saveConfirmation = false; displayNativeButtons(); }; c.saveItemModal = saveItemModal; }); $scope.saveConfirmation = true; } function saveCatalogItem(name) { spAriaUtil.sendLiveMessage($scope.m.submittingMsg); showPageLoader(); $scope.savingItem = true; displayNativeButtons(); var additional_params = {}; if (!!$scope.data.wishlist_item_id) { additional_params.wishlist_item_id = $scope.data.wishlist_item_id; if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || $scope.data.sc_cat_item.sys_class_name == 'std_change_record_producer') additional_params.wishlistAttachmentTable = $scope.data._attachmentTable; } if ($scope.data.is_cart_item || $scope.data.is_wishlist_item) additional_params.current_cart_item_id = $scope.data._generatedItemGUID; spScUtil.saveCatalogItem($scope.data.sc_cat_item.sys_id, name, c.quantity, getValidatedVarData($scope.data.sc_cat_item._fields), $scope.data.is_cart_item || $scope.data.is_wishlist_item ? "" : $scope.data._generatedItemGUID, additional_params).then(function(response) { var cartItemId = ""; if (response && response.data && response.data.result && response.data.result.saved_cart_item_id) { cartItemId = response.data.result.saved_cart_item_id; if (!$scope.data.is_draft_item) { var payload = {}; payload.data = {}; payload.name = 'Catalog item added to draft'; payload.data['Class name'] = $scope.data.sc_cat_item.sys_class_name; payload.data['Item id'] = $scope.data.sc_cat_item.sys_id; payload.data['Engagement channel'] = ['sp','mesp','esc'].indexOf($scope.data.portal_suffix) !== -1 ? $scope.data.portal_suffix : 'custom'; snAnalytics.addEvent(payload); } } g_form.$private.userState.clearModifiedFields(); if ($scope.data.is_cart_item || $scope.data.is_wishlist_item) { spAriaUtil.sendLiveMessage($scope.data.sc_cat_item.name + " " + $scope.data.is_cart_item ? $scope.m.itemRemovedFromCartMsg : $scope.m.itemRemovedFromWishlistMsg); $rootScope.$broadcast($scope.data.is_cart_item ? "$sp.service_catalog.cart.update" : "$sp.service_catalog.wishlist.update"); if ($scope.data.is_cart_item || $scope.data.current_cart_item == $scope.data.wishlist_item_id) { $location.search('id=sc_cat_item&edit=draft&sys_id=' + cartItemId); return; } else { $scope.data.wishlist_item_id = ""; $scope.data.is_wishlist_item = false; } } c.status = $scope.data.is_draft_item ? $scope.m.draftUpdateMsg : $scope.m.draftSaveMsg; if (!c.isNative) { $scope.m.actionMsg = generateMessageWithLink($scope.data.is_draft_item ? $scope.m.draftUpdateMsg : $scope.m.draftSaveMsg, { "link": '?id=my_requests&draftSearchText=' + encodeURIComponent($scope.data.sc_cat_item.name), "message": $scope.m.viewDraftItemMsg, "id": "view_draft_item" }, '', true); $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg); $scope.data.showMsg = true; } else cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status); if (!!cartItemId) { $scope.data._generatedItemGUID = cartItemId; $scope.data.sc_cat_item._attachmentGUID = cartItemId; $scope.data.draftItemName = name; $scope.data.is_draft_item = true; $scope.data.sc_cat_item.isCartItem = true; //This is to refresh the item level attachments in the UI. As we might be changing the _generatedItemGUID above, we are updating parameters required by the attachment handler. $scope.attachmentHandler.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize); $scope.attachmentHandler.getAttachmentList(); } hidePageLoader(); $scope.savingItem = false; $scope.submitting = false; displayNativeButtons(); spUtil.scrollTo('#sc_cat_item', 300); }, function(response) { $scope.savingItem = false; displayNativeButtons(); handleFailure(response); }); } function addToWishlist() { spAriaUtil.sendLiveMessage($scope.m.submittingMsg); var wishlistMsg = $scope.data.is_wishlist_item ? $scope.m.wishlistUpdateMsg : $scope.m.wishlistAddMsg; $scope.m.actionMsg = generateMessageWithLink(wishlistMsg, { "link": "?id=sc_wishlist", "id": "view_wishlist", "message": $scope.m.viewWishListMsg }, '', true); $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg); $scope.is_update_wishlist = false; spScUtil.addToWishlist($scope.data.sc_cat_item.sys_id, c.quantity, getValidatedVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(function(response) { var cartItemId = ""; if (response && response.data && response.data.result && response.data.result.items) { for (var i = 0; i < response.data.result.items.length; i++) { var item = response.data.result.items[i]; if (item.catalog_item_id === $scope.data.sc_cat_item.sys_id) { cartItemId = item.cart_item_id; break; } } } $rootScope.$broadcast("$sp.service_catalog.wishlist.add_item"); $rootScope.$broadcast("$sp.service_catalog.wishlist.update", cartItemId); g_form.$private.userState.clearModifiedFields(); $scope.is_update_wishlist = true; $scope.data.is_wishlist_item = true; $scope.data.sc_cat_item.isCartItem = true; if (!!cartItemId && $scope.data._generatedItemGUID != cartItemId) { $scope.data._generatedItemID = cartItemId; $scope.data.sc_cat_item._attachmentGUID = cartItemId; } $scope.data.showMsg = true; $scope.data.wishlist_item_id = cartItemId; $scope.submitting = false; spUtil.scrollTo('#sc_cat_item', 300); $scope.focusElement("view_wishlist", wishlistMsg); }, function(response) { handleFailure(response); }); } $scope.clearAttachmentFields = function() { var fields = $scope.data.sc_cat_item._fields; for (var x in fields) { if (fields[x].type == 'sc_attachment') g_form.clearValue(fields[x].name); } } $scope.triggerAddToCart = function(timeout) { $scope.data.sc_cat_item.item_action = "add_to_cart"; $scope.data.sc_cat_item.quantity = c.quantity; $scope.$evalAsync(function() { if (g_form && !$scope.submitting) { $scope.submitting = true; spAriaUtil.sendLiveMessage($scope.m.submittingMsg); if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) { $scope.submitting = false; $scope.validating = true; $scope.triggerPostValidation = $scope.triggerAddToCart; } else if (!g_form.submit()) { timeout = timeout || 1000; $timeout(function() { $scope.$broadcast('$sp.service_catalog.form_submit_failed', { action_name: 'submit' }); }, timeout); if (!$scope.data.is_wishlist_item || !$scope.data.is_draft_item) window.GlideWebAnalytics.trackEvent('Service Catalog', 'Catalog Cart' + webAnalyticsMsgSuffix, 'Catalog Item Added to Cart', 0, 0); } } }) } $scope.triggerUpdateCart = function(timeout) { $scope.data.sc_cat_item.item_action = "update_cart"; $scope.data.sc_cat_item.quantity = c.quantity; $scope.$evalAsync(function() { if (g_form && !$scope.submitting) { $scope.submitting = true; spAriaUtil.sendLiveMessage($scope.m.submittingMsg); if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) { $scope.submitting = false; $scope.validating = true; $scope.triggerPostValidation = $scope.triggerUpdateCart; } else if (!g_form.submit()) { timeout = timeout || 1000; $timeout(function() { $scope.$broadcast('$sp.service_catalog.form_submit_failed', { action_name: 'submit' }); }, timeout); window.GlideWebAnalytics.trackEvent('Service Catalog', 'Catalog Cart' + webAnalyticsMsgSuffix, 'Catalog Cart Updated', 0, 0); } } }) return false; } $scope.triggerOnSubmit = function(timeout) { if (c.data.isPreview) return; $scope.data.sc_cat_item.item_action = "order"; $scope.data.sc_cat_item.quantity = c.quantity; $scope.$evalAsync(function() { if (g_form && !$scope.submitting) { $scope.submitting = true; spAriaUtil.sendLiveMessage($scope.m.submittingMsg); if (!spScUtil.isRegexDone($scope.data.sc_cat_item._fields)) { $scope.submitting = false; $scope.validating = true; $scope.triggerPostValidation = $scope.triggerOnSubmit; } else if (!g_form.submit()) { timeout = timeout || 1000; $timeout(function() { $scope.$broadcast('$sp.service_catalog.form_submit_failed', { action_name: 'submit' }); }, timeout); } } }) return false; } function setFieldsReadonly() { var allFields = g_form.getFieldNames(); for (var fieldName in allFields) { g_form.setReadonly(allFields[fieldName], true); } } // order / create request function getOne() { var requested_for_id = ""; var requested_for_display = ""; if ($scope.data.requested_for && $scope.data.requested_for.id && $scope.data.requested_for.displayValue) { requested_for_id = $scope.data.requested_for.id; requested_for_display = $scope.data.requested_for.displayValue; } //Required to pass as payload for usage as embeddedWidget var embeddedWidgetOptions = { "auto_redirect": "true", "requested_for_id": requested_for_id, "requested_for_display": requested_for_display }; if ($scope.data.sc_cat_item.sys_class_name != "sc_cat_item_producer" && $scope.data.sc_cat_item.sys_class_name != "std_change_record_producer") { if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") { var payload = { cart: 'cart_' + $scope.data.sc_cat_item.sys_id, itemDetails: { sys_id: $scope.data.sc_cat_item.sys_id, name: $scope.data.sc_cat_item.name, sys_class_name: $scope.data.sc_cat_item.sys_class_name, quantity: $scope.data.sc_cat_item.quantity, fields: getVarData($scope.data.sc_cat_item._fields), newRecordID: $scope.data._generatedItemGUID, request_method: $scope.data.sc_cat_item.request_method, }, action: $scope.data.is_wishlist_item ? "order_wishlist_item" : ($scope.data.is_draft_item ? "order_draft_item" : "order_item"), parentParams: $scope.data.parentParams }; for (var embeddedOption in embeddedWidgetOptions) { payload[embeddedOption] = c.options[embeddedOption] || embeddedWidgetOptions[embeddedOption]; } $scope.server.get(payload).then(function(response) { var orderItemModalCtrl; var unregister = $scope.$on('$sp.service_catalog.cart.cancel_order', function() { $scope.submitting = false; $scope.orderConfirmation = false; registerSubmitListeners(); $timeout(function() { if (orderItemModalCtrl) orderItemModalCtrl.close(); displayNativeButtons(); }); }); var closeModalOnSubmit = $scope.$on('$sp.service_catalog.cart.submitted', function() { orderItemModalCtrl.close(); setFieldsReadonly(); $scope.submitted = true; }); var orderItemModal = angular.copy(response.data.orderItemModal); orderItemModal.options.afterOpen = function(ctrl) { orderItemModalCtrl = ctrl; if (c.data.isMEE == 'true') { spAriaUtil.sendLiveMessage($scope.m.checkoutDialogMsg); } }; orderItemModal.options.afterClose = function() { unregister(); closeModalOnSubmit(); c.orderItemModal = null; orderItemModalCtrl = null; $('#submit-btn').focus(); }; c.orderItemModal = orderItemModal; }); $scope.orderConfirmation = true; } else { var additionalParms = {}; if ($scope.data.parentParams) { additionalParms.sysparm_parent_sys_id = $scope.data.parentParams.sysparm_parent_sys_id; additionalParms.sysparm_parent_table = $scope.data.parentParams.sysparm_parent_table; additionalParms.is_service_workspace = c.options.isServiceWorkspace; } additionalParms.engagement_channel = $scope.data.engagement_channel; additionalParms.referrer = $scope.data.referrer; $scope.submitting = true; showPageLoader(); addOrderButtons(); if ($scope.data.is_wishlist_item || $scope.data.is_draft_item) { var orderMethod = $scope.data.is_wishlist_item ? spScUtil.orderWishlistedItem : spScUtil.orderDraftItem; orderMethod($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function(response) { $scope.server.get({ action: 'log_order_one_step', itemDetails: { sys_id: $scope.data.sc_cat_item.sys_id, name: $scope.data.sc_cat_item.name, sys_class_name: $scope.data.sc_cat_item.sys_class_name } }); var a = response.data.result; $scope.$emit("$$uiNotification", a.$$uiNotification); $scope.$emit("$sp.sc_cat_item.submitted", a); if ($scope.data.is_wishlist_item) $rootScope.$broadcast("$sp.service_catalog.wishlist.update"); if (c.options.auto_redirect == 'false') { setFieldsReadonly(); $scope.submitting = false; $scope.submitted = true; $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true); spUtil.addInfoMessage($scope.m.requestSubmitted); return; } else { if (a.universal_request && !c.options.native_mobile && !c.options.isServiceWorkspace) $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + a.universal_request); else { var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id; if ($scope.data.referrer) url = url + "&referrer=" + $scope.data.referrer; $location.search(url); } } }, function(response) { $scope.$emit('$sp.sc_cat_item.submit_failed'); handleFailure(response); }); } else { spScUtil.orderNow($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms, getAlsoRequestForValue($scope.data.sc_cat_item._fields)).then(function(response) { $scope.server.get({ action: 'log_order_one_step', itemDetails: { sys_id: $scope.data.sc_cat_item.sys_id, name: $scope.data.sc_cat_item.name, sys_class_name: $scope.data.sc_cat_item.sys_class_name } }); var a = response.data.result; $scope.$emit("$$uiNotification", a.$$uiNotification); $scope.$emit("$sp.sc_cat_item.submitted", a); if (c.options.auto_redirect == 'false') { hidePageLoader(); setFieldsReadonly(); $scope.submitting = false; $scope.submitted = true; $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true); spUtil.addInfoMessage($scope.m.requestSubmitted); return; } else if (!$scope._atf) { removeCabrilloButtons(); //redirect to standard ticket page if universal request is created if (a.universal_request && !c.options.native_mobile && !c.options.isServiceWorkspace) $location.search('id=standard_ticket&is_new_order=true&table=universal_request&sys_id=' + a.universal_request); else { var url = 'id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id; if ($scope.data.referrer) url = url + "&referrer=" + $scope.data.referrer; if (c.options.isServiceWorkspace && c.options.hide_actions) url = url + "&hide_actions=" + c.options.hide_actions; $location.search(url); } } }, function(response) { $scope.$emit('$sp.sc_cat_item.submit_failed'); handleFailure(response); }); } } } else { postCatalogFormRequest().then(function(response) { var a = response.data.result; if ($scope.data.sys_properties.stopNavigationOnError || $scope.options.isServiceWorkspace) { if (a.sys_id == -1) { //Record Producer didnot generate any record //check for BR Error if (a.$$uiNotification.length > 0) { var errorNotify = a.$$uiNotification.find(function(elem) { if (elem.type == 'error') return true; }); if (errorNotify) { $scope.$emit("$$uiNotification", a.$$uiNotification); $scope.submitted = false; $scope.submitting = false; if ($scope.data.record_producer_label) $scope.submitButtonMsg = $scope.data.record_producer_label; else $scope.submitButtonMsg = $scope.m.submitMsg; return; } } } } $scope.server.get({ action: 'log_request_producer', itemDetails: { sys_id: $scope.data.sc_cat_item.sys_id, name: $scope.data.sc_cat_item.name, sys_class_name: $scope.data.sc_cat_item.sys_class_name } }); if (!$scope.options.isServiceWorkspace) $scope.$emit("$$uiNotification", a.$$uiNotification); $scope.$emit("$sp.sc_cat_item.submitted", a); if ($scope.data.is_wishlist_item) $rootScope.$broadcast("$sp.service_catalog.wishlist.update"); hidePageLoader(); if (c.options.auto_redirect == 'false') { setFieldsReadonly(); $scope.submitted = true; $scope.submitting = false; $scope.submitButtonMsg = $scope.m.submittedMsg; } else if (!$scope._atf) handleRedirect(a.number, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url); }); } } function addToCart() { $scope.server.get({ action: 'log_request_cart', itemDetails: { sys_id: $scope.data.sc_cat_item.sys_id, name: $scope.data.sc_cat_item.name, sys_class_name: $scope.data.sc_cat_item.sys_class_name } }); postCatalogFormRequest().then(function(response) { $rootScope.$broadcast("$sp.service_catalog.cart.add_item"); $rootScope.$broadcast("$sp.service_catalog.cart.update"); $scope.$emit("$sp.sc_cat_item.add_to_cart", $scope.data._generatedItemGUID); g_form.$private.userState.clearModifiedFields(); if ($scope.data.is_wishlist_item) { $rootScope.$broadcast("$sp.service_catalog.wishlist.update"); $scope.data.is_wishlist_item = false; $scope.data.sc_cat_item.isCartItem = false; if ($location.$$search.edit === "wishlist") { $location.search("id=sc_wishlist"); return; } } if ($scope.data.is_draft_item) { $scope.data.is_draft_item = false; $scope.data.sc_cat_item.isCartItem = false; if ($location.$$search.edit === "draft") { $location.search('id=sc_cart'); return; } } c.status = i18n.getMessage("Added item to shopping cart"); var cartResponse = response; $scope.server.get({ action: 'init_item' }).then(function(response) { $scope.data._generatedItemGUID = response.data._generatedItemGUID; $scope.data.sc_cat_item._attachmentGUID = response.data._generatedItemGUID; ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize); $scope.attachmentHandler.getAttachmentList(); $scope.attachments = []; $scope.clearAttachmentFields(); $scope.data.sc_cat_item.attachment_action_in_progress = false; $scope.data.sc_cat_item.attachment_submitted = false; if (!c.isNative) { $scope.m.actionMsg = generateMessageWithLink($scope.m.cartAddMsg + $scope.m.cartMakeChangesMsg, { "link": "?id=sc_cart", "id": "view_cart" }, '', true); $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg); $scope.data.showMsg = true; } else { cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status); if (cartResponse && cartResponse.data && cartResponse.data.result) { var items = cartResponse.data.result.items || []; $scope.showCabrilloCart = true; $scope.cartItemCount = items.length; showCartButton(); } } $scope.submitting = false; hidePageLoader(); cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() { $scope.submitting = false; }); spUtil.scrollTo('#sc_cat_item', 300); $scope.focusElement("view_cart", $scope.m.cartAddMsg); if (c.isNative) displayNativeButtons(); }); }); } function updateCart() { postCatalogFormRequest().then(function(response) { g_form.$private.userState.clearModifiedFields(); c.status = i18n.getMessage("Updated Item to shopping cart"); if (c.isNative) cabrillo.message.showMessage(cabrillo.message.SUCCESS_MESSAGE_STYLE, c.status); removeCabrilloButtons(); $location.search('id=sc_cart'); }) } function postCatalogFormRequest() { $scope.submitting = true; showPageLoader(); if ($scope.data.sc_cat_item.item_action !== "add_to_cart") addOrderButtons(); var additionalParms = {}; if ($scope.data.parentParams) { mergeMap($scope.data.parentParams, additionalParms); } additionalParms.engagement_channel = $scope.data.engagement_channel; additionalParms.referrer = $scope.data.referrer; var isDraftOrWishlistItem = $scope.data.is_wishlist_item || $scope.data.is_draft_item; if ($scope.data.is_wishlist_item) { $scope.is_update_wishlist = false; if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") return spScUtil.submitWishlistedProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms); else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") { additionalParms.is_wishlist_item = true; return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType); } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") { if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_guide') window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Order Guide Added to Cart", 0, 0); else if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer') window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Record Producer Added to Cart", 0, 0); else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item") window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart", "Catalog Item Added to Cart" + webAnalyticsMsgSuffix, 0, 0); return spScUtil.addWishlistedItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(null, function(response) { return handleFailure(response); }); } } else if ($scope.data.is_draft_item) { additionalParms.wishlist_item_id = $scope.data.wishlist_item_id; if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") return spScUtil.submitDraftProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms); else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") { additionalParms.is_draft_item = true; return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType); } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") { if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_guide') window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Order Guide Added to Cart", 0, 0); else if ($scope.data.sc_cat_item.sys_class_name == 'sc_cat_item_producer') window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart" + webAnalyticsMsgSuffix, "Record Producer Added to Cart", 0, 0); else if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item") window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Cart", "Catalog Item Added to Cart" + webAnalyticsMsgSuffix, 0, 0); return spScUtil.addDraftItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(null, function(response) { return handleFailure(response); }); } else if ($scope.data.sc_cat_item.item_action === "update_cart") { return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data.sc_cat_item.sys_id).then(null, function(response) { return handleFailure(response); }); } } if ($scope.data.is_cart_item && !isDraftOrWishlistItem) { return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data.sc_cat_item.sys_id).then(null, function(response) { return handleFailure(response); }); } else if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer") { return spScUtil.submitProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(null, function(response) { return handleFailure(response); }); } else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") { return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix, additionalParms, $scope.data.stdChg.chgModel, $scope.data.stdChg.defaultType); } else if ($scope.data.sc_cat_item.item_action === "add_to_cart") { return spScUtil.addToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, getAlsoRequestForValue($scope.data.sc_cat_item._fields)).then(null, function(response) { return handleFailure(response); }); } } // spModel populates mandatory - hasMandatory is called by the submit button $scope.hasMandatory = function() { return c.mandatory && c.mandatory.length > 0; }; // Listeners var cleanFailedSubmit; var validationComplete; function registerSubmitListeners() { cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function() { $scope.submitting = false; }); validationComplete = $rootScope.$on('$sp.service_catalog.form_validation_complete', function() { if ($scope.validating) { $scope.validating = false; if (typeof $scope.triggerPostValidation === 'function') $scope.triggerPostValidation(); } $scope.triggerPostValidation = null; }); } registerSubmitListeners(); $scope.$on("$sp.sc_cat_item.submitted", function() { $rootScope.$broadcast("$sp.sc_cat_item.rp_submitted"); if ($scope.data.sc_cat_item.item_action == "order") { if ($scope.data.sc_cat_item.sys_class_name == "sc_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_hardware_cat_item" || $scope.data.sc_cat_item.sys_class_name == "pc_software_cat_item") window.GlideWebAnalytics.trackEvent("Service Catalog", "Catalog Item Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", 1, 0); else if (scope.data.sc_cat_item.sys_class_name == "sc_cat_item_producer") window.GlideWebAnalytics.trackEvent("Service Catalog", "Record Producer Request" + webAnalyticsMsgSuffix, "Catalog Request Submitted", 0, 0); } g_form.$private.userState.clearModifiedFields(); if (c.options.auto_redirect == 'false') spAriaUtil.sendLiveMessage($scope.m.formSubmittedMsg); var payload = {}; payload.name = "Submit Record Producer Request"; var className = $scope.data.sc_cat_item.sys_class_name; if (className == "sc_cat_item" || className == "pc_hardware_cat_item" || className == "pc_software_cat_item") payload.name = "Order Catalog Item Request"; payload.data = {}; payload.data["Record Item"] = $scope.data.sc_cat_item.name; payload.data["Record ID"] = $scope.data.sc_cat_item.sys_id; snAnalytics.addEvent(payload); }); // switch catalog items var unregister = $scope.$on('$sp.list.click', onListClick); $scope.$on("$destroy", function() { $rootScope.$broadcast("$sp.service_catalog.item.close"); if (g_form) spSCNavStateManager.unregisterForms([g_form.getSysId()]); unregister(); mespClosePopupUnregister(); mespOpenPopupUnregister(); validationComplete(); }); $rootScope.$on('spModel.gForm.rendered', function() { spAriaUtil.sendLiveMessage($scope.m.catItemOpenedMsg); }); function onListClick(evt, arg) { $scope.data.sys_id = arg.sys_id; spUtil.update($scope); } function formatRedirectUrl(page, table, sys_id, hide_actions) { var url; var paramObj = { page: page, table: table, sys_id: sys_id }; url = spUtil.format(c.options.url, paramObj); if ($scope.data.referrer) url = url + '&referrer=' + $scope.data.referrer; if (hide_actions) url = url + "&hide_actions=" + hide_actions; return url; } function handleRedirect(n, table, sys_id, redirectTo, redirectUrl) { var page = 'form'; if (table == 'sc_request') page = 'sc_request'; else if (n) page = 'ticket'; if (sys_id == -1) sys_id = undefined; if (redirectTo == 'catalog_home') page = 'sc_home'; //For Standard change, always direct to form if not in Workspace if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") { if ($scope.options.isServiceWorkspace == 'true') { var params = {}; params.msg = 'TARGET_RECORD_SELECTED'; params.target_table = table; params.target_sys_id = '-1'; if (sys_id) params.target_sys_id = sys_id; if ($scope.data.stdChg.twoStep) { var genURL = new URL($window.location.origin + "/" + redirectUrl).searchParams; params.target_query = genURL.get("query"); } window.postMessage(params, $window.location.origin); return; } else page = 'form'; } removeCabrilloButtons(); if (c.options.page) { page = c.options.page; } if (c.options.table) { table = c.options.table; } var hide_actions = c.options.isServiceWorkspace && c.options.hide_actions; var url; if (page === 'sc_home') { url = "id=" + page } else { url = formatRedirectUrl(page, table, sys_id, hide_actions); } if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") { if (redirectUrl) { if (isPortalURL(redirectUrl)) { var queryParamURL = getQueryParams(redirectUrl); var currentParamURL = getQueryParams($location.$$url); if (queryParamURL == currentParamURL) $location.search(queryParamURL + '&' + Date.now()); else $location.search(queryParamURL); } else $window.location.href = redirectUrl; } else { var newURL = $location.search(url); spAriaFocusManager.navigateToLink(newURL.url()); } return; } var hide_actions = c.options.isServiceWorkspace && c.options.hide_actions; $location.search(formatRedirectUrl('sc_request', 'sc_request', sys_id, hide_actions)); return; } function isPortalURL(url) { var currentPortalName = $location.path().replace('/', ''); var paramIndex = getQueryParameterIndex(url) var redirectPortalName = url.substr(0, paramIndex).replace('/', ''); return currentPortalName === redirectPortalName || paramIndex == 0; } function getQueryParams(url) { var paramIndex = getQueryParameterIndex(url); return url.substr(paramIndex + 1, url.length); } function getQueryParameterIndex(url) { var paramIndex = url.search(/\?/); return paramIndex >= 0 ? paramIndex : url.length; } $timeout(function() { if ($document[0].getElementsByClassName('sc-sticky-item-header').length > 0) { var titleHeight = $document[0].getElementsByClassName('sc-sticky-item-header')[0].clientHeight; $scope.stickyHeaderTop = '-' + (titleHeight - 20 - $document[0].getElementsByClassName('sc-cat-item-short-description')[0].clientHeight) + 'px;'; } }); function setBottomButtons(buttonInfoArray) { if (!c.isNative) return; var buttons = buttonInfoArray.map(function(buttonInfo) { return { title: buttonInfo.title, enabled: buttonInfo.enabled, backgroundColor: buttonInfo.backgroundColor, textColor: buttonInfo.textColor }; }); cabrillo.viewLayout.setBottomButtons(buttons, function(buttonIndex) { if (buttonInfoArray[buttonIndex] && typeof buttonInfoArray[buttonIndex].action === 'function') { $timeout(function() { buttonInfoArray[buttonIndex].action(); }, 500); } }); } function getSaveButtonTitle() { return !$scope.data.is_draft_item ? (!$scope.savingItem ? $scope.m.saveAsDraft : $scope.m.savingMsg) : (!$scope.savingItem ? $scope.m.updateDraft : $scope.m.updatingMsg); } function addOrderButtons() { if (!c.isNative) return; showCartButton(); var orderButtons = []; if (c.showDraftButtons()) { orderButtons.push({ title: getSaveButtonTitle(), enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: '#f7f7f7', textColor: '#000000', action: function() { $scope.triggerSaveItem(); } }); } if ($scope.c.data.sys_properties.cartEnabled && $scope.c.showAddCartBtn()) { orderButtons.push({ title: $scope.m.addToCart, enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: '#f7f7f7', textColor: '#000000', action: function() { $scope.triggerAddToCart(); } }); } orderButtons.push({ title: $scope.submitting && !$scope.savingItem ? $scope.m.submittingMsg : $scope.submitButtonMsg, enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor, textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF', action: function() { $scope.triggerOnSubmit(); } }); setBottomButtons(orderButtons); } function addRPButton() { if (!c.isNative) return; var rpButtons = []; if (c.showDraftButtons()) { rpButtons.push({ title: getSaveButtonTitle(), enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: '#f7f7f7', textColor: '#000000', action: function() { $scope.triggerSaveItem(); } }); } rpButtons.push({ title: $scope.submitting && !$scope.savingItem ? $scope.m.submittingMsg : $scope.submitButtonMsg, enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor, textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF', action: function() { $scope.triggerOnSubmit(); } }); setBottomButtons(rpButtons); } function showCartButton() { if (!c.isNative || !$scope.showCabrilloCart) return; var button = [{ imageName: 'cart', badgeCount: $scope.cartItemCount, backgroundColor: '#2ff5f9', textColor: '#FFFFFF', enabled: true }]; cabrillo.viewLayout.setNavigationBarButtons(button, function(index) { $location.search('id=sc_cart'); }); } function addCartItemButtons() { if (!c.isNative) return; var cartItemButtons = [ { title: getSaveButtonTitle(), enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: '#f7f7f7', textColor: '#000000', action: function() { $scope.triggerSaveItem(); } }, { title: $scope.m.updateCart, enabled: !$scope.submitting && !$scope.savingItem, backgroundColor: $scope.data.sys_properties.isPolaris == "true" ? null : $scope.data.sys_properties.mobileNativeColor, textColor: $scope.data.sys_properties.isPolaris == "true" ? null : '#FFFFFF', action: function() { $scope.triggerUpdateCart(); } } ]; setBottomButtons(cartItemButtons); nativeGoBackToCart(); } function removeCabrilloButtons() { if (!c.isNative) return; cabrillo.viewLayout.setBottomButtons(); } function showPageLoader() { if (!c.isNative) return; cabrillo.viewLayout.showSpinner(); } function hidePageLoader() { if (!c.isNative) return; cabrillo.viewLayout.hideSpinner(); } function handleFailure(response) { registerSubmitListeners(); $scope.submitting = false; hidePageLoader(); if ($scope.data.sc_cat_item.item_action !== "add_to_cart") addOrderButtons(); if (response.data.result && response.data.result.errMsg) spUtil.addErrorMessage(response.data.result.errMsg); return $q.reject(response); } function mergeMap(fromMap, toMap) { for (var key in fromMap) { toMap[key] = fromMap[key]; } } function generateMessageWithLink(preLinkMsg, linkMsgObj, postLinkMsg, showCloseBtn) { if(!!linkMsgObj.message) preLinkMsg += ' <a id={id} class="link alert-link" href={link}>' + linkMsgObj.message + '</a>'; var linkMsg = i18n.format(preLinkMsg, linkMsgObj); var linkTemplate = '{0}' + (!!postLinkMsg ? ' {1}' : ''); if (showCloseBtn) linkTemplate += '<i class="fa fa-close pull-right pointer" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>'; return i18n.format(linkTemplate, linkMsg, postLinkMsg); } $scope.sendLiveMessage = function(message, timeout) { if (!message) return; if (!timeout) timeout = 0; setTimeout(function() { spAriaUtil.sendLiveMessage(message); }, timeout); } $window.onpageshow = function() { if (c.isNative) $scope.$emit('spModel.gForm.showNativeMobileButtons'); }; var favoriteEvent = $rootScope.$on('favorite', function(e, favorite) { $scope.showFavorite = favorite.showFavorite; $scope.isFavorite = favorite.isFavorite; }); $scope.$on("$destroy", favoriteEvent); $scope.toggleFavorite = function($event) { $event.preventDefault(); $event.stopPropagation(); $scope.$broadcast('toggleFavorite'); } } ]]>
</client_script>
<controller_as>c</controller_as>
<css>$border-radius-base: 4px !default; $sp-space--xs: 4px !default; $sp-space--xxs: 2px !default; .btn-group.attachment-mobile > button { padding: 1px 6px; } .panel-button { float: none; } .sp-attachment-add { padding: 5px; } .p-t-none { padding-top: 0 !important; } .file-list-wrap { margin-bottom: 10px; } .sc-btn { color: $text-color; } .dismiss-button { position: absolute; top: 1rem; right: 10px; color: $text-color; cursor: pointer; } .item-header { padding-top: 10px !important; padding-bottom: 10px !important; } .sc-item-description img { max-width: 100%; height: auto; } .sc-sticky-item-header { position: sticky; position: -webkit-sticky; position: -ms-sticky; top: -($font-size-h2 + $font-size-base); z-index: 10; background-color: $sp-homepage-bg; border-radius: $border-radius-base $border-radius-base 0 0; } .sc-fixed { position: fixed; max-height: 100%; width: 17.67777%; z-index: 1; } .no-margin { margin: 0px; } .sc-item-error-messages { max-height: 100%; position: absolute; overflow-y: auto; overflow-x: hidden; width: 100%; } .sc-field-error-label { margin-right: .5em; display: inline-block; cursor: pointer; background-color: $sc-field-error-color; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } .image-gallery { font-size: 8px; color: #CECECE; .active { color: #717171; } i { padding: 0 5px; } } .relative { position: relative; } .sc-order-widget-btn { position: absolute; left: 9%; } .sc-cat-item-legend { margin-top: 1rem; margin-bottom: 1.5rem; } .cart-icon-margin { margin-right: 3px; } .cart-icon-padding-top { padding-top: $sp-space--xxs; } .bottom-button-width { width: 20% } .cat-item-quantity-box-bottom-cart { padding-top: $sp-space--xs; width: 20%; } .cat-item-quantity-box { flex-grow: 1; padding-left: 1.2rem; } .cat-item-quantity-group { display: flex; justify-content: space-between; align-items: baseline; } .close-notification { position: absolute; top: 10px; right: 18px; } .help-tag-icon { color: $sc-field-error-color; } .sc-reqd-info-btn { margin-right: .5em; display: inline-block; white-space:normal !important; word-break: break-word !important; } .cat-mobile-favorite{ margin-top:24px; margin-bottom:16px; margin-left: 0.525rem; width: fit-content; width: -moz-fit-content; .v523f6529532d0110fedfddeeff7b1298{ float: left; } .favorite-button{ width : 1.2rem; height: auto; background-color: transparent; outline: transparent; box-shadow: none; .fa{ color: $tropical-rain; } } .favorite-text{ margin-left: 8px; font-size: $font-size-base; font-weight: 600; color: $tropical-rain; } } @media only screen and (max-width : 992px) { .sc-fixed { position: relative; width: 100%; } .wishlist-update-message { display : block; } .sc-item-error-messages { position: relative; } .read-more, .read-less { font-size: $font-size-h2/3; cursor: pointer; font-weight: 850; border-width: 0.125rem; } .more-text { display: none; } .inline-cart { display: none; } .right-side-cart { display: inherit !important; } .sp-attachment-add { margin-left: 0; padding: 0; } } @media only screen and (max-width : 768px) { .sc-sticky-item-header { position: inherit; } .sc-cat-item-short-description { width: 80%; } } .inline-cart { .quantity-selector { display: inline-block; width: 65px; padding-top: $sp-space--xxs; } } .alert-success .link { text-decoration: underline; } .alert-info-border { border-color: $alert-info-border; } .attachment-text { color: $primary; } .native-mobile { .panel { border-left: 0; border-right: 0; } .read-more, .read-less { font-size: $font-size-h2/2; cursor: pointer; } .more-text { display: none; } } .flex-center { display: flex; justify-content: center; align-items: center; } .flex-end { display: flex; justify-content: flex-end; } #catItemTop .panel.panel-default > div:last-child { border-bottom: none; } .attachment-height { height: 80px; } .sc-reqd-info-btn:focus { outline: 2px solid $brand-primary; outline-offset: 3px; } @container (min-width: 0px) { .sp-main-pinned .v3c29786e87133200e0ef0cf888cb0bdf { .sc-fixed { position: inherit; width: 100%; } .sc-item-error-messages { position: relative; } } } .sticky { position: sticky; top: 0; } #required_field_bottom .btn { text-wrap: wrap; } .panel-footer label, .file-upload-input > * { margin: 0 !important; }</css>
<data_table>sp_instance</data_table>
<demo_data>{ "options": { "sys_id": "04b7e94b4f7b4200086eeed18110c7fd" } }</demo_data>
<description/>
<docs display_value=""/>
<field_list>color</field_list>
<has_preview>true</has_preview>
<id>widget-haisp-catalog-item-v2</id>
<internal>false</internal>
<link>
<![CDATA[ function(scope, elem) { scope.setFocusToAttachment = function() { setTimeout(function() { var inboxArray = elem.find("a.view-attachment")[0]; if (inboxArray) inboxArray.focus(); }, 100); } scope.setFocusToAttachmentButton = function() { elem.find('.sp-attachment-add')[0].focus(); } scope.focusElement = function(elemId, liveMessage) { setTimeout(function() { var elem = $('#' + elemId); if (elem) elem.focus().after(function() { scope.sendLiveMessage(liveMessage, 500); }); }, 100); } } ]]>
</link>
<name>HAISP Catalog Item</name>
<option_schema>[{"name":"show_add_cart_button","section":"other","label":"Show Add Cart Button","type":"boolean"},{"hint":"If you turn on this, you will be able to see field validation messages on right side","name":"show_field_validation_messages","default_value":"true","section":"other","label":"Show field validation messages","type":"boolean"},{"hint":"Show Add/Update Wish List buttons","name":"show_add_to_wishlist_button","default_value":"false","section":"other","label":"Show Add/Update Wish List buttons","type":"boolean"},{"hint":"Order item section on top. If you uncheck this, order section will be displayed at bottom of screen","name":"display_cart_on_right","default_value":"true","section":"other","label":"Order Item Section On Top","type":"boolean"},{"hint":"Show item description in few words with an option to read more","name":"show_less_description","default_value":"true","section":"other","label":"Enable Show More/Less for Item description on Mobile","type":"boolean"},{"hint":"Hide Save as Draft button","name":"hide_save_as_draft_button","default_value":"false","section":"other","label":"Hide Save as Draft button","type":"boolean"},{"hint":"Hide the Delivery Time in the widget","name":"hide_delivery_time","section":"other","default_value":"false","label":"Hide Delivery Time","type":"boolean"},{"hint":"Makes it a preview page","name":"is_preview","section":"other","default_value":"false","label":"Is preview","type":"boolean"}]</option_schema>
<public>true</public>
<roles/>
<script>
<![CDATA[ // populate the 'data' variable with catalog item, variables, and variable view (function() { var localInput = input; //to safeguard pullution of "input" via BR or other scripts var engagementChannelOptions = { //extracting here to safeguard pollution of 'options' via other scripts native_mobile: options.native_mobile, isServiceWorkspace: options.isServiceWorkspace }; data.engagement_channel = new global.GlobalServiceCatalogUtil().getEngagementChannel(engagementChannelOptions); data.referrer = $sp.getParameter("referrer"); data.portal_suffix = $sp.getPortalRecord().getValue("url_suffix"); var embeddedWidgetOptions = ['auto_redirect', 'requested_for_id', 'requested_for_display']; if (localInput && localInput.action == "from_attachment") return; if (localInput && localInput.action == "get_requested_for") { data.requested_for = new global.GlobalServiceCatalogUtil().getRequestedFor(localInput.parentParams); return; } if (localInput && localInput.action == 'init_item') { data._generatedItemGUID = gs.generateGUID(); return; } else if (localInput && localInput.action === "order_one_step") { } else if (localInput && localInput.action === "order_item") { //Minimum set of widget options supported for Embedded widget embeddedWidgetOptions.forEach(function(embeddedWidgetOption) { if (typeof localInput[embeddedWidgetOption] != 'undefined') options[embeddedWidgetOption] = localInput[embeddedWidgetOption]; }); data.orderItemModal = $sp.getWidget('widget-modal', { embeddedWidgetId: 'sc-checkout', embeddedWidgetOptions: { cart: { name: localInput.cart }, action: 'order_now', item: localInput.itemDetails, requested_for: { id: options.requested_for_id, displayValue: options.requested_for_display }, auto_redirect: options.auto_redirect, parentParams: localInput.parentParams, native_mobile: options.native_mobile, isServiceWorkspace: options.isServiceWorkspace, referrer: data.referrer, hide_actions: options.hide_actions }, backdrop: 'static', keyboard: false, size: 'md' }); return; } else if (localInput && localInput.action === "save_item") { data.saveItemModal = $sp.getWidget('widget-modal', { embeddedWidgetId: 'sc-item-save', embeddedWidgetOptions: { native_mobile: options.native_mobile, draftName: localInput.draftName, message: localInput.message, infoMessage: localInput.infoMessage, }, backdrop: 'static', keyboard: false, size: 'md' }); return; } else if (localInput && (localInput.action == "order_wishlist_item" || localInput.action == "order_draft_item")) { //Minimum set of widget options supported for Embedded widget embeddedWidgetOptions.forEach(function(embeddedWidgetOption) { if (typeof localInput[embeddedWidgetOption] != 'undefined') options[embeddedWidgetOption] = localInput[embeddedWidgetOption]; }); data.orderItemModal = $sp.getWidget('widget-modal', { embeddedWidgetId: 'sc-checkout', embeddedWidgetOptions: { cart: { name: localInput.cart }, action: localInput.action == "order_wishlist_item" ? 'order_now_wishlisted_item' : 'order_now_draft_item', item: localInput.itemDetails, requested_for: { id: options.requested_for_id, displayValue: options.requested_for_display }, auto_redirect: options.auto_redirect, parentParams: localInput.parentParams, native_mobile: options.native_mobile, referrer: data.referrer }, backdrop: 'static', keyboard: false, size: 'md' }); return; } else if (localInput && localInput.action === 'log_request_cart') { $sp.logStat('Add to Cart Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue()); return; } else if (localInput && localInput.action === "log_order_one_step") { $sp.logStat('Order Now Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue()); $sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue()); return; } else if (localInput && localInput.action === 'log_request_producer') { $sp.logStat('Cat Item Request', localInput.itemDetails.sys_class_name, localInput.itemDetails.sys_id, localInput.itemDetails.name, $sp.getPortalRecord().getUniqueValue()); return; } // portal can specify a catalog and catalog category home page var catalogID = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1"; data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home"; data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "sc_category"; var edit_parm = $sp.getParameter('edit'); data.is_cart_item = edit_parm == 'cart'; data.is_wishlist_item = edit_parm == 'wishlist'; data.is_draft_item = edit_parm == 'draft'; data.isPreview = options.is_preview == 'true' || $sp.getParameter("is_preview") == 'true'; data.wishlist_item_id = ""; data.recordFound = true; options.show_add_cart_button = (options.show_add_cart_button == "true"); data.isMEE = options.native_mobile; var athTblName = 'sc_cart_item'; var clGenerator = new GlideChoiceList(); var choiceListQuantity = clGenerator.getChoiceList("sc_cart_item", "quantity"); var choicelistQuantityData = []; for (var i = 0; i < choiceListQuantity.size(); i++) { var choice = choiceListQuantity.get(i); if (!isNaN(choice.getValue())) choicelistQuantityData.push({ value: parseInt(choice.getValue()), label: choice.getLabel() }); } data.choiceListQuantity = choicelistQuantityData; data.quantity = choicelistQuantityData[0].value; if (options.page) { var pageGR = new GlideRecord("sp_page"); options.page = (pageGR.get(options.page)) ? pageGR.getValue("id") : null; } if (options.table) { var tableGR = new GlideRecord("sys_db_object"); options.table = (tableGR.get(options.table)) ? tableGR.getValue("name") : null; } options.url = options.url || "id={page}&is_new_order=true&table={table}&sys_id={sys_id}"; data.showPrices = $sp.showCatalogPrices(); var m = data.msgs = {}; m.submitMsg = gs.getMessage("Submit"); m.deletedOutdatedItemMsg = gs.getMessage("The draft catalog item you’re trying to open is deleted because the catalog item was updated after you saved it as a draft. You’re redirected to a new catalog item page."); m.requestMsg = gs.getMessage("Request"); m.orderNowMsg = gs.getMessage("Order Now"); m.submittedMsg = gs.getMessage("Submitted"); m.formSubmittedMsg = gs.getMessage("Form submitted successfully"); m.submittingMsg = gs.getMessage("Submitting"); m.savingMsg = gs.getMessage("Saving"); m.updatingMsg = gs.getMessage("Updating"); m.createdMsg = gs.getMessage("Created"); m.trackMsg = gs.getMessage("track using 'Requests' in the header or"); m.clickMsg = gs.getMessage("click here to view"); m.dialogTitle = gs.getMessage("Delete Attachment"); m.dialogMessage = gs.getMessage("Are you sure?"); m.dialogOK = gs.getMessage("OK"); m.dialogCancel = gs.getMessage("Cancel"); m.dialogSave = gs.getMessage("Save"); m.dialogUpdate = gs.getMessage("Update"); m.addToCart = gs.getMessage("Add to Cart"); m.updateCart = gs.getMessage("Update Cart"); m.saveAsDraft = gs.getMessage("Save as draft"); m.updateDraft = gs.getMessage("Update draft"); m.alsoReqForClearConfirmMsg = gs.getMessage("This will clear the values entered in 'Also requested for'. Do you want to proceed?"); m.attachmentAddedMsg = gs.getMessage("Attachment added successfully"); m.renameSuccessMsg = gs.getMessage("Attachment renamed successfully"); m.deleteSuccessMsg = gs.getMessage("Attachment deleted successfully"); m.wishlistMsg = gs.getMessage('Wish List'); m.cartMsg = gs.getMessage('Cart'); m.myRequestsMsg = gs.getMessage('My Requests'); m.draftItemMsg = gs.getMessage('Draft Items'); m.itemWishlistMsg = gs.getMessage('This item is already in your Wish List. If you attempt to add this item to your Wish List it will overwrite the existing item.'); m.invalidRecordMsg = gs.getMessage('You are either not authorized or record is not valid.'); m.wishlistUpdateMsg = gs.getMessage('Your Wish List has been updated.'); m.wishlistAddMsg = gs.getMessage('Your item has been added to your Wish List.'); m.draftSaveMsg = gs.getMessage('Your item has been saved in My Requests.'); m.draftUpdateMsg = gs.getMessage('Your draft item has been updated.'); m.viewDraftItemMsg = gs.getMessage('View Drafts'); m.cartAddMsg = gs.getMessage('Your item has been added to your Cart. '); m.cartMakeChangesMsg = gs.getMessage('To make changes to the items in your cart, click <a id={id} class="link alert-link" href={link}>View Cart </a>'); m.viewWishListMsg = gs.getMessage('View Wish List'); m.viewCartMsg = gs.getMessage('View Cart'); m.delete_attachment = gs.getMessage("Delete Attachment?"); m.regexError = gs.getMessage("Item with invalid variable can't be saved"); m.requestSubmitted = gs.getMessage("Thank you, your request has been submitted."); data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024)); m.updatedMsg = gs.getMessage("Updated"); m.quantityToMsg = gs.getMessage("quantity to"); if (isNaN(data.maxAttachmentSize)) data.maxAttachmentSize = 24; m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB"); m.checkoutDialogMsg = gs.getMessage("Catalog checkout dialog"); m.saveItemDialogMsg = gs.getMessage("Catalog item save dialog"); m.notForMobileMsg = gs.getMessage('Not viewable in mobile'); m.save_draft = gs.getMessage('Save draft'); m.update_draft = gs.getMessage('Update draft'); m.save_draft_as = gs.getMessage('Save draft as'); m.draftExistsMsg = gs.getMessage('A draft for this item already exists. You can view all the drafts <a id={id} class="link alert-link" href={link}>here. </a>'); m.newDraftInfoMsg = gs.getMessage("If you save this item now, a new draft item would be created."); m.itemSavedMsg = gs.getMessage('Item saved successfully'); m.itemRemovedFromCartMsg = gs.getMessage("has been removed from your cart"); m.itemRemovedFromWishlistMsg = gs.getMessage("has been removed from your wishlist"); m.saveDraftNameLengthErrMsg = gs.getMessage('Draft Item name should not exceed 200 characters.'); m.save_draft_description = gs.getMessage('Give a unique name to save this item as a draft to continue working on it later.'); m.wishlistItemDeletionMsg = gs.getMessage("This catalog item is on your wish list. After you save the draft, the item will be deleted from the wishlist."); m.cartItemDeletionMsg = gs.getMessage("This catalog item is in your cart. After you save the draft, the item will be deleted from the cart."); m.draftAlreadyExistCabrilloMsg = gs.getMessage("A draft for this item already exists."); if (options.record_producer_label) data.record_producer_label = gs.getMessage(options.record_producer_label); if (options.native_mobile == 'true') { var listScreenGr = new GlideRecord("sys_sg_list_screen"); listScreenGr.addQuery("sys_id", "31307d1787232300e0ef0cf888cb0b15"); listScreenGr.setWorkflow(false); listScreenGr.query(); if (listScreenGr.next()) { var deepLinkGen = new global.MobileDeepLinkGenerator('request'); data.nativeMyRequestsScreenLink = deepLinkGen.getScreenLink('31307d1787232300e0ef0cf888cb0b15'); } else data.nativeMyRequestsScreenLink = ""; } if (edit_parm) { var cartName = data.is_cart_item ? 'DEFAULT' : (data.is_wishlist_item ? 'saved_items' : 'draft_items'); var cart = new sn_sc.CartJS(cartName); var cart_item_id = $sp.getParameter("sys_id"); var gr = new GlideRecord("sc_cart_item"); if (!gr.get(cart_item_id) || gr.cart != cart.getCartID() || (!new sn_sc.CatItem(gr.getValue('cat_item')).canView())) { data.recordFound = false; return; } data.showWishlist = data.is_wishlist_item; if (gr.isValidField('cart_item_name')) data.draftItemName = gr.getValue('cart_item_name'); var catItemData = {}; catItemData.sys_id = gr.getValue('cat_item'); catItemData.cart_item_id = gr.getUniqueValue(); catItemData.table = "sc_cart_item"; catItemData.is_ordering = true; catItemData.from_guide = !!gr.getValue('order_guide'); data.current_cart_item = cart_item_id; data.sc_cat_item = $sp.getCatalogItem(catItemData); var className = data.sc_cat_item.sys_class_name; if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) { if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer') athTblName = data.sc_cat_item.target_table_name; } data._attachmentTable = athTblName; data.sc_cat_item.isCartItem = true; data.sc_cat_item.cart_guide = gr.getValue('order_guide'); data.sc_cat_item.native_mobile = data.isMEE == 'true'; data.hideDeliveryTime = data.sc_cat_item.no_delivery_time; if (!data.hideDeliveryTime) data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer'); if (data.is_draft_item && typeof sn_sc.CartJS.isSameVersion == "function" && !sn_sc.CartJS.isSameVersion(cart_item_id, gr.getValue('cat_item'))) { var cartRecord = new sn_sc.CartJS("draft_items"); cartRecord.remove(cart_item_id); if (athTblName != 'sc_cart_item') new global.GlobalServiceCatalogUtil().deleteAttachments(athTblName, cart_item_id); gs.getSession().putClientData('invalidVersionItem_' + data.sc_cat_item.sys_id, true); data.redirectToItem = true; return; } var values = getValues(cart_item_id); for (var f in data.sc_cat_item._fields) { // Put the values into the cat item fields var field = data.sc_cat_item._fields[f]; if (typeof values[f] != "undefined" && typeof values[f].value != "undefined") { if (values[f].type == 9 || values[f].type == 10) field.value = values[f].displayValue; else if (values[f].type == 25) field.value = values[f].decrypted_value; else field.value = values[f].value; field.displayValue = values[f].displayValue; field.display_value_list = values[f].display_value_list; } updatePriceOnField(field); } data._generatedItemGUID = cart_item_id; data.quantity = '' + gr.quantity; } else { if (localInput) data.sys_id = localInput.sys_id; else if (options.sys_id) data.sys_id = options.sys_id; else data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id'); if (!data.sys_id) { data.recordFound = false; return; } data._generatedItemGUID = gs.generateGUID(); var validatedItem = new sn_sc.CatItem('' + data.sys_id); if (!data.isPreview) { if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal()) { data.recordFound = false; return; } } data.sc_cat_item = $sp.getCatalogItem({ sys_id: data.sys_id + '', is_ordering: true }); var className = data.sc_cat_item.sys_class_name; if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) { if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer') athTblName = data.sc_cat_item.target_table_name; } data._attachmentTable = athTblName; data.favoriteWidget = $sp.getWidget('ec_favorite', { 'table': data.sc_cat_item.sys_class_name, 'sys_id': data.sc_cat_item.sys_id }); if (options.native_mobile == 'true') { if (gs.getProperty('glide.sc.mobile.item_class_not_supported', '').split(',').indexOf(data.sc_cat_item.sys_class_name) > -1) { data.not_for_mobile = true; data.sc_cat_item = {}; return; } if (gs.getProperty('glide.sc.mobile.include_desktop_only_items', 'true') == 'false') { if (data.sc_cat_item.availability == 'on_desktop') { data.not_for_mobile = true; data.sc_cat_item = {}; return; } } } data.sc_cat_item.native_mobile = data.isMEE == 'true'; data.hideDeliveryTime = data.sc_cat_item.no_delivery_time; if (!data.hideDeliveryTime) data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer'); if (data.sc_cat_item.dynamic) updatePortalConfigOfDynamicContentItem(data.sc_cat_item.dynamic, data.sc_cat_item); if (data.sc_cat_item.category) { var categoryJS; var categoryID = validatedItem.getFirstAccessibleCategoryForSearch((catalogID && catalogID != "-1") ? catalogID : $sp.getCatalogs().value + ""); if (GlideStringUtil.isEligibleSysID($sp.getParameter("sysparm_category"))) { categoryJS = new sn_sc.CatCategory($sp.getParameter("sysparm_category") + ""); categoryID = $sp.getParameter("sysparm_category") + ""; } else if (categoryID) { categoryJS = new sn_sc.CatCategory(categoryID); } if (categoryJS && GlideStringUtil.isEligibleSysID(categoryJS.getID())) { if (categoryJS.getCatalog()) { catalogID = categoryJS.getCatalog(); data.catalog_id = catalogID; var catalogObj = new sn_sc.Catalog('' + catalogID); data.sc_catalog = catalogObj.getTitle(); data.showWishlist = catalogObj.isWishlistEnabled(); } data.category = { name: categoryJS.getTitle(), url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID } data.categories = []; data.categories.push({ label: categoryJS.getTitle(), url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID }); while (categoryJS.getParent()) { var parentId = categoryJS.getParent(); categoryJS = new sn_sc.CatCategory(parentId); var category = { label: categoryJS.getTitle(), url: '?id=' + data.sc_category_page + '&sys_id=' + parentId }; data.categories.unshift(category); } if ((($sp.getCatalogs().value + "").split(",")).length > 1) { data.all_catalog_msg = gs.getMessage("All Catalogs"); } } } else if (!gs.nil(data.sc_cat_item.item_catalogs)) { var catalogsArr = ($sp.getCatalogs().value + "").split(","); var itemCatalogs = data.sc_cat_item.item_catalogs.split(","); for (var catalogIdx=0; catalogIdx<catalogsArr.length; catalogIdx++) { if (itemCatalogs.indexOf(catalogsArr[catalogIdx]) == -1) continue; var catalog = new sn_sc.Catalog(catalogsArr[catalogIdx]); if (!gs.nil(catalog) && catalog.isWishlistEnabled()) { data.showWishlist = true; break; } } } } var wishlistGr = new GlideRecord('sc_cart_item'); wishlistGr.addQuery('cart', new sn_sc.CartJS('saved_items').getCartID()); wishlistGr.addQuery('cat_item', data.sc_cat_item.sys_id); wishlistGr.query(); if (wishlistGr.next() && !options.isServiceWorkspace) data.wishlist_item_id = wishlistGr.getUniqueValue(); if (gs.nil(data.draftItemName)) data.draftItemName = gs.getMessage("{0} draft", data.sc_cat_item.name); data.draft_buttons_hidden_via_property = (gs.getProperty('glide.sc.disable.save_as_draft') == 'true') || (gs.getProperty('glide.sc.enable.save_as_draft.portal.' + data.portal_suffix) != 'true'); if (!!gs.getSession().getClientData('invalidVersionItem_' + data.sc_cat_item.sys_id)) { gs.getSession().clearClientData('invalidVersionItem_' + data.sc_cat_item.sys_id); data.isInvalidVersion = true; } if (!data.draft_buttons_hidden_via_property && (options.hide_save_as_draft_button != "true") && !data.sc_cat_item.no_save_as_draft) { var draftItemGr = new GlideRecord('sc_cart_item'); draftItemGr.addQuery('cart', new sn_sc.CartJS('draft_items').getCartID()); draftItemGr.addQuery('cat_item', data.sc_cat_item.sys_id); draftItemGr.query(); data.hasDraftItem = draftItemGr.hasNext(); } data.sys_properties = { twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true' && !data.sc_cat_item.has_requested_for_variable, mobileNativeColor: gs.getProperty("glide.sc.mobile.primary_color", "#1f8476"), cartEnabled: gs.getProperty("glide.sc.cart.enabled", "false") == "true", stopNavigationOnError: gs.getProperty("glide.sc.stop_navigation_on_error", "true") == "true", isPolaris: gs.getProperty("glide.ui.polaris.experience", "false") }; m.catItemOpenedMsg = gs.getMessage("Catalog item {0} opened", data.sc_cat_item.name); var className = data.sc_cat_item.sys_class_name; data.can_create_cart_item = canCreateCartItem(className) && !gs.hasRole('snc_read_only'); function canCreateCartItem(className) { var allowedClasses = ['sc_cat_item_producer', 'std_change_record_producer', 'sc_cat_item_producer_service']; if (allowedClasses.indexOf(className) > -1) return true; var invalidClasses = ('sc_cat_item_content,' + gs.getProperty('glide.sc.item.not_normal_cart_item', '')).split(','); return invalidClasses.indexOf(className) < 0; } data.stdChg = {}; if (className === 'std_change_record_producer') { //Populate scope with the porperty for two step data.stdChg.twoStep = false; var twoStepProp = new global.StdChangeUtils().getValue('two_step') + ''; if (twoStepProp) data.stdChg.twoStep = twoStepProp === '1'; var stdChgProducerGr = new GlideRecord('std_change_record_producer'); stdChgProducerGr.get(data.sc_cat_item.sys_id); if (stdChgProducerGr.isValidRecord()) data.stdChg.currentVersion = stdChgProducerGr.getValue('current_version'); if (gs.getProperty('com.snc.change_management.change_model.type_compatibility', 'false') !== 'true') data.stdChg.chgModel = new global.StdChangeUtils().DEFAULT_CHG_MODEL; data.stdChg.defaultType = new global.StdChangeUtils().DEFAULT_CHG_TYPE; } if (data.sc_cat_item.sys_class_name !== 'sc_cat_item_content') $sp.logStat('Cat Item View', data.sc_cat_item.sys_class_name, data.sc_cat_item.sys_id, data.sc_cat_item.name, $sp.getPortalRecord().getUniqueValue()); function getValues(sys_id) { var qs = new sn_sc.VariablePoolQuestionSetJS(); qs.setCartID(sys_id); qs.load(); var values = {}; var questions = qs.getFlatQuestions(); for (var i = 0; i < questions.length; i++) { var qKey = questions[i].name; if (typeof qKey == 'undefined' || qKey == '') qKey = "IO:" + questions[i].sys_id; values[qKey] = questions[i]; } return values; } function setPrice(field, p, rp) { if (p != undefined) field.price = p; if (rp != undefined) field.recurring_price = rp; } function updatePriceForReferenceTable(field) { var tableName = field.refTable + ''; if (tableName != undefined && tableName != null && tableName != '') { var gr = new GlideRecord(tableName); if (gr.isValid()) { if (gr.get(field.value) && gr.isValidRecord()) { updatePrice(gr, field); updateRecurringPrice(gr, field); } } } } function updatePriceForListCollector(field) { var tableName = field.refTable + ''; if (tableName != undefined && tableName != null && tableName != '') { var gr = new GlideRecord(tableName); if (gr.isValid()) { var values = field.value.split(','); gr.addQuery('sys_id', values); gr.query(); var p = 0.0; var rp = 0.0; var price_value_list = []; while (gr.next()) { var price_field = {}; updatePrice(gr, price_field); updateRecurringPrice(gr, price_field); if (price_field.price) p += Number(price_field.price); else price_field.price = 0.0; if (price_field.recurring_price) rp += Number(price_field.recurring_price); else price_field.recurring_price = 0.0; price_value_list.push(price_field); } field.price = p; field.recurring_price = rp; field.price_value_list = price_value_list; } } } function updatePrice(gr, field) { if (gr.isValidField('price')) field.price = gr.getValue('price'); else if (gr.isValidField('u_price')) field.price = gr.getValue('u_price'); } function updateRecurringPrice(gr, field) { if (gr.isValidField('recurring_price')) field.recurring_price = gr.getValue('recurring_price'); else if (gr.isValidField('u_recurring_price')) field.recurring_price = gr.getValue('u_recurring_price'); } function updatePriceOnField(field) { if (field.type == 'boolean' || field.type == 'boolean_confirm') { if (field.value == 'true' || field.value == true) setPrice(field, field._pricing.price_if_checked, field._pricing.recurring_price_if_checked); else setPrice(field, 0, 0); } else if (field.choices) { var valueExistInChoices = false; field.choices.forEach(function(choice) { if (choice.value + '' == field.value + '') { setPrice(field, choice.price, choice.recurring_price); valueExistInChoices = true; } }); if (!valueExistInChoices) setPrice(field, 0, 0); } else if (field._pricing && field._pricing.pricing_implications === true) { if (field.type == 'reference') updatePriceForReferenceTable(field); else if (field.type == 'glide_list') updatePriceForListCollector(field); } } function updatePortalConfigOfDynamicContentItem(dynamicContents, item) { var portalUrl = new global.DynamicCatalogContentUtil().getServicePortalUrl(dynamicContents.model, dynamicContents.content); if (portalUrl) item.portalUrl = portalUrl; } })() ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-09-03 19:02:09</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>01658ac11b736e503b5e657fe54bcbdb</sys_id>
<sys_mod_count>33</sys_mod_count>
<sys_name>HAISP Catalog Item</sys_name>
<sys_package display_value="Global" source="global">global</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="Global">global</sys_scope>
<sys_update_name>sp_widget_01658ac11b736e503b5e657fe54bcbdb</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-03 20:31:49</sys_updated_on>
<template>
<![CDATA[ <div id="sc_cat_item" ng-if="::(data.recordFound && !data.not_for_mobile)" sn-atf-blacklist="IS_SERVICE_CATALOG"> <sp-widget widget="c.orderItemModal" ng-if="c.orderItemModal"></sp-widget> <sp-widget widget="c.saveItemModal" ng-if="c.saveItemModal"></sp-widget> <div class="row" ng-if="::data.sc_cat_item"> <div class="col-xs-12"> <!-- Info Message Box --> <div ng-if="data.hasDraftItem && !data.is_draft_item && !c.data.sc_cat_item.no_save_as_draft" class="alert alert-info" sc-bind-html-compile="::c.draftExistsWithLinkMsg"></div> <div ng-if="c.showAddToWishlist() && !data.is_wishlist_item && !!data.wishlist_item_id && data.wishlist_item_id != data._generatedItemGUID" class="alert alert-info" role="status"> {{::m.itemWishlistMsg}} </div> <div class="alert alert-danger" ng-if="data.isInvalidVersion"> <span> {{::m.deletedOutdatedItemMsg}} </span> <i class="fa fa-close pull-right pointer" aria-label="${Close Notification}" tabindex="0" ng-click="data.isInvalidVersion = false"></i> </div> <!-- Success Message Box --> <div class="alert alert-success" ng-if="data.showMsg" sc-bind-html-compile="m.actionMsg"></div> </div> </div> <div class="row"> <div class="col-md-9"> <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> {{::data.sc_cat_item.name}} </h2> </div> <div class="panel-body"> <p ng-if="::data.sc_cat_item.short_description"> {{::data.sc_cat_item.short_description}} </p> <div class="row" ng-if="c.data.sc_cat_item.picture || c.data.sc_cat_item.trusted_description" ng-class="{'wrapper-md': options.native_mobile != 'true', 'wrapper-sm': options.native_mobile == 'true'}"> <div class="col-sm-4 col-xs-12 no-padder" ng-if="c.data.sc_cat_item.picture"> <div class="wrapper-md text-center"> <i class="fa fa-chevron-left pointer" style="position:absolute; top:50%; left:4%; color:#CECECE" ng-if="options.image_gallery"></i> <img class="img-responsive catalog-item-image" alt="" style="display: inline" ng-src="{{::data.sc_cat_item.picture}}?t=medium" /> <i class="fa fa-chevron-right pointer" style="position:absolute; top:50%; right:4%; color:#CECECE" ng-if="options.image_gallery"></i> <div class="image-gallery padding-top" ng-if="options.image_gallery"> <i class="fa fa-circle active"></i> <i class="fa fa-circle"></i> <i class="fa fa-circle"></i> </div> </div> </div> <div class="col-xs-12 break-word" ng-class="{true: 'col-sm-12 no-padder', false: 'col-sm-8'}[!c.data.sc_cat_item.picture]"> <div class="visible-md visible-lg" ng-class="{false : 'visible-xs visible-sm', true : 'hidden-xs hidden-sm'}[c.options.show_less_description === 'true']" style="overflow : auto"> <div ng-bind-html="::data.sc_cat_item.trusted_description" class="sc-item-description"></div> </div> <div class="col-xs-12 col-sm-12 visible-xs visible-sm" ng-if="c.options.show_less_description === 'true'"> <sc-toggle-data sn-data="::data.sc_cat_item.trusted_description"></sc-toggle-data> </div> </div> </div> <sp-cat-item item="::data.sc_cat_item"></sp-cat-item> <div ng-if="c.mandatory.length > 0" class="sc-cat-item-legend" ng-attr-role="{{c.isNative ? 'text' : undefined}}"> <span class="fa fa-asterisk mandatory" title="${asterisk}" style="padding-right: .25rem"> <span class="sr-only">${asterisk}</span> </span> <span>${Indicates required}</span> </div> <form id="catalog-form"> <!-- display view and model --> <sp-model form-model="::data.sc_cat_item" mandatory="c.mandatory"></sp-model> </form> </div> <div class="b-b wrapper-md" ng-if="::(data.sc_cat_item.content_type == 'external' || data.sc_cat_item.content_type == 'kb' || data.sc_cat_item.content_type == 'dynamic')"> <div ng-if="::data.sc_cat_item.content_type == 'external'" class="wrapper-md m-l-sm"> <a ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}>${Go to Link:} {{::data.sc_cat_item.url}} ➚</a> </div> <div ng-if="::data.sc_cat_item.content_type == 'kb'" class="wrapper-md m-l-sm"> <a ng-href="?id=kb_article&sys_id={{::data.sc_cat_item.kb_article}}">${Go to KB Article:} {{::data.sc_cat_item.kb_article_description}}</a> </div> <div ng-if="::data.sc_cat_item.content_type == 'dynamic'" class="wrapper-md m-l-sm"> <a ng-if="::data.sc_cat_item.portalUrl" ng-href="{{::data.sc_cat_item.portalUrl}}">${Go to Link:} {{::data.sc_cat_item.portalUrl}}</a> <a ng-if="::!data.sc_cat_item.portalUrl" ng-href="{{::data.sc_cat_item.url}}" target={{::data.sc_cat_item.target}}>${Go to Link:} {{::data.sc_cat_item.url}} ➚</a> </div> </div> <div ng-if="c.showAttachments()" class="panel-footer" role="region" data-label="Attachments" aria-label="${Attachments}"> <now-attachments-list template="sp_attachment_single_line"></now-attachments-list> <div ng-class="{'flex-center attachment-height': options.native_mobile == 'true', 'flex-end': options.native_mobile != 'true'}"> <label ng-if="!submitting && !submitted" style="font-weight:normal;cursor:pointer;"> <sp-attachment-button modal="true" required="{{data.sc_cat_item.mandatory_attachment}}"></sp-attachment-button> <span class="fa fa-asterisk mandatory" ng-if="data.sc_cat_item.mandatory_attachment" ng-class="{'mandatory-filled': data.sc_cat_item.mandatory_attachment && (data.sc_cat_item.attachment_submitted || attachments.length > 0)}" style="vertical-align:super" aria-hidden="true"></span> <span ng-class="{'attachment-text' : options.native_mobile == 'true'}" aria-hidden="true">${Add attachments}</span> </label> </div> </div> </div> </div> <div class="col-md-3 sticky"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Form Actions </h3> </div> <div class="panel-body"> <div ng-if="c.showCart()"> <div ng-if="::c.allowOrder()" ng-class="{'form-group': options.native_mobile == 'true'}"> <div ng-if="::c.showQuantitySelector()" class="cat-item-quantity-group"> <label for="catItemQuantity"><b>${Quantity}:</b></label> <div class="cat-item-quantity-box"> <select id="catItemQuantity" title="${Quantity}" ng-disabled="disableControls()" class="m-b sn-select-basic" ng-model="c.quantity" ng-change="c.updateQuantity(data.sc_cat_item)" aria-hidden="true"> <option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}>{{::num.label}}</option> </select> </div> </div> </div> <div class="form-group relative" ng-if="c.options.native_mobile == 'true'"> <div class="" ng-if="c.showPrice()"> <b aria-hidden="true">{{data.sc_cat_item.price_display}}</b> <span class="sr-only">${Price} {{data.sc_cat_item.price_display}}</span> <em aria-hidden="true" ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"> {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}}</em> <span class="sr-only" ng-if="data.sc_cat_item.recurring_price">${Recurring Price} {{data.sc_cat_item.recurring_price_display}} {{data.sc_cat_item.recurring_price_frequency}}</span> </div> <div class="text-muted" ng-if="c.showDeliveryTime()"> ${Delivery Time}: {{::data.sc_cat_item.estimated_delivery_time}} </div> </div> <div class="form-group relative" ng-if="c.options.native_mobile != 'true'"> <div class="form-group" ng-if="c.showPrice()"> <b>${Price}:</b> {{data.sc_cat_item.price_display}}<em ng-if="data.sc_cat_item.recurring_price" class="cat_item_price"> {{data.sc_cat_item.price ? '+' : ''}} {{data.sc_cat_item.recurring_price_display + ' ' + data.sc_cat_item.recurring_price_frequency}} </em> </div> <div class="form-group" ng-if="c.showDeliveryTime()"> <b>${Delivery Time}:</b> {{::data.sc_cat_item.estimated_delivery_time}} </div> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Cart}" tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"> <i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"></i> ${Add to Cart} </button> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Cart}" tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"> <i class="fa fa fa-shopping-cart pull-left cart-icon-padding-top" aria-hidden="true"></i> ${Update Cart} </button> </div> <div class="form-group relative" ng-if="c.showAddToWishlist()"> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Add to Wish List}" ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"> <i class="icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"></i> ${Add to Wish List} </button> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Wish List}" ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="triggerAddToWishlist()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"> <i class=" icon-sp-wishlist pull-left cart-icon-margin" aria-hidden="true"></i> ${Update Wish List} </button> </div> <div class="form-group relative" ng-if="c.options.native_mobile != 'true'"> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Save as Draft}" ng-if="c.showDraftButtons() && !data.is_draft_item" name="save_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"> <i class="icon-save pull-left cart-icon-margin" aria-hidden="true"></i> ${Save as Draft} </button> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="${Update Draft}" ng-if="c.showDraftButtons() && data.is_draft_item" name="update_saved_item" ng-click="triggerSaveItem()" ng-disabled="disableControls()" class="btn btn-default sc-btn form-control text-overflow-ellipsis"> <i class="icon-save pull-left cart-icon-margin" aria-hidden="true"></i> ${Update Draft} </button> </div> <div class="form-group m-b-xs" ng-if="c.options.native_mobile != 'true'"> <button sp-ellipsis-tooltip sp-ellipsis-tooltip-title="{{submitButtonMsg}}" ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" id="submit-btn" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary btn-block text-overflow-ellipsis">{{submitButtonMsg}}</button> <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span> <span ng-if="validating" style="padding-left:4px">${Validating...}</span> </div> <div class="form-group m-b-xs flex-center" ng-if="c.options.native_mobile == 'true' && 1==2"> <button tabindex="0" ng-if="c.showAddCartBtn()" name="add_to_cart" ng-disabled="disableControls()" ng-click="triggerAddToCart()" class="btn btn-default sc-btn native-btn rounded m-r-lg padder-xl"> ${Add to Cart} </button> <button tabindex="0" ng-if="data.is_cart_item" name="update" ng-disabled="disableControls()" ng-click="triggerUpdateCart()" class="btn btn-default sc-btn native-btn rounded m-r-lg padder-xl"> <i class="fa fa fa-shopping-cart sc-order-widget-btn pull-left" aria-hidden="true"></i> ${Update Cart} </button> <div class="form-group m-b-xs"> <button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" id="submit-btn" ng-disabled="disableControls()" ng-click="triggerOnSubmit()" class="btn btn-primary rounded m-l-lg padder-xl">{{submitButtonMsg}}</button> <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span> </div> </div> </div> </div> </div> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> ${Required information} </h3> </div> <div class="panel-body" ng-if="c.options.show_field_validation_messages === 'true'"> <div ng-if="hasMandatory(c.mandatory)" id="required_field_bottom" role="group" aria-label="${Required information - clicking on any button in this group will take you to the corresponding mandatory field}"> <div id="required_information_bottom" ng-if="hasMandatory(c.mandatory)" aria-hidden="true"></div> <div style="display:flex; flex-wrap:wrap; gap:0.25rem;"> <div ng-repeat="f in c.mandatory"> <button for="req_info_bottom_{{::f.name}}" class="btn btn-danger btn-sm" ng-click="getFocus(f)"> {{::f.label}} </button> </div> </div> </div> <p ng-if="!hasMandatory(c.mandatory)"> All required information has been entered. </p> </div> </div> </div> </div> </div> <div ng-if="::!data.recordFound" class="alert alert-info">{{::m.invalidRecordMsg}}</div> <div ng-if="::data.not_for_mobile"> <div class="wrapper-lg flex-center"> ${We're sorry, this item isn't available on mobile} </div> <div class="flex-center"> <img src="not_viewable.png" width="300" /> </div> </div> <now-message key="Added item to shopping cart" value="${Added item to shopping cart}"></now-message> <now-message key="Updated Item to shopping cart" value="${Updated Item to shopping cart}"></now-message> <now-message key="Attachment(s) are not added" value="${Attachment(s) are not added}"></now-message> <now-message key="Please wait, attachment deletion in progress" value="${Please wait, attachment deletion in progress}"></now-message> <now-message key="Leave page?" value="${Leave page?}"></now-message> <now-message key="Changes you made will be lost." value="${Changes you made will be lost.}"></now-message> <now-message key="Cancel" value="${Cancel}"></now-message> <now-message key="Leave" value="${Leave}"></now-message> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Cat Item Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function(data) { // data.cat_item = $sp.getWidget("widget-sc-cat-item-v2"); // data.cat_item = $sp.getWidget("widget-haisp-catalog-item"); data.cat_item = $sp.getWidget("widget-haisp-catalog-item-v2"); })(data); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-07-03 19:01:06</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>0a323a811ba266903b5e657fe54bcb95</sys_id>
<sys_mod_count>50</sys_mod_count>
<sys_name>HAISP Cat Item Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_0a323a811ba266903b5e657fe54bcb95</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-03 19:03:32</sys_updated_on>
<template>
<![CDATA[ <sp-widget widget="data.cat_item"></sp-widget> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope) { var c = this; $scope.active_tab = ""; document.getElementById('certification').style.display = 'none'; document.getElementById('knowledge_area').style.display = 'none'; document.getElementById('time_off_request').style.display = 'none'; $scope.activateTab = function(tabId) { //console.log(tabId) if($scope.active_tab != ""){ document.getElementById('btn_' + $scope.active_tab).classList.remove('btn-primary'); document.getElementById('btn_' + $scope.active_tab).classList.add('btn-default'); document.getElementById($scope.active_tab).style.display = 'none'; } // Show the selected tab content $scope.active_tab = tabId; document.getElementById('btn_' + tabId).classList.add('btn-primary'); document.getElementById('btn_' + tabId).classList.remove('btn-default'); document.getElementById(tabId).style.display = ''; }; // Initialize certification tab as primary $scope.activateTab('certification'); } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.nav-link { border: .1rem solid #005ea2; margin-top: 2rem; margin-left: 2rem; } .nav-link:hover { background-color: #005ea2; color: white; border: .1rem solid #005ea2; } .coming_soon { padding: 40px; } .b { border: .1rem solid #dee5e7; border-top: .1rem solid #005ea2; } .nav-tabs { border-bottom: .1rem solid #005ea2; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>hsi_my_pending_requests</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI My Pending Requests</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.cert_options = {}; data.cert_options.table = "x_g_dh5_hsisat_instructor_certification"; data.cert_options.filter = "status=SECTION_CHIEF^ORstatus=UNIT_CHIEF^ORstatus=REJECTED^instructor_id.user_id="+gs.getUserID(); data.cert_options.fields = "certification_code,instructor_id,status,sys_created_on"; data.cert_options.o = "sys_created_on"; data.cert_options.d = "asc"; data.cert_list = $sp.getWidget('hsi-widget-data-table', data.cert_options); data.know_options = {}; data.know_options.table = "x_g_dh5_hsisat_instructor_skill"; data.know_options.filter = "status=SECTION_CHIEF^ORstatus=UNIT_CHIEF^ORstatus=REJECTED^instructor_id.user_id="+gs.getUserID(); data.know_options.fields = "skill_code,instructor_id,status,sys_created_on"; data.know_options.o = "sys_created_on"; data.know_options.d = "asc"; data.know_list = $sp.getWidget('hsi-widget-data-table', data.know_options); data.timeoff_options = {}; data.timeoff_options.table = "x_g_dh5_hsisat_instructor_schedule"; data.timeoff_options.filter = "unavailability_type=TO^approval=requested^ORapproval=rejected^instructor_id.user_id="+gs.getUserID(); data.timeoff_options.fields = "type_of_leave,instructor_id,start_date,end_date,approval"; data.timeoff_options.o = "sys_created_on"; data.timeoff_options.d = "asc"; data.timeoff_list = $sp.getWidget('hsi-widget-data-table', data.timeoff_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>LSingh</sys_created_by>
<sys_created_on>2025-08-20 16:50:29</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>aff0ad241befaa503b5e657fe54bcb45</sys_id>
<sys_mod_count>6</sys_mod_count>
<sys_name>HSI My Pending Requests</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_aff0ad241befaa503b5e657fe54bcb45</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-09-03 19:03:04</sys_updated_on>
<template>
<![CDATA[ <div class="tabs panel panel-default"> <ul class="nav nav-tabs"> <li class="nav-item"> <a id="btn_certification" class="btn btn-default nav-link" ng-click="activateTab('certification')">Certification</a> </li> <li class="nav-item"> <a id="btn_knowledge_area" class="btn btn-default nav-link" ng-click="activateTab('knowledge_area')">Knowledge Area</a> </li> <li class="nav-item"> <a id="btn_time_off_request" class="btn btn-default nav-link" ng-click="activateTab('time_off_request')">Time Off Request</a> </li> </ul> <div id="certification" class="tab-content"> <sp-widget widget="data.cert_list"></sp-widget> </div> <div id="knowledge_area" class="tab-content"> <sp-widget widget="data.know_list"></sp-widget> </div> <div id="time_off_request" class="tab-content"> <sp-widget widget="data.timeoff_list"></sp-widget> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, spScUtil) { /* widget controller */ const c = this; c.getItemId = function () { return $scope.data.cat_item ? $scope.data.cat_item.sys_id : -1; }; let g_form; $scope.$on("spModel.gForm.initialized", function (_, gFormInstance) { if (gFormInstance.getSysId() !== -1 && gFormInstance.getSysId() !== c.getItemId()) { return; } g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); }); let cleanFailedSubmit; let validationComplete; function registerSubmitListeners() { cleanFailedSubmit = $scope.$on("$sp.service_catalog.form_submit_failed", function () { $scope.submitting = false; }); validationComplete = $rootScope.$on("$sp.service_catalog.form_Validation_complete", function () { if ($scope.validating) { $scope.validating = false; if (typeof $scope.triggerPostValidation === "function") { $scope.triggerPostValidation(); } } $scope.triggerPostValidation = null; }); } registerSubmitListeners(); $scope.focus = function (field) { let focusVar = field.type === "reference" ? "sp_formfield_reference_" : "sp_formfield_"; focusVar += (field.name.startsWith("IO:") ? field._children[0] : field.name); let el = document.getElementById(focusVar); if (field.type === "url" && el.style.display === "none") { el = document.getElementById(focusVar + "_unlock"); } else if (field.type === "sc_multi_row") { el = document.getElementById(field.sys_id + "_add_row"); } else if (field.type === "sc_attachment") { const buttonEl = angular.element(el).find("button")[0]; if (buttonEl) el = buttonEl; } else if (field.type != "html") { let inputEl = angular.element(el).find("input")[0]; if (inputEl) el = inputEl; } if (el) el.focus(); }; $scope.handleSubmit = function (timeout) { $scope.$evalAsync(function () { if (g_form && !$scope.submitting) { $scope.submitting = true; if (!spScUtil.isRegexDone($scope.data.cat_item._fields)) { $scope.submitting = false; $scope.validating = true; $scope.triggerPostValidation = $scope.handleSubmit; } } else if (!g_form.submit()) { timeout = timeout || 1000; $timeout(function () { $scope.$broadcast("$sp.service_catalog.form_submit_failed", { action_name: "submit", }, timeout); }); } }); return false; }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.sticky { position: sticky; top: 2rem; } .mandatory-help { margin-bottom: 1.5rem; } .required-fields { display: flex; flex-wrap: wrap; gap: 0.5rem; } </css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-catalog-item</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Catalog Item</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, options, input) { data.sys_id = "a63ab6661b3b9a905c8ccbb6624bcbe4"; // $sp.getParameter("sys_id") data.cat_item = $sp.getCatalogItem(data.sys_id, true); })($sp, data, options, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-09-03 16:42:24</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>9555a1451bfb2e503b5e657fe54bcb57</sys_id>
<sys_mod_count>47</sys_mod_count>
<sys_name>HAISP Catalog Item</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_9555a1451bfb2e503b5e657fe54bcb57</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-09-03 18:29:52</sys_updated_on>
<template>
<![CDATA[ <form class="row"> <div class="col-md-8"> <div id="catalog-form" class="panel panel-default"> <header class="panel-heading"> <h2 class="panel-title">{{::data.cat_item.name}}</h2> </header> <div class="panel-body"> <p ng-if="::data.cat_item.short_description" class="text-muted"> {{::data.cat_item.short_description}} </p> <div class="mandatory-help" ng-if="mandatory.length"> <span class="fa fa-asterisk mandatory" title="${asterisk}"></span> <span class="sr-only">${asterisk}</span> <span>${Indicates required}</span> </div> <sp-model form-model="::data.cat_item" mandatory="mandatory"></sp-model> </div> </div> </div> <div class="col-md-4 sticky"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Actions </h3> </div> <div class="panel-body"> <button type="submit" class="btn btn-primary btn-block" ng-click="handleSubmit()"> Submit </button> </div> </div> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Required Information </h3> </div> <div class="panel-body"> <p ng-if="!mandatory.length"> All required information has been entered. </p> <div class="required-fields"> <button ng-repeat="m in mandatory" class="btn btn-danger btn-xs" ng-click="focus(m)"> {{m.label}} </button> </div> </div> </div> </div> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $location) { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>ul { list-style: none; padding: 0; } a { display: inline-block; padding-block: 1rem; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>quick_links</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Quick Links</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the "data" object */ /* e.g., data.table = $sp.getValue("table"); */ var instance = gs.getProperty("instance_name"); var links = []; var isHSIAdmin = SecurityUtils.isApplicationAdministrator(); var isInstructor = SecurityUtils.isInstructorUser(); var isSectionChief = SecurityUtils.isCurrentUserMemberOfGroup(SecurityUtils.GROUP_SECTION_CHIEFS); var isUnitChief = SecurityUtils.isCurrentUserMemberOfGroup(SecurityUtils.GROUP_UNIT_CHIEFS); var isClassCoordinator = SecurityUtils.isClassCoordinator(); var isScheduler = SecurityUtils.isSchedulerUser(); var isProgramManager = SecurityUtils.isProgramManager(); data.isStudent = (SecurityUtils.isStudentUser() && !gs.hasRole("admin")); if (isHSIAdmin || isScheduler || isProgramManager) { links.push({ label: "All Requests", url: "?id=haisp_instructor_requests" }); } if (isHSIAdmin) { links.push({ label: "All Pending Requests", url: "?id=haisp_pending_requests" }); } if (isInstructor) { links.push({ label: "My Requests", url: "?id=haisp_my_pending_requests" }); } if (isUnitChief) { links.push({ label: "My Pending Approvals", url: "?id=haisp_my_pending_approvals" }); } if (isSectionChief) { links.push({ label: "My Pending Approvals", url: "?id=haisp_my_pending_approvals" }); } if (isHSIAdmin || isClassCoordinator || isScheduler || isProgramManager) { links.push({ label: "Scheduler", url: "?id=haisp_class_details" }); } if (isHSIAdmin || isScheduler) { links.push({ label: "Import Facility Assignments", url: "?id=hsi_upload_sass_report" }); } if (isHSIAdmin || isScheduler) { links.push({ label: "Import Course List", url: "?id=hsi_import_course_list" }); } if (isHSIAdmin || isScheduler) { links.push({ label: "Import Student List", url: "?id=haisp_import_class_enrollment" }); } if (isHSIAdmin || isClassCoordinator || isScheduler || isProgramManager) { links.push({ label: "Add Announcement", url: "?id=haisp_announcement&sys_id=-1" }); } data.links = links; })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>SAshraf</sys_created_by>
<sys_created_on>2025-03-19 20:08:44</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>690909c31b54e2103b5e657fe54bcbc1</sys_id>
<sys_mod_count>102</sys_mod_count>
<sys_name>HSI Quick Links</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_690909c31b54e2103b5e657fe54bcbc1</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-09-03 17:34:08</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default" ng-if="!c.data.isStudent"> <div class="panel-heading"> <h3 class="panel-title">Quick Links</h3> </div> <nav class="panel-body" aria-label="quick links"> <ul> <li ng-repeat="link in data.links"><a href="{{link.url}}">{{link.label}}</a></li> </ul> </nav> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; var new_url = '?id=haisp_homepage'; $rootScope.$on("sp.form.record.updated", () => location.search = new_url); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Announcement Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ if (SecurityUtils.isApplicationAdministrator()) { data.query = "announcement_for=academy"; } else if (SecurityUtils.isClassCoordinator() || SecurityUtils.isProgramManager() || SecurityUtils.isSchedulerUser()) { data.query = "announcement_for=class"; } if (GeneralUtils.isEmpty(data.query)) return; data.announcement_widget = $sp.getWidget('widget-form', { table: Constants.ANNOUNCEMENT_TABLE, query: data.query, }); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-08-05 17:00:29</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>5753d8fb1b8faa145c8ccbb6624bcbee</sys_id>
<sys_mod_count>8</sys_mod_count>
<sys_name>HAISP Announcement Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_5753d8fb1b8faa145c8ccbb6624bcbee</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-02 19:08:21</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.query" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <sp-widget ng-if="data.query" widget="c.data.announcement_widget"></sp-widget> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; $scope.submit = function (event) { $scope.submitting = true; const fd = new FormData(event.target); const file = fd.get("file"); if (!file) return; const reader = new FileReader(); reader.onload = function (e) { const data = new Uint8Array(e.target.result); const workbook = XLSX.read(data, { cellDates: true, type: "array" }); const sheetName = workbook.SheetNames[0]; const worksheet = workbook.Sheets[sheetName]; const rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, raw: false, dateNF: "M/D/YYYY HH:MM" }) .filter((row) => row.length && row.length > 1); $scope.thead = rows.shift(); $scope.rows = rows; $scope.submitting = false; }; reader.readAsArrayBuffer(file); }; function transformData () { return new Promise((resolve, reject) => { try { const importRows = []; if ($scope.rows.length) { const { FIELDS } = $scope.data; for (let i = 0; i < $scope.rows.length; i++) { const importRow = {}; const row = $scope.rows[i]; for (let j = 0; j < FIELDS.length; j++) { importRow[FIELDS[j]] = row[j]; } importRows.push(importRow); } } resolve(importRows); } catch (err) { reject(err); } }); } function send(data) { c.data.dataToImport = data; c.server.update(); spUtil.addInfoMessage("Your request has been submitted"); setTimeout(() => { location.search = "?id=haisp_homepage"; }, 3000); } $scope.import = function () { $scope.submitting = true; transformData() .then((data) => send(data)) .catch(() => $scope.submitting = false); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>th, td { white-space: nowrap; } ::file-selector-button { color: $brand-primary; background-color: #fff; border: 1px solid $brand-primary; padding: 6px 12px; border-radius: 4px; &:hover, &:focus { color: darken($brand-primary, 10%); border-color: darken($brand-primary,10%); } } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-import-courses</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Import Courses</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { const log = new Logger("Import Courses and Assigned Facilities", "Portal Widget"); data.canImport = SecurityUtils.isClassAdmin() || SecurityUtils.isSchedulerUser(); data.FIELDS = [ "u_site", "u_category", "u_program", "u_class", "u_return_date", "u_allocation_agency", "u_belonging_agency", "u_week_day", "u_training_day", "u_date", "u_start", "u_end", "u_group", "u_org", "u_lp_number", "u_lp_name", "u_course_id", "u_session_number", "u_session_name", "u_facility_ids", ]; if (input?.dataToImport) { for (let i = 0, row; (row = input.dataToImport[i]); i++) { try { GlideRecordUtils.save(new GlideRecord("x_g_dh5_hsisat_course_staging"), row); } catch (err) { log.error("Unable to save row " + (i + 1) + ": " + err.message, "import_data"); } } } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-12 18:32:19</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>9fb8e8421b93aa54065762cae54bcb64</sys_id>
<sys_mod_count>32</sys_mod_count>
<sys_name>HAISP Import Courses</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_9fb8e8421b93aa54065762cae54bcb64</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-09-02 19:07:06</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.canImport" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form ng-if="data.canImport" ng-submit="submit($event)" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Import Courses and Assigned Facilities </h2> </div> <fieldset class="panel-body" ng-disabled="submitting"> <div class="form-group"> <label for="file">Upload Courses and Assigned Facilities</label> <input id="file" type="file" name="file" accept=".csv,.xlsx,.xls" required> </div> <footer> <button type="submit" class="btn btn-default" ng-class="{'btn-primary': !rows.length}"> Preview Imported Data </button> <button type="button" class="btn btn-primary" ng-if="rows.length" ng-click="import()"> Import Data </button> </footer> </fieldset> <div class="table-responsive"> <table class="table table-striped" ng-if="rows.length"> <thead> <tr> <th scope="col">Row #</th> <th ng-repeat="cell in thead" scope="col">{{cell}}</th> </tr> </thead> <tbody> <tr ng-if="!rows.length"> <td colspan="{{thead.length + 1}}">There are no rows of data to be previewed</td> </tr> <tr ng-repeat="row in rows"> <th scope="row">{{$index + 1}}</th> <td ng-repeat="cell in row track by $index">{{cell}}</td> </tr> </tbody> </table> </div> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { function deepMerge(object) { return JSON.parse(JSON.stringify(object)); } const c = this; function getSortData() { $scope.sort = { user_id: (() => { if ($scope.data.sort.field !== "user_id") { return { sort: "none", label: "Sort by name" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sorted by name, ascending" }; } else { return { sort: "descending", label: "Sorted by name, descending" }; } })(), title: (() => { if ($scope.data.sort.field !== "title") { return { sort: "none", label: "Sort by title" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sorted by title, ascending" }; } else { return { sort: "descending", label: "Sorted by title, descending" }; } })(), aor_code: (() => { if ($scope.data.sort.field !== "aor_code") { return { sort: "none", label: "Sort by unit" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sorted by unit, ascending" }; } else { return { sort: "descending", label: "Sorted by unit, descending" }; } })(), location_code: (() => { if ($scope.data.sort.field !== "location_code") { return { sort: "none", label: "Sort by location" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sorted by location, ascending" }; } else { return { sort: "descending", label: "Sorted by location, descending" }; } })(), email: (() => { if ($scope.data.sort.field !== "email") { return { sort: "none", label: "Sort by email" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sorted by email, ascending" }; } else { return { sort: "descending", label: "Sorted by email, descending" }; } })(), business_phone: (() => { if ($scope.data.sort.field !== "business_phone") { return { sort: "none", label: "Sort by business phone" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sorted by business phone, ascending" }; } else { return { sort: "descending", label: "Sorted by business phone, descending" }; } })(), }; } getSortData(); const defaultFilters = { name: "", unit_code: "", location_code: "", certification_code: "", is_active: "", }; $scope.filters = { ...c.data.filters } || deepMerge(defaultFilters); $scope.paginate = function() { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.filter = function(action) { c.data.action = "filter"; if (action === "clear") { $scope.filters = deepMerge(defaultFilters); } c.data.filters = $scope.filters; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.action = "sort"; c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>th, td { white-space: nowrap; } [scope="row"] { font-weight: normal; } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } } .btn-clear { font-weight: bold; padding: 0; text-align: left; } [aria-sort] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .pagination { margin: 0; } .table-footer { display: flex; flex-wrap: wrap; gap: 0.5rem; align-items: center; justify-content: space-between; } .badge { background-color: var(--badge-color, #777); box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); color: var(--badge-text); font-size: inherit; font-weight: normal; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-instructor-list</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Instructor List</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.page = 1; data.batchSize = 10; data.filters = Object.assign( { name: "", unit_code: "", location_code: "", certification_code: "", is_active: "", }, options.filters ); if (input) { if (input.action === "paginate") { data.page = Math.max(input.page, 1); } if (input.action === "filter") { data.page = 1; } if (input.action === "sort") { data.page = 1; } data.filters = { ...data.filters, ...input.filters }; } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "user_id", asc: true }); function getEncodedQuery(filters) { const filter = []; if (GeneralUtils.hasValue(filters.name)) { filter.push("user_id.nameLIKE" + filters.name); } if (GeneralUtils.hasValue(filters.unit_code)) { filter.push("aor_code=" + filters.unit_code); } if (GeneralUtils.hasValue(filters.location_code)) { filter.push("location_code=" + filters.location_code); } if (GeneralUtils.hasValue(filters.is_active)) { filter.push("active=" + filters.is_active); } if (GeneralUtils.hasValue(filters.certification_code)) { filter.push("RLQUERYx_g_dh5_hsisat_instructor_certification.instructor_id,>=1^certification_code=" + filters.certification_code + "^approvalINapproved,not requested^ENDRLQUERY"); } return filter.join("^"); } const startIndex = (data.page - 1) * data.batchSize; const endIndex = (data.page - 1) * data.batchSize + data.batchSize; const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); const filter = getEncodedQuery(data.filters); if (GeneralUtils.hasValue(filter)) { instructorGR.addEncodedQuery(filter); } if (data.sort.asc) { instructorGR.orderBy(data.sort.field); } else { instructorGR.orderByDesc(data.sort.field); } instructorGR.chooseWindow(startIndex, endIndex); instructorGR.query(); data.totalCount = instructorGR.getRowCount(); const instructors = []; while (instructorGR.next()) { const backgroundColor = GlideRecordUtils.getValue(instructorGR, "aor_code.aor_color") || "ffffff"; instructors.push({ ...GlideRecordUtils.toJson(instructorGR, { full: true }), backgroundColor: "#" + backgroundColor, borderColor: (backgroundColor === "ffffff" || GeneralUtils.isEmpty(backgroundColor)) ? "#ccc" : ("#" + backgroundColor), textColor: getTextColorForBackground(hexToRgb(backgroundColor)), }); } data.instructors = instructors; const unitGR = new GlideRecord(Constants.AREA_OF_RESPONSIBILITY_CODE_TABLE); unitGR.addQuery("is_active", Constants.TRUE); unitGR.orderBy("name"); unitGR.query(); const unitCodes = []; while (unitGR.next()) { unitCodes.push(GlideRecordUtils.toJson(unitGR)); } data.unitCodes = unitCodes; const locationGR = new GlideRecord(Constants.LOCATION_CODE_TABLE); locationGR.addQuery("is_active", Constants.TRUE); locationGR.orderBy("name"); locationGR.query(); const locationCodes = []; while (locationGR.next()) { locationCodes.push(GlideRecordUtils.toJson(locationGR)); } data.locationCodes = locationCodes; const certificationGR = new GlideRecord(Constants.CERTIFICATION_CODE_TABLE); certificationGR.addQuery("is_active", Constants.TRUE); certificationGR.orderBy("name"); certificationGR.query(); const certificationCodes = []; while (certificationGR.next()) { certificationCodes.push(GlideRecordUtils.toJson(certificationGR)); } data.certificationCodes = certificationCodes; data.showAddInstructorAction = InstructorUtils.canCreateRecord(instructorGR); function hexToRgb(hex) { // Remove the hash (#) if present hex = hex.replace(/^#/, ""); // Parse the red, green, and blue components const r = parseInt(hex.substring(0, 2), 16) || 255; // red const g = parseInt(hex.substring(2, 4), 16) || 255; // green const b = parseInt(hex.substring(4, 6), 16) || 255; // blue return [r, g, b]; } function getTextColorForBackground([r, g, b] = []) { // Normalize RGB values const normalizedR = r / 255; const normalizedG = g / 255; const normalizedB = b / 255; // Apply luminance formula components const calcComponent = (value) => value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4); const luminance = 0.2126 * calcComponent(normalizedR) + 0.7152 * calcComponent(normalizedG) + 0.0722 * calcComponent(normalizedB); // Compare luminance against threshold (0.5) return luminance > 0.5 ? "#1b1b1b" : "#ffffff"; } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-19 18:45:48</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>60a178d41ba36650065762cae54bcb74</sys_id>
<sys_mod_count>27</sys_mod_count>
<sys_name>HAISP Instructor List</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_60a178d41ba36650065762cae54bcb74</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-29 19:43:42</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title">All Instructors</h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li aria-current="page" class="active">Instructors</li> </ol> <div class="row"> <div class="col-md-3"> <form> <h3 class="h4">Search Filters</h3> <fieldset> <div class="form-group"> <label for="search_name">Instructor Name</label> <input id="search_name" type="text" class="form-control" ng-model="filters.name"> </div> <div class="form-group"> <label for="search_unit_code">Unit</label> <select id="search_unit_code" class="form-control" ng-model="filters.unit_code"> <option value="">All Units</option> <option ng-repeat="code in data.unitCodes" value="{{code.sys_id}}">{{code.name}}</option> </select> </div> <div class="form-group"> <label for="search_location_code">Location</label> <select id="search_location_code" class="form-control" ng-model="filters.location_code"> <option value="">All Locations</option> <option ng-repeat="code in data.locationCodes" value="{{code.sys_id}}">{{code.name}}</option> </select> </div> <div class="form-group"> <label for="search_certification_code">Certification</label> <select id="search_certification_code" class="form-control" ng-model="filters.certification_code"> <option value="">All Certifications</option> <option ng-repeat="code in data.certificationCodes" value="{{code.sys_id}}">{{code.name}}</option> </select> </div> <div class="form-group"> <label for="search_is_active">Active</label> <select id="search_is_active" class="form-control" ng-model="filters.is_active"> <option value="">All Active/Inactive</option> <option value="1">Active Only</option> <option value="0">Inactive Only</option> </select> </div> <footer> <button type="submit" class="btn btn-primary" ng-click="filter('filter')"> Search </button> <button type="button" class="btn btn-default" ng-click="filter('clear')"> Clear Filters </button> </footer> </fieldset> </form> </div> <div class="col-md-9"> <h3 class="h4"> Search Results </h3> <div class="table-responsive"> <table class="table table-striped table-hover"> <thead> <tr> <th scope="col" aria-sort="{{sort['user_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['user_id'].label}}" ng-click="sortData($event, 'user_id')"> Name <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['title'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['title'].label}}" ng-click="sortData($event, 'title')"> Title <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['email'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['email'].label}}" ng-click="sortData($event, 'email')"> Email <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['business_phone'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['business_phone'].label}}" ng-click="sortData($event, 'business_phone')"> Business Phone <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['aor_code'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['aor_code'].label}}" ng-click="sortData($event, 'aor_code')"> Unit <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['location_code'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['location_code'].label}}" ng-click="sortData($event, 'location_code')"> Location <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> </tr> </thead> <tbody> <tr ng-repeat="instructor in data.instructors"> <th scope="row"> <a href="?id=haisp_instructor_profile&sys_id={{instructor.sys_id}}"> {{instructor.user_id.label}} </a> </th> <td> {{instructor.title}} </td> <td> {{instructor.email}} </td> <td> {{instructor.business_phone}} </td> <td> <span class="badge" style="--badge-color: {{instructor.backgroundColor}}; --badge-text: {{instructor.textColor || '#1b1b1b'}}">{{instructor.aor_code.label}}</span> </td> <td> {{instructor.location_code.label}} </td> </tr> <tr ng-if="!data.instructors.length"> <td colspan="4">No instructors matched the selected filters</td> </tr> </tbody> </table> </div> <div class="table-footer"> <uib-pagination total-items="data.totalCount" ng-model="data.page" ng-change="paginate()" items-per-page="data.batchSize" class="pagination-sm" boundary-link-numbers="true"></uib-pagination> <a ng-if="data.showAddInstructorAction" class="btn btn-primary" href="?id=haisp_instructor_new">Add Instructor</a> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>h2 { font-size: clamp(2rem, 4vw, 3rem); margin: 0; } .banner { background-color: #fff; display: flex; align-items: center; flex-wrap: wrap; gap: 1rem; padding: 1rem; img { aspect-ratio: 1; width: 15rem; } @media (width < 991px) { justify-content: center; text-align: center; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Banner</name>
<option_schema/>
<public>true</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-05-13 00:01:39</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>6cb480a01ba12a50065762cae54bcbe7</sys_id>
<sys_mod_count>39</sys_mod_count>
<sys_name>HSI Banner</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_6cb480a01ba12a50065762cae54bcbe7</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-28 21:15:42</sys_updated_on>
<template>
<![CDATA[ <div class="banner"> <div class="banner-img"> <img style="height:148px;width:150px" src="/x_g_dh5_hsisat.HSI_Academy_Coin_Logo.png" /> </div> <div class="wordbox"> <h2>Welcome to the HSI Academy Portal</h2> </div> </div> ]]>
</template>
</sp_widget>
<sp_header_footer action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function ($rootScope, $http, $scope, snRecordWatcher, spUtil, $location, $uibModal, cabrillo, $timeout) { // remove the SN provided bootstrap // const bs = document.querySelector("[href*=bootstrap]"); // if (bs) bs.remove(); $scope.userID = $scope.user.sys_id; if (cabrillo.isNative()) $scope.isViewNative = true; $scope.openPopUp = function() { var url = "$chat_support.do?queueID=" + $scope.data.connect_support_queue_id; var popup = window.open (url, "popup", "width=900, height=600"); }; $scope.openLogin = function () { $scope.modalInstance = $uibModal.open({ templateUrl: 'modalLogin', scope: $scope }); }; $rootScope.$on('sp.avatar_changed', function() { $scope.userID = ""; $timeout(function(){ $scope.userID = $scope.user.sys_id; }); }); $scope.isHomepage = function() { if (!$scope.page.id) return true; if ($scope.page.id == $scope.portal.homepage_dv) return true; return false; }; $scope.impersonate = function(user_name) { if (!user_name) return; $http.post('/api/now/ui/impersonate/' + user_name, {}).success(function() { $scope.show_error = false; window.location = "/"; }).error(function(response) { if (response.error) { $scope.show_error = true; $scope.error = response.error; $log.error("Impersonate failed", response.error); } }); } } ]]>
</client_script>
<controller_as>c</controller_as>
<css>#top { .navbar-default .navbar-brand, .navbar-default .navbar-nav > li > a { color: $navbar-inverse-link-color; &:hover { color: $text-color; } } } .navbar-brand-logo { > * { display: inline; } > * + * { margin-left: 1rem; } h1 { @media (width < 991px) { position: absolute; left: -9999vw; } } } div#custom_header_text { display: block; position: fixed; top: $sp-logo-max-height / 2; left: $sp-logo-max-width - 200px; } </css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>haisp-header</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element) { $(element).on('click.nav','.navbar-collapse.in',function(e) { var target = $(e.target); if (target.is('a')) { // collapse mobile nav if clicked an anchor $(this).removeClass('in').addClass('collapse'); return; } // if neither target nor parent is an anchor, do nothing if (!target.parent().is('a')) return; // collapse mobile nav if target is part of a submenu if (target.parents("ul.dropdown-menu").length > 0) $(this).removeClass('in').addClass('collapse'); }); } ]]>
</link>
<name>HAISP Header</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.connect_support_queue_id = $sp.getValue("sp_chat_queue"); data.login_page = $sp.getValue("login_page"); data.profileBtnMsg = gs.getMessage("User options"); var menu = $sp.getValue("sp_rectangle_menu"); data.menu = $sp.getWidgetFromInstance(menu); if (data.menu && data.menu.data) { data.menu.data.replace = true; // Hide login if menu already has link to login data.hasLogin = false; if (data.menu.data.menu.items) { for (var i in data.menu.data.menu.items) { var item = data.menu.data.menu.items[i]; if (item.type == "page" && item.sp_page == data.login_page) data.hasLogin = true; } } } data.loginWidget = $sp.getWidgetFromInstance("login-modal"); data.canDelegate = SecurityUtils.isSectionChief() || SecurityUtils.isUnitChief() || SecurityUtils.isProgramManager(); })(); ]]>
</script>
<servicenow>false</servicenow>
<static>false</static>
<sys_class_name>sp_header_footer</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-02-20 16:13:35</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>718051de1b3f12903b5e657fe54bcb70</sys_id>
<sys_mod_count>50</sys_mod_count>
<sys_name>HAISP Header</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_header_footer_718051de1b3f12903b5e657fe54bcb70</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-28 21:15:24</sys_updated_on>
<template>
<![CDATA[ <div id="top"> <nav class="navbar-default" ng-class="::{'navbar':!isViewNative, 'is-native': isViewNative}" role="navigation"> <div ng-show="::!isViewNative" class="navbar-header"> <a class="navbar-brand" ng-if="::!portal.logo" href="?id={{::portal.homepage_dv}}"><span>{{::portal.title}}</span></a> <a class="navbar-brand navbar-brand-logo" ng-if="::portal.logo" href="?id={{::portal.homepage_dv}}"> <img ng-src="{{::portal.logo}}" /> <h1 class="h4">HSI Academy Portal</h1> </a> <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#sp-nav-bar"> <span class="sr-only">${Toggle navigation}</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> </div> <div sp-navbar-toggle="" class="collapse navbar-collapse navbar-right" id="sp-nav-bar"> <!-- Include The Menu --> <sp-widget widget="data.menu"></sp-widget> <ul ng-if="::(!user.logged_in && page.id != portal.login_page_dv && !data.hasLogin)" class="nav navbar-nav"> <li><a href ng-click="openLogin()">${Login}</a></li> </ul> <ul ng-if="::user.logged_in" class="nav navbar-nav"> <!-- chat, avatar, and logout --> <li ng-if="::data.connect_support_queue_id"><a href ng-click="openPopUp()">${Live Chat}</a></li> <li class="dropdown hidden-xs"> <a href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown"> <span class="navbar-avatar"><sn-avatar class="avatar-small-medium" primary="userID" /></span> <span class="visible-lg-inline">{{::user.name}}</span> </a> <ul class="dropdown-menu"> <li><a ng-if="data.is_impersonating" ng-click="impersonate(data.impersonating)"><i class="fa fa-reply" style="margin-right: 5px;"></i>${End Impersonation}</a></li> <li><a ng-href="?id=user_profile&sys_id={{::user.sys_id}}">${Profile}</a></li> <li><a ng-if="data.canDelegate" href="?id=haisp_delagation">${Add Delegate}</a></li> <li><a href="{{::portal.logoutUrl}}">${Logout}</a></li> </ul> </li> <li class="visible-xs-block"><a ng-href="?id=user_profile&sys_id={{::user.sys_id}}"><span class="navbar-avatar"><sn-avatar class="avatar-small-medium" primary="userID" /></span>{{::user.name}}</a> </li> <li class="visible-xs-block"><a href="{{::portal.logoutUrl}}">${Logout}</a></li> </ul> </div> </nav> </div> ]]>
</template>
</sp_header_footer>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; function deepMerge(object) { return JSON.parse(JSON.stringify(object)); } function getSortData() { $scope.sort = { class_number: (() => { if ($scope.data.sort.field !== "class_number") { return { sort: "none", label: "Sort by class number" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class number, ascending" }; } else { return { sort: "descending", label: "Sort by class number, descending" }; } })(), location_code: (() => { if ($scope.data.sort.field !== "location_code") { return { sort: "none", label: "Sort by location" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by location, ascending" }; } else { return { sort: "descending", label: "Sort by location, descending" }; } })(), state: (() => { if ($scope.data.sort.field !== "state") { return { sort: "none", label: "Sort by status" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by status, ascending" }; } else { return { sort: "descending", label: "Sort by status, descending" }; } })(), start_date: (() => { if ($scope.data.sort.field !== "start_date") { return { sort: "none", label: "Sort by class start date" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class start date, ascending" }; } else { return { sort: "descending", label: "Sort by class start date, descending" }; } })(), class_coordinator_user_id: (() => { if ($scope.data.sort.field !== "class_coordinator_user_id") { return { sort: "none", label: "Sort by class coordinator" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class coordinator, ascending" }; } else { return { sort: "descending", label: "Sort by class coordinator, descending" }; } })(), }; } getSortData(); const defaultFilters = { class_number: "", location_code: "", state: "", mine: "1" }; $scope.filters = { ...c.data.filters } || deepMerge(defaultFilters); $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.filter = function (action) { c.data.action = "filter"; if (action === "clear") { $scope.filters = deepMerge(defaultFilters); } c.data.filters = $scope.filters; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, } getSortData(); c.data.action = "sort"; c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } } .btn-clear { font-weight: bold; padding: 0; text-align: left; } [aria-sort] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .pagination { margin: 0; } .table-footer { display: flex; flex-wrap: wrap; align-items: center; justify-content: space-between; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-all-classes</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP All Classes</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, options, input) { data.page = 1; data.batchSize = 25; data.filters = Object.assign( { class_number: "", location_code: "", state: "", mine: "1" }, options.filters ); if (input) { if (GeneralUtils.areEqual(input.action, "paginate")) { data.page = Math.max(input.page, 1); } if (GeneralUtils.areEqual(input.action, "filter")) { data.page = 1; } if (GeneralUtils.areEqual(input.action, "sort")) { data.page = 1; } data.filters = { ...data.filters, ...input.filters }; } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "start_date", asc: false }); function getEncodedQuery(filters) { const filter = []; if (GeneralUtils.hasValue(filters.class_number)) { filter.push("class_numberLIKE" + filters.class_number); } if (GeneralUtils.hasValue(filters.location_code)) { filter.push("location_code=" + filters.location_code); } if (GeneralUtils.hasValue(filters.state)) { filter.push("state=" + filters.state); } if (filters.mine == "2") { filter.push(ClassUtils.getMyClassesRefQual(gs.getUserID())); } return filter.join("^"); } const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; data.classes = []; const classGR = new GlideRecord(Constants.CLASS_TABLE); const filter = getEncodedQuery(data.filters); if (GeneralUtils.hasValue(filter)) { classGR.addEncodedQuery(filter); } if (data.sort.asc) { classGR.orderBy(data.sort.field); } else { classGR.orderByDesc(data.sort.field); } classGR.chooseWindow(startIndex, endIndex); classGR.query(); data.totalCount = classGR.getRowCount(); while (classGR.next()) { data.classes.push({ ...GlideRecordUtils.toJson(classGR, { full: true }), state: GlideRecordUtils.getDisplayValue(classGR, "state"), }); } data.showCreateClass = true; data.location_codes = []; const locationGR = new GlideRecord(Constants.LOCATION_CODE_TABLE); locationGR.addQuery("is_active", true); locationGR.orderBy("name"); locationGR.query(); while (locationGR.next()) { data.location_codes.push(GlideRecordUtils.toJson(locationGR)); } })($sp, data, options, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-30 18:36:20</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>129fe5311b0f62d03b5e657fe54bcbd1</sys_id>
<sys_mod_count>69</sys_mod_count>
<sys_name>HAISP All Classes</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_129fe5311b0f62d03b5e657fe54bcbd1</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-08-28 17:14:44</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Classes </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li aria-current="page" class="active">Classes</li> </ol> <div class="row"> <div class="col-md-3"> <form> <h3 class="h4"> Search Filters </h3> <fieldset> <div class="form-group"> <label for="class_number">Class Number</label> <input id="class_number" class="form-control" ng-model="filters.class_number"> </div> <div class="form-group"> <label for="location_code">Location</label> <select id="location_code" class="form-control" ng-model="filters.location_code"> <option value="">All Locations</option> <option ng-repeat="code in data.location_codes" value="{{code.sys_id}}">{{code.name}}</option> </select> </div> <div class="form-group"> <label for="state">Status</label> <select id="state" class="form-control" ng-model="filters.state"> <option value="">All Statuses</option> <option value="1">Draft</option> <option value="3">Scheduled</option> <option value="4">In Progress</option> <option value="5">Completed</option> <option value="-1">Cancelled</option> </select> </div> <div class="form-group"> <label for="mine">Show Classes</label> <select id="mine" class="form-control" ng-model="filters.mine"> <option value="1">All Classes</option> <option value="2">My Classes</option> </select> </div> <footer> <button type="submit" class="btn btn-primary" ng-click="filter('filter')"> Search </button> <button type="button" class="btn btn-default" ng-click="filter('clear')"> Clear Filters </button> </footer> </fieldset> </form> </div> <div class="col-md-9"> <h3 class="h4"> Search Results </h3> <div class="table-responsive"> <table class="table table-striped table-hover"> <thead> <tr> <th scope="col" aria-sort="{{sort['class_number'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['class_number'].label}}" ng-click="sortData($event, 'class_number')"> Class Number <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['location_code'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['location_code'].label}}" ng-click="sortData($event, 'location_code')"> Location <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['state'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['state'].label}}" ng-click="sortData($event, 'state')"> Status <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['start_date'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['start_date'].label}}" ng-click="sortData($event, 'start_date')"> Class Start Date <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['class_coordinator_user_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['class_coordinator_user_id'].label}}" ng-click="sortData($event, 'class_coordinator_user_id')"> Class Coordinator <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> </tr> </thead> <tbody> <tr ng-if="!data.classes.length"> <td colspan="5">No classes meet the selected criteria</td> </tr> <tr ng-repeat="row in data.classes"> <th scope="row"> <a href="?id=haisp_class_homepage&class_id={{row.sys_id}}">{{row.class_number || 'No Class Number'}}</a> </th> <td>{{row.location_code.label}}</td> <td>{{row.state}}</td> <td>{{row.start_date|date:'MM/dd/yyyy'}}</td> <td>{{row.class_coordinator_user_id.label}}</td> </tr> </tbody> </table> </div> <div class="table-footer"> <uib-pagination total-items="data.totalCount" ng-model="data.page" ng-change="paginate()" items-per-page="data.batchSize" class="pagination-sm" boundary-link-numbers="true"></uib-pagination> <div ng-if="data.showCreateClass"> <a class="btn btn-primary" href="?id=haisp_sc_cat_item&sys_id=a63ab6661b3b9a905c8ccbb6624bcbe4">Create New Class</a> </div> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; $scope.from = encodeURIComponent(location.search); $scope.data.sort = { field: "start", asc: true, }; function getSortData() { $scope.sort = { name: (() => { if ($scope.data?.sort.field !== "name") { return { sort: "none", label: "Sort by student name" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by student name, ascending" }; } else { return { sort: "descending", label: "Sorted by student name, descending" }; } })(), sass_student_id: (() => { if ($scope.data?.sort.field !== "sass_student_id") { return { sort: "none", label: "Sort by SASS Student ID" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by SASS Student ID, ascending" }; } else { return { sort: "descending", label: "Sorted by SASS Student ID, descending" }; } })(), email: (() => { if ($scope.data?.sort.field !== "email") { return { sort: "none", label: "Sort by student email" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by student email, ascending" }; } else { return { sort: "descending", label: "Sorted by student email, descending" }; } })(), group: (() => { if ($scope.data?.sort.field !== "group") { return { sort: "none", label: "Sort by assigned group" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by assigned group, ascending" }; } else { return { sort: "descending", label: "Sorted by assigned group, descending" }; } })(), }; } if ($scope.data.classId) getSortData(); $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field: field, asc: order === "ascending" ? false : true, }; getSortData(); $scope.data.students.sort((a, b) => { if (order === "ascending") { return b[field] > a[field] ? 1 : -1; } else { return a[field] > b[field] ? 1 : -1; } }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>th .btn { font-weight: bold; padding: 0; } [scope="row"] { font-weight: normal; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } nav { ul { list-style: none; padding: 0; > * + * { margin-top: 0.5rem; } } a, button { text-align: left; } } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-enrollment</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Enrollment </name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecord(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.showImportData = LogicUtils.and( LogicUtils.not(ClassUtils.isCompleted(classGR)), LogicUtils.not(ClassUtils.isCancelled(classGR)), LogicUtils.or( ClassUtils.isCurrentUserClassCoordinator(classGR), SecurityUtils.isStudentAdmin() ) ); /** * Get all the students from the enrollment table */ const students = []; const enrollmentGR = new GlideRecord(Constants.CLASS_ENROLLMENT_TABLE); enrollmentGR.addQuery("class_id", data.classId); enrollmentGR.addQuery("is_active", true); enrollmentGR.query(); while (enrollmentGR.next()) { students.push({ sys_id: enrollmentGR.getUniqueValue(), student_id: GlideRecordUtils.getValue(enrollmentGR, "student_id"), user_id: GlideRecordUtils.getValue(enrollmentGR, "student_id.user_id"), name: GeneralUtils.defaultValue( GlideRecordUtils.getDisplayValue(enrollmentGR, "student_id"), GlideRecordUtils.getDisplayValue(enrollmentGR, "student_id.user_id") ), email: GlideRecordUtils.getDisplayValue(enrollmentGR, "student_id.work_email"), sass_student_id: GlideRecordUtils.getDisplayValue(enrollmentGR, "student_id.student_id"), group: GlideRecordUtils.getValue(enrollmentGR, "group"), }); } data.students = students; // Handle UI Security data.showEditEnrollmentAction = ClassUtils.showEditEnrollmentAction(classGR); data.showImportClassEnrollmentAction = ClassUtils.showImportClassEnrollmentAction(classGR); data.showAddStudentEnrollmentAction = ClassUtils.showAddStudentEnrollmentAction(classGR); data.showActions = [ data.showEditEnrollmentAction, data.showImportClassEnrollmentAction, data.showAddStudentEnrollmentAction, ].some(Boolean); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-25 13:34:57</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>d56a36801b8322903b5e657fe54bcbd6</sys_id>
<sys_mod_count>50</sys_mod_count>
<sys_name>HAISP Class Enrollment </sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_d56a36801b8322903b5e657fe54bcbd6</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-27 20:32:45</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div ng-if="data.classId"> <div class="row"> <div ng-class="{'col-md-9': data.showActions, 'col-md-12': !data.showActions}"> <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Class Enrollment ({{data.class_details.class_number}}) </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Class Enrollment </li> </ol> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col" aria-sort="{{sort['name'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['name'].label}}" ng-click="sortData($event, 'name')"> Student Name <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['sass_student_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['sass_student_id'].label}}" ng-click="sortData($event, 'sass_student_id')"> SASS Student ID <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['email'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['email'].label}}" ng-click="sortData($event, 'email')"> Email <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['group'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['group'].label}}" ng-click="sortData($event, 'group')"> Group <i class="fa fa-chevron-down"></i> </button> </th> </tr> </thead> <tbody> <tr ng-repeat="student in data.students"> <th scope="row"> <a href="?id=haisp_class_enrollment_student&enrollment_id={{student.sys_id}}" ng-if="data.showEditEnrollmentAction"> {{student.name}} <i ng-if="!student.user_id" class="fa fa-exclamation-circle text-danger" uib-tooltip="Unassigned user profile"></i> </a> <span ng-if="!data.showEditEnrollmentAction">{{student.name}}</span> </th> <td>{{student.sass_student_id}}</td> <td>{{student.email}}</td> <td>{{student.group}}</td> </tr> <tr ng-if="!data.students.length"> <td colspan="4">There are currently no student enrollments</td> </tr> </tbody> </table> </div> </div> </div> </div> <div class="col-md-3" ng-if="data.showActions"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Actions</h3> </div> <div class="panel-body"> <nav aria-label="enrollment actions"> <ul> <li ng-if="data.showImportClassEnrollmentAction"> <a href="?id=haisp_import_class_enrollment&class_id={{data.classId}}" class="btn btn-link btn-block">Import Class Enrollment</a> </li> <li ng-if="data.showEditEnrollment"> <a href="?id=haisp_class_enrollment_add&class_id={{data.classId}}" class="btn btn-link btn-block">Add Student Enrollment</a> </li> </ul> </nav> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $location) { const c = this; function getSortData() { $scope.sort = { instructional_block_name: (() => { if ($scope.data.sort.field !== "instructional_block_name") { return { sort: "none", label: "Sort by instructional block name" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by instructional block name, ascending" }; } else { return { sort: "descending", label: "Sort by instructional block name, descending" }; } })(), course_number: (() => { if ($scope.data.sort.field !== "course_number") { return { sort: "none", label: "Sort by HSI lesson plan number" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by HSI lesson plan number, ascending" }; } else { return { sort: "descending", label: "Sort by HSI lesson plan number, descending" }; } })(), unit_aor: (() => { if ($scope.data.sort.field !== "unit_aor") { return { sort: "none", label: "Sort by unit" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by unit, ascending" }; } else { return { sort: "descending", label: "Sort by unit, descending" }; } })(), start_date_time: (() => { if ($scope.data.sort.field !== "start_date_time") { return { sort: "none", label: "Sort by course start date" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by course start date, ascending" }; } else { return { sort: "descending", label: "Sort by course start date, descending" }; } })(), unit_class_sequence: (() => { if ($scope.data.sort.field !== "unit_class_sequence") { return { sort: "none", label: "Sort by unit class sequence" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by unit class sequence, ascending" }; } else { return { sort: "descending", label: "Sort by unit class sequence, descending" }; } })(), }; } getSortData(); $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.action = "sort"; c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; } [aria-sort] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .number { text-align: right; } .btn-clear { font-weight: bold; padding: 0; text-align: left; } .pagination { margin: 0; } .badge { background-color: var(--badge-color, #777); box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); color: var(--badge-text); font-size: inherit; font-weight: normal; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-course-scheduler-list</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course Scheduler List</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, input, options) { data.classId = options.class_id || input?.classId || $sp.getParameter("class_id"); const classGR = new GlideRecord(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.page = 1; data.batchSize = 25; if (input) { if (GeneralUtils.areEqual(input.action, "paginate")) { data.page = Math.max(input.page, 1); } if (GeneralUtils.areEqual(input.action, "sort")) { data.page = 1; } } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "start_date_time", asc: true }); const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; data.courses = []; const courseGR = new GlideRecord(Constants.COURSE_TABLE); courseGR.addQuery("class_id", data.classId); if (data.sort.asc) { courseGR.orderBy(data.sort.field); } else { courseGR.orderByDesc(data.sort.field); } courseGR.chooseWindow(startIndex, endIndex); courseGR.query(); data.totalCount = courseGR.getRowCount(); while (courseGR.next()) { const backgroundColor = "#" + GeneralUtils.defaultValue( GlideRecordUtils.getValue(courseGR, "unit_aor.aor_color"), "ffffff" ); const start = new GlideDateTime(GlideRecordUtils.getValue(courseGR, "start_date_time")).getDisplayValue(); const end = new GlideDateTime(GlideRecordUtils.getValue(courseGR, "end_date_time")).getDisplayValue(); data.courses.push({ ...GlideRecordUtils.toJson(courseGR, { full: true }), backgroundColor: backgroundColor, borderColor: (backgroundColor === "ffffff" || GeneralUtils.isEmpty(backgroundColor)) ? "#ccc" : ("#" + backgroundColor), textColor: getTextColorForBackground(hexToRgb(backgroundColor)), start, end, actions_required: GlideRecordUtils.getDisplayValue(courseGR, "actions_required").split(",").filter(Boolean), }); } function hexToRgb(hex) { // Remove the hash (#) if present hex = hex.replace(/^#/, ""); // Parse the red, green, and blue components const r = parseInt(hex.substring(0, 2), 16) || 255; // red const g = parseInt(hex.substring(2, 4), 16) || 255; // green const b = parseInt(hex.substring(4, 6), 16) || 255; // blue return [r, g, b]; } function getTextColorForBackground([r, g, b] = []) { // Normalize RGB values const normalizedR = r / 255; const normalizedG = g / 255; const normalizedB = b / 255; // Apply luminance formula components const calcComponent = (value) => value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4); const luminance = 0.2126 * calcComponent(normalizedR) + 0.7152 * calcComponent(normalizedG) + 0.0722 * calcComponent(normalizedB); // Compare luminance against threshold (0.5) return luminance > 0.5 ? "#1b1b1b" : "#ffffff"; } })($sp, data, input, options); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-31 13:30:32</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>6b5371421b8326d03b5e657fe54bcbb8</sys_id>
<sys_mod_count>54</sys_mod_count>
<sys_name>HAISP Course Scheduler List</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_6b5371421b8326d03b5e657fe54bcbb8</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-27 20:19:07</sys_updated_on>
<template>
<![CDATA[ <div ng-if="data.classId"> <h3>Courses</h3> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col" aria-sort="{{sort['instructional_block_name'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['instructional_block_name'].label}}" ng-click="sortData($event, 'instructional_block_name')"> Instructional Block Name <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['course_number'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['course_number'].label}}" ng-click="sortData($event, 'course_number')"> HSI LP # <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['unit_aor'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['unit_aor'].label}}" ng-click="sortData($event, 'unit_aor')"> Unit <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" class="number" aria-sort="{{sort['unit_class_sequence'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['unit_class_sequence'].label}}" ng-click="sortData($event, 'unit_class_sequence')"> Unit Class Sequence <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" class="number" aria-sort="{{sort['start_date_time'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['start_date_time'].label}}" ng-click="sortData($event, 'start_date_time')"> Course Start Time <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col"> <span class="btn btn-clear">Actions Required</span> </th> </tr> </thead> <tbody> <tr ng-if="!data.courses.length"> <td colspan="5">No courses assigned to this class</td> </tr> <tr ng-repeat="row in data.courses track by row.sys_id"> <th scope="row"> <a href="?id=haisp_instructor_scheduling&opened_from=calendar&course={{row.sys_id}}"> {{row.instructional_block_name}} </a> </th> <td> {{row.course_number}} </td> <td> <span class="badge" style="--badge-color: {{row.backgroundColor}}; --badge-text: {{row.textColor || '#1b1b1b'}}"> {{row.unit_aor.label || "N/A"}} </span> </td> <td class="number"> {{row.unit_class_sequence}} </td> <td class="number"> {{row.start|date:'MM/dd/yyyy HH:mm'}} </td> <td> <span ng-repeat="action in row.actions_required" class="label label-danger">{{action}}</span> </td> </tr> </tbody> </table> </div> <uib-pagination total-items="data.totalCount" ng-model="data.page" ng-change="paginate()" items-per-page="data.batchSize" class="pagination-sm" boundary-link-numbers="true"></uib-pagination> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function ( $scope, $location, spUtil, uiCalendarConfig ) { /* widget controller */ const c = this; $scope.classes = c.data.classes; $scope.selectedClass = c.data.selectedClass; if (!$scope.selectedClass) return; const params = new URLSearchParams(location.search); if (!params.get("class_id") && $scope.data.classId) { $location.search("class_id", $scope.data.classId); $location.search("spa", 1); } $scope.selectedClass.courses.forEach((course) => { if (course.start) { course.start = new Date(course.start); } if (course.end) { course.end = new Date(course.end); } }); $scope.calendar = "haisp-calendar"; $scope.course_view = $location.search().view || "calendar"; $scope.toggleView = function (view) { $scope.course_view = view === "calendar" ? "calendar" : "list"; $location.search("view", $scope.course_view); $location.search("spa", 1); } $scope.events = [...$scope.selectedClass.courses]; const defaultDate = $scope.selectedClass.start_date || $scope.events[0].start_date_time; $scope.eventSources = [$scope.events]; $scope.onViewRender = function onViewRender(view, element) { $scope.view = view; switch (view.name) { case "month": $scope.step = "month"; break; case "agendaWeek": $scope.step = "week"; break; case "agendaDay": $scope.step = "day"; break; default: $scope.step = "month"; } }; $scope.changeView = function changeView(view) { uiCalendarConfig.calendars[$scope.calendar].fullCalendar( "changeView", view ); }; $scope.stepCalendar = function stepCalendar(step) { uiCalendarConfig.calendars[$scope.calendar].fullCalendar(step); }; $scope.goToToday = function goToToday() { uiCalendarConfig.calendars[$scope.calendar].fullCalendar("today"); }; $scope.uiConfig = { calendar: { editable: false, header: { left: null, center: null, right: null, }, viewRender: $scope.onViewRender, nowIndicator: true, allDaySlot: false, slotEventOverlap: false, defaultDate, }, }; let interval; let retries = 0; interval = setInterval(() => { const details = document.querySelector("#calendar details"); if (details) { clearInterval(interval); interval = null; details.setAttribute("open", ""); return; } retries += 1; if (retries > 5) { clearInterval(interval); interval = null; return; } }, 100); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>#calendar { & header > * + * { margin-top: 1.5rem; } & dl { margin: 0; } & dl > div { display: flex; gap: 0.75rem; } & #currentClass { min-width: 35ch; text-align: left; display: inline-flex !important; justify-content: space-between; align-items: center; } & .calendar-controls, & .class-information { display: flex; flex-wrap: wrap; gap: 1.5rem; } & .calendar-controls { justify-content: space-between; margin-bottom: 1rem; & > div { display: flex; flex-wrap: wrap; gap: 1rem; } } & .fc-toolbar.fc-header-toolbar { display: none; } .fc-event-container { cursor: pointer; } & h3 { margin: 0; } input[readonly] { background-color: transparent; box-shadow: none; cursor: default; } summary { display: flex; align-items: center; justify-content: space-between; padding-block: 1rem; cursor: pointer; } details .fa-chevron-left { color: $brand-primary; padding-inline-block: 0.1rem; transition: transform ease-in-out 0.125s; font-size: 2rem; } details[open] .fa-chevron-left { transition: transform ease-in-out 0.125s; transform: rotate(-90deg); } .view-control { margin-bottom: 1rem; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-calendar</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Scheduler Calendar</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function ($sp, data, input, options) { data.classId = $sp.getParameter("class_id"); data.classes = []; const classGR = new GlideRecord(Constants.CLASS_TABLE); classGR.addQuery("state", "IN", [ClassUtils.STATE_DRAFT, ClassUtils.STATE_SCHEDULED, ClassUtils.STATE_IN_PROGRESS]); classGR.addEncodedQuery("RLQUERYx_g_dh5_hsisat_course.class_id,>=1^ENDRLQUERY"); classGR.orderBy("start_date"); classGR.orderBy("number"); classGR.query(); while (classGR.next()) { data.classes.push({ ...GlideRecordUtils.toJson(classGR, { full: true }), courses: [], }); } if (GeneralUtils.isEmpty(data.classId)) { if (GeneralUtils.isEmpty(data.classes)) { data.classId = Constants.VALUE_EMPTY; } else { data.classId = data.classes[0].sys_id; } } data.selectedClass = data.classes.find((klass) => klass.sys_id === data.classId); if (GeneralUtils.hasValue(data.selectedClass)) { data.selectedClass.courses = getCourses(data.classId); data.list_widget = $sp.getWidget("widget-haisp-course-scheduler-list", { class_id: data.classId }); } function getCourses(classId) { if (GeneralUtils.isEmpty(classId)) return []; const courses = []; const courseGR = new GlideRecord(Constants.COURSE_TABLE); courseGR.addQuery("class_id", classId); courseGR.orderBy("start_date_time"); courseGR.query(); while (courseGR.next()) { const backgroundColor = "#" + GeneralUtils.defaultValue( GlideRecordUtils.getValue(courseGR, "unit_aor.aor_color"), "ffffff" ); const textColor = getTextColorForBackground(hexToRgb(backgroundColor)); let start = DateUtils.getISO8601String(GlideRecordUtils.getValue(courseGR, "start_date_time")); let end = DateUtils.getISO8601String(GlideRecordUtils.getValue(courseGR, "end_date_time")); courses.push({ id: courseGR.getUniqueValue(), title: GlideRecordUtils.getDisplayValue(courseGR, "instructional_block_name"), borderColor: "rgb(0 0 0 / 0.25)", url: "?id=haisp_instructor_scheduling&opened_from=calendar&course=" + courseGR.getUniqueValue(), backgroundColor, textColor, start, end, }); } return courses; } function hexToRgb(hex) { // Remove the hash (#) if present hex = hex.replace(/^#/, ""); // Parse the red, green, and blue components const r = parseInt(hex.substring(0, 2), 16) || 255; // red const g = parseInt(hex.substring(2, 4), 16) || 255; // green const b = parseInt(hex.substring(4, 6), 16) || 255; // blue return [r, g, b]; } function getTextColorForBackground([r, g, b] = []) { // Normalize RGB values const normalizedR = r / 255; const normalizedG = g / 255; const normalizedB = b / 255; // Apply luminance formula components const calcComponent = (value) => value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4); const luminance = 0.2126 * calcComponent(normalizedR) + 0.7152 * calcComponent(normalizedG) + 0.0722 * calcComponent(normalizedB); // Compare luminance against threshold (0.5) return luminance > 0.5 ? "#1b1b1b" : "#ffffff"; } })($sp, data, input, options); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-02-19 14:47:46</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>8d637f311bbf1e503b5e657fe54bcb63</sys_id>
<sys_mod_count>444</sys_mod_count>
<sys_name>HAISP Scheduler Calendar</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_8d637f311bbf1e503b5e657fe54bcb63</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-27 20:14:19</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classes.length" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Scheduler Unavailable </h2> </div> <div class="panel-body"> <p> There are currently no classes containing courses to be scheduled. Please ensure there are courses associated with all classes to use the scheduler tool. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <section ng-if="data.classId" id="calendar" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> HSI Academy Scheduling Calendar </h2> </div> <div class="panel-body"> <div class="btn-group" uib-dropdown> <button id="currentClass" type="button" class="btn btn-secondary" uib-dropdown-toggle> {{ selectedClass.class_number }} <i aria-hidden="true" class="fa fa-chevron-down"></i> </button> <ul class="dropdown-menu" uib-dropdown-menu role="menu" aria-labelledby="currentClass"> <li ng-repeat="class in classes" role="menuitem"> <a href="?id=haisp_class_details&class_id={{ class.sys_id }}" class="dropdown-item"> {{ class.class_number }} </a> </li> </ul> </div> <details> <summary> <h3 class="h4"> {{selectedClass.class_number}} </h3> <i class="fa fa-chevron-left" aria-hidden="true"></i> </summary> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="class_number">Class Number</label> <input id="class_number" type="text" class="form-control" value="{{data.selectedClass.class_number}}" readonly> </div> <div class="form-group"> <label for="class_configuration_id">Curriculum Model</label> <input id="class_configuration_id" type="text" class="form-control" value="{{data.selectedClass.class_configuration_id.label}}" readonly> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="location_code">Location</label> <input id="location_code" type="text" class="form-control" value="{{data.selectedClass.location_code.label}}" readonly> </div> <div class="form-group"> <label for="homeroom_facility_id">Homeroom Location</label> <input id="homeroom_facility_id" type="text" class="form-control" value="{{data.selectedClass.homeroom_facility_id.label}}" readonly> </div> </div> </div> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="class_coordinator_user_id">Class Coordinator</label> <div ng-class="{'input-group': data.selectedClass.class_coordinator_email}"> <input id="class_coordinator_user_id" type="text" class="form-control" value="{{data.selectedClass.class_coordinator_user_id.label}}" readonly> <span class="input-group-btn" ng-if="data.selectedClass.class_coordinator_email"> <a href="mailto:{{data.selectedClass.class_coordinator_email}}" class="btn btn-default"> <span class="sr-only">Email Class Coordinator</span> <i class="fa fa-envelope"></i> </a> </span> </div> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="class_coordinator_phone_number">Class Coordinator Phone</label> <div ng-class="{'input-group': data.selectedClass.class_coordinator_phone_number}"> <input id="class_coordinator_phone_number" type="text" class="form-control" value="{{data.selectedClass.class_coordinator_phone_number}}" readonly> <span class="input-group-btn" ng-if="data.selectedClass.class_coordinator_phone_number"> <a href="tel:{{data.selectedClass.class_coordinator_phone_number}}" class="btn btn-default"> <span class="sr-only">Call Class Coordinator</span> <i class="fa fa-phone"></i> </a> </span> </div> </div> </div> </div> </details> <!-- <header> <h3 class="h4"> {{selectedClass.class_number}} </h3> <div class="class-information"> <div class="dropdown"> <button id="currentClass" type="button" class="btn btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"> HSISAT {{ selectedClass.class_number }} <i aria-hidden="true" class="fa fa-chevron-down"></i> </button> <ul class="dropdown-menu" role="menu" aria-labelledby="currentClass"> <li ng-repeat="class in classes" role="menuitem"> <a href="?id=haisp_class_details&class_id={{ class.sys_id }}" class="dropdown-item"> HSISAT {{ class.class_number }} </a> </li> </ul> </div> <div> <dl> <div> <dt>Class Coordinator:</dt> <dd>{{ selectedClass.class_coordinator || 'N/A' }}</dd> </div> <div> <dt>Telephone:</dt> <dd>{{ selectedClass.coordinator_phone || 'N/A' }}</dd> </div> <div> <dt>Homeroom:</dt> <dd>{{ selectedClass.homeroom_facility_name || 'N/A' }}</dd> </div> <div> <dt>Last Updated On:</dt> <dd>{{ selectedClass.sys_updated_on | date }}</dd> </div> </dl> <a href="?id=haisp_class_form&table=x_g_dh5_hsisat_class&sys_id={{ data.selectedClass.sys_id }}" target="_blank">Go to Class</a> </div> </div> </header> --> <div class="btn-group view-control"> <button type="button" class="btn btn-default" ng-class="{'btn-primary': course_view === 'calendar'}" ng-click="toggleView('calendar')"> <span class="sr-only">View Calendar</span> <i class="fa fa-calendar" aria-hidden="true"></i> </button> <button type="button" class="btn btn-default" ng-class="{'btn-primary': course_view === 'list'}" ng-click="toggleView('list')"> <span class="sr-only">View List</span> <i class="fa fa-list" aria-hidden="true"></i> </button> </div> <div ng-if="course_view === 'calendar'"> <div class="row"> <div class="col-xs-12"> <div class="calendar-controls"> <h3> {{ view.title }} </h3> <div> <div class="btn-group"> <button type="button" class="btn" ng-class="view.name === 'agendaDay' ? 'btn-primary' : 'btn-outline-secondary'" ng-click="changeView('agendaDay')"> Day </button> <button type="button" class="btn" ng-class="view.name === 'agendaWeek' ? 'btn-primary' : 'btn-outline-secondary'" ng-click="changeView('agendaWeek')"> Week </button> <button type="button" class="btn" ng-class="view.name === 'month' ? 'btn-primary' : 'btn-outline-secondary'" ng-click="changeView('month')"> Month </button> </div> <div> <button type="button" class="btn btn-outline-secondary" ng-click="goToToday()"> Today </button> <div class="btn-group"> <button type="button" class="btn btn-outline-secondary" ng-click="stepCalendar('prevYear')"> <span class="sr-only">Previous Year</span> <i aria-hidden="true" class="fa fa-angle-double-left"></i> </button> <button type="button" class="btn btn-outline-secondary" ng-click="stepCalendar('prev')"> <span class="sr-only">Previous {{ step }}</span> <i aria-hidden="true" class="fa fa-angle-left"></i> </button> <button type="button" class="btn btn-outline-secondary" ng-click="stepCalendar('next')"> <span class="sr-only">Next {{ step }}</span> <i aria-hidden="true" class="fa fa-angle-right"></i> </button> <button type="button" class="btn btn-outline-secondary" ng-click="stepCalendar('nextYear')"> <span class="sr-only">Next Year</span> <i aria-hidden="true" class="fa fa-angle-double-right"></i> </button> </div> </div> </div> </div> <div class="row"> <div class="col-xs-12"> <div ui-calendar="uiConfig.calendar" calendar="{{ calendar }}" ng-model="eventSources"></div> </div> </div> </div> </div> </div> <div ng-if="course_view === 'list'"> <sp-widget widget="c.data.list_widget"></sp-widget> </div> </div> </section> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $uibModal, spUtil) { const c = this; c.facilityModalController = function ($scope, $uibModalInstance) { $scope.facilities = c.data.course_facilities; $scope.submit = function () { $scope.errors = []; if (!$scope.facilityId) { $scope.errors.push("Please select a facility"); return; } $uibModalInstance.close($scope.facilityId); }; $scope.cancel = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.openFacilityRequestForm = function () { $uibModal.open({ animation: true, controller: c.facilityModalController, templateUrl: "facility-change-request-form.html", }) .result .then(function (facilityId) { c.data.action = "notify"; c.data.facilityToNotify = facilityId; return c.server.update() }) .then(function (response) { delete c.data.facilityToNotify; delete c.data.action; }); }; c.approvalModalController = function ($scope, $uibModalInstance) { $scope.facilities = c.data.course_facilities; $scope.submit = function () { $uibModalInstance.close(c.data.courseId); }; $scope.cancel = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.openApproveFacilityForm = function () { $uibModal.open({ animation: true, controller: c.approvalModalController, templateUrl: "facility-approval-form.html", }) .result .then(function (courseId) { c.data.action = "approve"; return c.server.update(); }) .then(function (response) { delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; } textarea[readonly], input[readonly] { background-color: transparent; box-shadow: none; cursor: default; height: min-content; resize: none !important; } nav { ul { list-style: none; padding: 0; > * + * { margin-top: 0.5rem; } } a, button { text-align: left; } } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-haisp-course-homepage</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course Homepage</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { const log = new Logger("Course Homepage", "Portal Widget"); data.courseId = $sp.getParameter("course_id"); if (GeneralUtils.isEmpty(data.courseId)) return; const courseGR = new GlideRecordSecure(Constants.COURSE_TABLE); if (LogicUtils.not(courseGR.get(data.courseId))) { data.courseId = Constants.VALUE_EMPTY; return; } if (courseGR.canRead()) data.canView = true; if (input?.action) { if (GeneralUtils.areEqual(input.action, "approve")) { const facilityGR = new GlideRecord(Constants.COURSE_FACILITY_TABLE); facilityGR.addQuery("course_id", data.courseId); facilityGR.addQuery("is_deleted", false); facilityGR.query(); while (facilityGR.next()) { try { GlideRecordUtils.save(facilityGR, { is_approved: true, }); } catch (err) { log.error(err.message, "facility_approval"); } } try { CourseUtils.updateActionsRequired_PreferredFacility(courseGR); } catch (err) { log.error(err.message, "facility_approval"); } } if (GeneralUtils.areEqual(input.action, "notify")) { gs.eventQueue("x_g_dh5_hsisat.notify_fletc", courseGR); const count = GeneralUtils.defaultValue( GlideRecordUtils.getValue(courseGR, "notified_fletc_request_sent"), 0 ); try { GlideRecordUtils.save(courseGR, { notified_fletc_request_sent: count + 1, }); } catch (err) { log.error(err.message, "notification_update"); } } } data.course_details = { ...GlideRecordUtils.toJson(courseGR, { full: true }), start_date_time: (() => { const gdt = new GlideDateTime(GlideRecordUtils.getValue(courseGR, "start_date_time")); if (gdt.getValue()) { return gdt.getNumericValue(); } return null; })(), end_date_time: (() => { const gdt = new GlideDateTime(GlideRecordUtils.getValue(courseGR, "end_date_time")); if (gdt.getValue()) { return gdt.getNumericValue(); } return null; })(), group: courseGR.getDisplayValue("group"), }; data.course_facilities = []; const facilityGR = new GlideRecord(Constants.COURSE_FACILITY_TABLE); facilityGR.addQuery("course_id", data.courseId); facilityGR.addQuery("is_deleted", false); facilityGR.query(); while (facilityGR.next()) { data.course_facilities.push(GlideRecordUtils.toJson(facilityGR, { full: true })); } data.course_instructors = []; const instructorGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_TABLE); instructorGR.addQuery("course_id", data.courseId); instructorGR.query(); while (instructorGR.next()) { data.course_instructors.push(GlideRecordUtils.toJson(instructorGR, { full: true })); } // show or hide the facility - based on if Hide Facility is set AND if the user is a student: data.showFacility = LogicUtils.not( LogicUtils.and(SecurityUtils.isStudent(), GlideRecordUtils.getValue(courseGR, "course_configuration_id.hide_facility") ) ); // action visibility data.showViewCourseMaterialAction = CourseUtils.showViewCourseMaterialAction(courseGR); data.showEditSessionDetailsAction = CourseUtils.showEditSessionDetailsAction(courseGR); data.showRescheduleCourseAction = CourseUtils.showRescheduleCourseAction(courseGR); data.showScheduleInstructorsAction = CourseUtils.showScheduleInstructorsAction(courseGR); data.showManageFacilitiesAction = CourseUtils.showManageFacilitiesAction(courseGR); data.showConfirmAssignedFacilitiesAction = CourseUtils.showConfirmAssignedFacilitiesAction(courseGR, data.course_facilities); data.showRequestFacilityChangeAction = CourseUtils.showRequestFacilityChangeAction(courseGR, data.course_facilities); data.showActions = [ data.showViewCourseMaterialAction, data.showEditSessionDetailsAction, data.showRescheduleCourseAction, data.showScheduleInstructorsAction, data.showManageFacilitiesAction, data.showConfirmAssignedFacilitiesAction, data.showRequestFacilityChangeAction, ].some(Boolean); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-24 22:04:56</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>0ce563771b766e503b5e657fe54bcb48</sys_id>
<sys_mod_count>82</sys_mod_count>
<sys_name>HAISP Course Homepage</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_0ce563771b766e503b5e657fe54bcb48</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-26 16:25:49</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.courseId || !data.canView" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div ng-if="data.courseId && data.canView"> <div class="row"> <div class="col-md-9" ng-class="{'col-md-12': !data.showActions}"> <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> {{data.course_details.instructional_block_name}} </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <!-- <li> <a href="?id=haisp_classes">Classes</a> </li> --> <li> <a href="?id=haisp_class_homepage&class_id={{data.course_details.class_id.value}}"> {{data.course_details.class_id.label}} </a> </li> <li> <a href="?id=haisp_class_schedule&class_id={{data.course_details.class_id.value}}"> Class Schedule </a> </li> <li aria-current="page" class="active"> {{data.course_details.instructional_block_name}} </li> </ol> <h3> Course Details </h3> <div class="row"> <div class="col-xs-12"> <div class="form-group"> <label for="instructional_block_name">Instructional Block Name</label> <input id="instructional_block_name" class="form-control" value="{{data.course_details.instructional_block_name}}" readonly> </div> <div class="form-group" ng-if="data.course_details.instructional_block_description"> <label for="instructional_block_description">Instructional Block Description</label> <textarea id="instructional_block_description" class="form-control" readonly>{{data.course_details.instructional_block_description}}</textarea> </div> </div> </div> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="course_number">HSI Lesson Plan Number</label> <input id="course_number" class="form-control" value="{{data.course_details.course_number}}" readonly> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="sass_session_number">SASS Lesson Plan Number</label> <input id="sass_session_number" class="form-control" value="{{data.course_details.sass_lp}}" readonly> </div> </div> </div> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="unit">Unit</label> <input id="unit" class="form-control" value="{{data.course_details.unit_aor.label}}" readonly> </div> <div class="form-group"> <label for="unit_sequence">Unit Class Sequence Number</label> <input id="unit_sequence" class="form-control" value="{{data.course_details.unit_class_sequence}}" readonly> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="course_day">HSISAT Day</label> <input id="course_day" class="form-control" value="{{data.course_details.hsisat_day}}" readonly> </div> <div class="form-group"> <label for="course_week">HSISAT Week</label> <input id="course_week" class="form-control" value="{{data.course_details.hsisat_week}}" readonly> </div> </div> </div> <h3> Session Details </h3> <div class="row"> <div class="col-md-6"> <div class="form-group"> <label for="start">Course Start</label> <input id="start" class="form-control" value="{{data.course_details.start_date_time|date:'M/d/yyyy HH:mm'}}" readonly> </div> <div class="form-group"> <label for="end">Course End</label> <input id="end" class="form-control" value="{{data.course_details.end_date_time|date:'M/d/yyyy HH:mm'}}" readonly> </div> </div> <div class="col-md-6"> <div class="form-group"> <label for="group">Group</label> <input id="group" class="form-control" value="{{data.course_details.group|uppercase}}" readonly> </div> <div class="form-group"> <label for="uniform">Dress Code</label> <input id="uniform" class="form-control" value="{{data.course_details.uniform_code.label}}" readonly> </div> </div> </div> <h3> Course Location </h3> <div class="row"> <div class="col-xs-12"> <p ng-if="!data.showFacility"> Please report to your homeroom location to find out this course's location. </p> <div class="table-responsive" ng-if="data.showFacility"> <table class="table table-striped"> <thead> <th scope="col">Facility</th> </thead> <tbody> <tr ng-repeat="facility in data.course_facilities"> <th scope="row">{{facility.facility_id.label}}</th> </tr> <tr ng-if="!data.course_facilities.length"> <td>No facilities assigned to this course</td> </tr> </tbody> </table> </div> </div> </div> <h3> Course Instructors </h3> <div class="row"> <div class="col-xs-12"> <div class="table-responsive"> <table class="table table-striped"> <thead> <th scope="col">Instructor</th> <th scope="col">Role</th> </thead> <tbody> <tr ng-if="!data.course_instructors.length"> <td colspan="2">No instructors assigned to this course</td> </tr> <tr ng-repeat="instructor in data.course_instructors"> <th scope="row"> <a href="?id=haisp_instructor_profile&sys_id={{instructor.instructor_id.value}}">{{instructor.instructor_id.label}}</a> </th> <td>{{instructor.instructor_role_code.label}}</td> </tr> </tbody> </table> </div> </div> </div> </div> </div> </div> <div class="col-md-3" ng-if="data.showActions"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Actions </h3> </div> <div class="panel-body"> <nav aria-label="course actions"> <ul> <li ng-if="data.showViewCourseMaterialAction"> <a class="btn btn-link btn-block" href="{{data.course_details.course_material}}" target="_blank">View Course Material</a> </li> <li ng-if="data.showEditSessionDetailsAction"> <a class="btn btn-link btn-block" href="?id=haisp_course_session_edit&course_id={{data.courseId}}">Edit Session Details</a> </li> <li ng-if="data.showRescheduleCourseAction"> <a class="btn btn-link btn-block" href="?id=haisp_course_reschedule&course_id={{data.courseId}}">Reschedule Course</a> </li> <li ng-if="data.showScheduleInstructorsAction"> <a class="btn btn-link btn-block" href="?id=haisp_instructor_scheduling&opened_from=course&course={{data.courseId}}">Schedule Instructors</a> </li> <li ng-if="data.showManageFacilitiesAction"> <a class="btn btn-link btn-block" href="?id=haisp_course_facilities_edit&course_id={{data.courseId}}">Manage Facilities</a> </li> <li ng-if="data.showConfirmAssignedFacilitiesAction"> <button type="button" class="btn btn-link btn-block" ng-click="openApproveFacilityForm()"> Confirm Assigned Facilities </button> </li> <li ng-if="data.showRequestFacilityChangeAction"> <button type="button" class="btn btn-link btn-block" ng-click="openFacilityRequestForm()"> Request Facility Change </button> </li> </ul> </nav> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; $scope.submit = function (event) { $scope.submitting = true; const fd = new FormData(event.target); const file = fd.get("file"); if (!file) return; const reader = new FileReader(); reader.onload = function (e) { const data = new Uint8Array(e.target.result); const workbook = XLSX.read(data, { cellDates: true, type: "array" }); const sheetName = workbook.SheetNames[0]; const worksheet = workbook.Sheets[sheetName]; const rows = XLSX.utils.sheet_to_json(worksheet, { header: 1, }) .filter((row) => row.length && row.length > 1); $scope.thead = rows.shift(); $scope.rows = rows; $scope.submitting = false; }; reader.readAsArrayBuffer(file); }; function transformData () { return new Promise((resolve, reject) => { try { const importRows = []; if ($scope.rows.length) { const { FIELDS } = $scope.data; for (let i = 0; i < $scope.rows.length; i++) { const importRow = {}; const row = $scope.rows[i]; for (let j = 0; j < FIELDS.length; j++) { importRow[FIELDS[j]] = row[j]; } importRows.push(importRow); } } resolve(importRows); } catch (err) { reject(err); } }); } function send(data) { c.data.dataToImport = data; c.server.update(); spUtil.addInfoMessage("Your request has been submitted"); setTimeout(() => { if ($scope.data.classId) { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; } else { location.search = "?id=haisp_homepage"; } }, 3000); } $scope.import = function () { $scope.submitting = true; transformData() .then((data) => send(data)) .catch(() => $scope.submitting = false); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>th, td { white-space: nowrap; } ::file-selector-button { color: $brand-primary; background-color: #fff; border: 1px solid $brand-primary; padding: 6px 12px; border-radius: 4px; &:hover, &:focus { color: darken($brand-primary, 10%); border-color: darken($brand-primary,10%); } } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-import-class-roster</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Import Class Roster</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { const log = new Logger("Import Class Roster", "Portal Widget"); data.classId = $sp.getParameter("class_id"); if (data.classId) { const classGR = new GlideRecord(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; } else { data.class_details = GlideRecordUtils.toJson(classGR, { full: true, include: ["class_number"] }); } } data.canImport = LogicUtils.or( SecurityUtils.isScheduler(), SecurityUtils.isClassAdmin() ); data.FIELDS = [ "u_site", "u_category", "u_program", "u_class", "u_class_start", "u_class_end", "u_times", "u_class_status", "u_agency_students", "u_last_name", "u_first_name", "u_middle_name", "u_suffix", "u_student_id", "u_work_cell", "u_work_email", "u_personal_cell", "u_personal_email", "u_agency", "u_poc_phone", ]; if (input?.dataToImport) { for (let i = 0, row; (row = input.dataToImport[i]); i++) { try { GlideRecordUtils.save(new GlideRecord("x_g_dh5_hsisat_student_staging"), row); } catch (err) { log.error("Unable to save row " + (i + 1) + ": " + err.message, "import_data"); } } } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-28 22:43:20</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>b0155c1d1b0fea903b5e657fe54bcb1c</sys_id>
<sys_mod_count>54</sys_mod_count>
<sys_name>HAISP Import Class Roster</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_b0155c1d1b0fea903b5e657fe54bcb1c</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-26 16:15:32</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.canImport" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form ng-if="data.canImport" ng-submit="submit($event)" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Import Class Roster </h2> </div> <fieldset class="panel-body" ng-disabled="submitting"> <ol ng-if="data.classId" class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.classId}}">{{data.class_details.class_number}}</a> </li> <li> <a href="?id=haisp_class_enrollment&class_id={{data.classId}}">Class Enrollment</a> </li> <li aria-current="page" class="active"> Import Student Roster </li> </ol> <div class="form-group"> <label for="file">Upload Class Roster</label> <input id="file" type="file" name="file" accept=".csv,.xlsx,.xls" required> </div> <footer> <button type="submit" class="btn btn-default" ng-class="{'btn-primary': !rows.length}"> Preview Imported Data </button> <button type="button" class="btn btn-primary" ng-if="rows.length" ng-click="import()"> Import Data </button> </footer> </fieldset> <div class="table-responsive"> <table class="table table-striped" ng-if="rows.length"> <thead> <tr> <th scope="col">Row #</th> <th ng-repeat="cell in thead" scope="col">{{cell}}</th> </tr> </thead> <tbody> <tr ng-if="!rows.length"> <td colspan="{{thead.length + 1}}">There are no rows of data to be previewed</td> </tr> <tr ng-repeat="row in rows"> <th scope="row">{{$index + 1}}</th> <td ng-repeat="cell in row track by $index">{{cell}}</td> </tr> </tbody> </table> </div> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function() { const c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-haisp-class-announcements</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Announcements</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.showAnnouncements = classGR.canRead(); const announcementGR = new GlideRecord(Constants.ANNOUNCEMENT_TABLE); announcementGR.addQuery("class", data.classId); announcementGR.orderByDesc("start_date"); announcementGR.query(); const announcements = []; while (announcementGR.next()) { announcements.push( GlideRecordUtils.toJson(announcementGR, { full: true }) ); } data.announcements = announcements; })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-25 19:19:39</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>8ea988141b8362903b5e657fe54bcb92</sys_id>
<sys_mod_count>20</sys_mod_count>
<sys_name>HAISP Class Announcements</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_8ea988141b8362903b5e657fe54bcb92</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-20 15:31:08</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!(data.classId && data.showAnnouncements)" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div ng-if="data.classId && data.showAnnouncements" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Announcements </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Class Announcements </li> </ol> <p ng-if="!data.announcements.length"> There are no announcements. </p> <div ng-repeat="announcement in data.announcements" class="well"> <p>{{announcement.start_date|date}}</p> <span ng-bind-html="announcement.content"></span> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.use_preferred_instructors = c.data.f_preference._fields.use_preferred_instructors.value; $scope.instructor_query = {}; const g_forms = []; function initForm(gFormInstance) { g_forms.push(gFormInstance); $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", gFormInstance); }, 175); } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("field.change", function(evt, parms){ //console.log(evt); //console.log(parms); if(parms.field.name == 'use_preferred_instructors'){ $scope.use_preferred_instructors = parms.field.value } }) $scope.submit = function () { $scope.submitting = true; $scope.errors = []; const config = g_forms.reduce((agg, g_form) => { const form = g_form.serialize().reduce((data, field) => { if (field.sys_mandatory && !field.value) { $scope.errors.push(field.label); } return { ...data, [field.name]: field.value }; }, {}); return { ...agg, ...form }; }, {}); if ($scope.errors.length) { $scope.submitting = false; spUtil.addErrorMessage("The following fields are required: " + $scope.errors.join(", ")); return; } c.data.configToWrite = config; c.data.facilitiesToWrite = $scope.data.facility_preferences; c.data.facilitiesToRemove = $scope.removedPreferences; c.data.requirementsToWrite = $scope.data.instructor_requirements; c.data.requirementsToRemove = $scope.removedRequirements; c.data.prefInstructorsToWrite = $scope.data.preferred_instructors; c.data.prefInstructorsToRemove = $scope.removedPrefInstructor; c.server.update() .then(function (response) { $scope.submitting = false; location.search = "?id=hsi_class_config&table=x_g_dh5_hsisat_class_configuration&sys_id=" + $scope.data.parentId; }); }; c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_forms.reduce((agg, g_form) => [...agg, ...g_form.serialize()], []); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=hsi_class_config&table=x_g_dh5_hsisat_class_configuration&sys_id=" + $scope.data.parentId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=hsi_class_config&table=x_g_dh5_hsisat_class_configuration&sys_id=" + $scope.data.parentId; } }; $scope.addPreference = function () { $scope.data.facility_preferences.push({ sys_id: crypto.randomUUID().replace(/-/g, ""), location_code: "", facility_id: "", filter: "", }); }; $scope.updatePreferenceFilter = function (rowId, type) { if (type === "location") { const preference = $scope.data.facility_preferences.find((item) => item.sys_id === rowId); if (preference) { preference.facility_id = ""; preference.filter = "location_code=" + preference.location_code.value; } } }; $scope.removedPreferences = []; $scope.removePreference = function (rowId) { const index = $scope.data.facility_preferences.findIndex((item) => item.sys_id === rowId); if (index < 0) return; $scope.removedPreferences.push(...$scope.data.facility_preferences.splice(index, 1)); }; $scope.addRequirement = function () { $scope.data.instructor_requirements.push({ sys_id: crypto.randomUUID().replace(/-/g, ""), role_code: "", instructor_count: 1, certification_codes: "", knowledge_area_codes: "", }); }; $scope.removedRequirements = []; $scope.removeRequirement = function (rowId) { const index = $scope.data.instructor_requirements.findIndex((item) => item.sys_id === rowId); if (index < 0) return; $scope.removedRequirements.push(...$scope.data.instructor_requirements.splice(index, 1)); }; $scope.addPrefInstructor = function () { $scope.data.preferred_instructors.push({ sys_id: crypto.randomUUID().replace(/-/g, ""), role_code: "", instructor_count: 1, certification_codes: "", knowledge_area_codes: "", }); }; $scope.removedPrefInstructor = []; $scope.removePrefInstructor = function (rowId) { const index = $scope.data.preferred_instructors.findIndex((item) => item.sys_id === rowId); if (index < 0) return; $scope.removedPrefInstructor.push(...$scope.data.preferred_instructors.splice(index, 1)); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; } .facility-table { tr > :nth-child(3) { width: 2rem; } .select2-search-choice { height: auto !important; } } .instructor-table { tr > :nth-child(5) { width: 2rem; } .select2-search-choice { height: auto !important; } } .pref-instructor-table { tr > :nth-child(4) { width: 2rem; } .select2-search-choice { height: auto !important; } } thead th { white-space: nowrap; } .mandatory-fields { display: flex; flex-wrap: wrap; gap: 0.75rem; h3 { width: 100%; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-course-config-form-v2</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course Configuration Form V2</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, options, input) { const log = new Logger("Course Configuration", "Portal Widget"); data.configId = $sp.getParameter("sys_id"); // "9a66571f1b39a6503b5e657fe54bcb37"; data.parentId = GeneralUtils.defaultValue(input?.parentId, $sp.getParameter("parent_id")); let configGR; if (GeneralUtils.hasValue(data.configId)) { configGR = new GlideRecord(Constants.COURSE_CONFIGURATION_TABLE); if (LogicUtils.not(configGR.get(data.configId))) { data.configId = Constants.VALUE_EMPTY; return; } data.parentId = GlideRecordUtils.getValue(configGR, "class_configuration_id"); } else if(GeneralUtils.hasValue(data.parentId)) { parentGR = new GlideRecord(Constants.CLASS_CONFIGURATION_TABLE); if (LogicUtils.not(parentGR.get(data.parentId))) { data.configId = Constants.VALUE_EMPTY; return; } data.configId = "-1"; configGR = new GlideRecord(Constants.COURSE_CONFIGURATION_TABLE); configGR.addQuery("class_configuration_id", data.parentId); } else { return; } if (LogicUtils.not(configGR.canWrite())) { data.configId = Constants.VALUE_EMPTY; return; } if (input) { try { const writeGR = LogicUtils.If( GeneralUtils.hasValue(configGR.getUniqueValue()), configGR, new GlideRecord(Constants.COURSE_CONFIGURATION_TABLE) ); data.configId = GlideRecordUtils.save(writeGR, input.configToWrite); configGR = new GlideRecord(Constants.COURSE_CONFIGURATION_TABLE); configGR.get(data.configId); // go through facilities for (let i = 0, facility; (facility = input.facilitiesToRemove[i]); i++) { const facilityGR = new GlideRecord(Constants.COURSE_FACILITY_PREFERENCE_TABLE); if (facilityGR.get(facility.sys_id)) { facilityGR.deleteRecord(); } } for (let i = 0, facility; (facility = input.facilitiesToWrite[i]); i++) { let facilityGR = new GlideRecord(Constants.COURSE_FACILITY_PREFERENCE_TABLE); if (LogicUtils.not(facilityGR.get(facility.sys_id))) { facilityGR.newRecord(); } GlideRecordUtils.save(facilityGR, { course_configuration_id: data.configId, preference_order: (i + 1), facility_id: facility.facility_id.value, }); } // go through instructors for (let i = 0, requirement; (requirement = input.requirementsToRemove[i]); i++) { const requirementGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); if (requirementGR.get(requirement.sys_id)) { requirementGR.deleteRecord(); } } for (let i = 0, requirement; (requirement = input.requirementsToWrite[i]); i++) { let requirementGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); if (LogicUtils.not(requirementGR.get(requirement.sys_id))) { requirementGR.newRecord(); } GlideRecordUtils.save(requirementGR, { course_configuration_id: data.configId, instructor_count: requirement.instructor_count, instructor_role_code: requirement.role_code.value, skills: requirement.knowledge_area_codes.value, certifications: requirement.certification_codes.value, }); } // go through preferred instructors for (let i = 0, instructor; (instructor = input.prefInstructorsToRemove[i]); i++) { const prefInstructorGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_PREFERENCE_CONFIGURATION_TABLE); if (prefInstructorGR.get(instructor.sys_id)) { prefInstructorGR.deleteRecord(); } } for (let i = 0, instructor; (instructor = input.prefInstructorsToWrite[i]); i++) { let prefInstructorGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_PREFERENCE_CONFIGURATION_TABLE); if (LogicUtils.not(prefInstructorGR.get(instructor.sys_id))) { prefInstructorGR.newRecord(); } GlideRecordUtils.save(prefInstructorGR, { course_configuration_id: data.configId, location_code: instructor.location_code.value, role_code: instructor.role_code.value, instructor_id: instructor.instructor_id.value, }); } } catch (err) { log.error(err.message, "save_config"); gs.addErrorMessage(err.message); } } data.config_details = GlideRecordUtils.toJson(configGR, { full: true }); data.f_course = $sp.getForm(configGR.getTableName(), data.configId, configGR.getEncodedQuery(), "course_requirements", false); data.f_facility = $sp.getForm(configGR.getTableName(), data.configId, configGR.getEncodedQuery(), "facility_requirements", false); data.f_instructor = $sp.getForm(configGR.getTableName(), data.configId, configGR.getEncodedQuery(), "instructor_requirements", false); data.f_preference = $sp.getForm(configGR.getTableName(), data.configId, configGR.getEncodedQuery(), "preferred_instructors", false); data.facility_preferences = []; data.instructor_requirements = []; data.preferred_instructors = []; const facilityGR = new GlideRecord(Constants.COURSE_FACILITY_PREFERENCE_TABLE); facilityGR.addQuery("course_configuration_id", data.configId); facilityGR.orderBy("preference_order"); facilityGR.query(); while (facilityGR.next()) { data.facility_preferences.push({ sys_id: facilityGR.getUniqueValue(), location_code: { value: GlideRecordUtils.getValue(facilityGR, "facility_id.location_code"), displayValue: GlideRecordUtils.getDisplayValue(facilityGR, "facility_id.location_code"), }, facility_id: { value: GlideRecordUtils.getValue(facilityGR, "facility_id"), displayValue: GlideRecordUtils.getDisplayValue(facilityGR, "facility_id"), }, filter: "location_code=" + GlideRecordUtils.getValue(facilityGR, "facility_id.location_code"), }); } const requirementGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_CONFIGURATION_TABLE); requirementGR.addQuery("course_configuration_id", data.configId); requirementGR.query(); while (requirementGR.next()) { data.instructor_requirements.push({ sys_id: requirementGR.getUniqueValue(), role_code: { value: GlideRecordUtils.getValue(requirementGR, "instructor_role_code"), displayValue: GlideRecordUtils.getDisplayValue(requirementGR, "instructor_role_code"), }, instructor_count: GlideRecordUtils.getValue(requirementGR, "instructor_count"), certification_codes: { value: requirementGR.getValue("certifications"), displayValue: requirementGR.getDisplayValue("certifications"), }, knowledge_area_codes: { value: requirementGR.getValue("skills"), displayValue: requirementGR.getDisplayValue("skills"), }, }); } const prefInstructorGR = new GlideRecord(Constants.COURSE_INSTRUCTOR_PREFERENCE_CONFIGURATION_TABLE); prefInstructorGR.addQuery("course_configuration_id", data.configId); prefInstructorGR.query(); while (prefInstructorGR.next()) { data.preferred_instructors.push({ sys_id: prefInstructorGR.getUniqueValue(), location_code: { value: prefInstructorGR.getValue('location_code'), displayValue: prefInstructorGR.getDisplayValue('location_code') }, role_code: { value: prefInstructorGR.getValue('role_code'), displayValue: prefInstructorGR.getDisplayValue('role_code') }, instructor_id: { value: prefInstructorGR.getValue('instructor_id'), displayValue: prefInstructorGR.getDisplayValue('instructor_id') }, }); } })($sp, data, options, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-01 20:09:13</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>8d385c261b072ad03b5e657fe54bcbc4</sys_id>
<sys_mod_count>184</sys_mod_count>
<sys_name>HAISP Course Configuration Form V2</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_8d385c261b072ad03b5e657fe54bcbc4</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-08-20 12:56:06</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.configId" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form class="panel panel-default" ng-if="data.configId" ng-submit="submit()"> <div class="panel-heading"> <h2 class="panel-title"> {{data.configId == "-1" ? "Add Course Configuration" : "Edit Course Configuration (" + data.config_details.name + ")"}} </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <sp-model form_model="data.f_course" mandatory="main_mandatory" embedded_in_modal="false"></sp-model> <sp-model form_model="data.f_facility" mandatory="facility_mandatory" embedded_in_modal="false"></sp-model> <div class="table-responsive"> <table class="facility-table table table-striped"> <thead> <tr> <th scope="col">Location</th> <th scope="col">Facility Name</th> <th scope="col"> <span class="sr-only">Remove Preference</span> </th> </tr> </thead> <tbody> <tr ng-repeat="preference in data.facility_preferences track by preference.sys_id"> <td> <label for="preference[{{$index}}].location_code" class="sr-only">Facility {{$index}} Location</label> <sn-record-picker id="preference[{{$index}}].location_code" field="preference.location_code" table="'x_g_dh5_hsisat_location_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="'is_active=true'" ng-change="updatePreferenceFilter(preference.sys_id, 'location')" required></sn-record-picker> </td> <th scope="row"> <label for="preference[{{$index}}].facility_id" class="sr-only">Facility {{$index}} Name</label> <sn-record-picker id="preference[{{$index}}].facility_id" field="preference.facility_id" table="'x_g_dh5_hsisat_facility'" display-field="'building_room'" value-field="'sys_id'" search-fields="'building_room'" page-size="100" default-query="preference.filter" ng-change="updatePreferenceFilter(preference.sys_id, 'facility')" required></sn-record-picker> </th> <td> <button type="button" class="btn btn-danger" ng-click="removePreference(preference.sys_id)"> <span class="sr-only">Remove Preference {{$index}}</span> <i class="fa fa-remove" aria-hidden="true"></i> </button> </td> </tr> <tr ng-if="!data.facility_preferences.length"> <td colspan="3">No facility preferences defined</td> </tr> </tbody> <tfoot> <tr> <td colspan="3"> <button type="button" class="btn btn-default" ng-click="addPreference()"> Add Preferred Facility </button> </td> </tr> </tfoot> </table> </div> <sp-model form_model="data.f_instructor" mandatory="requirement_mandatory" embedded_in_modal="false"></sp-model> <div class="table-responsive"> <table class="instructor-table table table-striped"> <thead> <th scope="col">Instructor Role</th> <th scope="col">Number of Instructors</th> <th scope="col">Required Certifications</th> <th scope="col">Preferred Knowledge Areas</th> <th scope="col"> <span class="sr-only">Remove Instructor Requirement</span> </th> </thead> <tbody> <tr ng-if="!data.instructor_requirements.length"> <td colspan="5">No instructor requirements defined</td> </tr> <tr ng-repeat="requirement in data.instructor_requirements track by requirement.sys_id"> <th scope="row"> <label for="role_code-{{requirement.sys_id}}" class="sr-only">Instructor Requirement {{$index}}</label> <sn-record-picker id="role_code-{{requirement.sys_id}}" field="requirement.role_code" table="'x_g_dh5_hsisat_instructor_role_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="'is_active=true'" required></sn-record-picker> </th> <td> <label for="instructor_count-{{requirement.sys_id}}" class="sr-only">Number of Instructors {{$index}}</label> <input id="instructor_count-{{requirement.sys_id}}" type="number" class="form-control" min="1" type="number" ng-model="requirement.instructor_count"> </td> <td> <label for="certifications-{{requirement.sys_id}}" class="sr-only">Required Certifications {{$index}}</label> <sn-record-picker id="certifications-{{requirement.sys_id}}" field="requirement.certification_codes" table="'x_g_dh5_hsisat_certification_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" multiple="true" page-size="100" default-query="'is_active=true'"></sn-record-picker> </td> <td> <label for="knowledge-{{requirement.sys_id}}" class="sr-only">Preferred Knowledge Areas {{$index}}</label> <sn-record-picker id="knowledge-{{requirement.sys_id}}" field="requirement.knowledge_area_codes" table="'x_g_dh5_hsisat_instructor_skill_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" multiple="true" page-size="100" default-query="'is_active=true'"></sn-record-picker> </td> <td> <button type="button" class="btn btn-danger" ng-click="removeRequirement(requirement.sys_id)"> <span class="sr-only">Remove Instructor Requirement {{$index}}</span> <i class="fa fa-remove" aria-hidden="true"></i> </button> </td> </tr> </tbody> <tfoot> <tr> <td colspan="5"> <button type="button" class="btn btn-default" ng-click="addRequirement()"> Add Instructor Requirement </button> </td> </tr> </tfoot> </table> </div> <sp-model form_model="data.f_preference" mandatory="instructor_mandatory" embedded_in_modal="false"></sp-model> <!-- TODO: Add new table here with show hide listening for changes to the `use_preferred_instructors` checkbox captured in the `sp-model` above for the instructor preference section This should mimic the dynamic tables above --> <div class="table-responsive" ng-if="use_preferred_instructors == 'true'"> <table class="pref-instructor-table table table-striped"> <thead> <th scope="col">Location</th> <th scope="col">Instructor Role</th> <th scope="col">Name of Instructor</th> <th scope="col"> <span class="sr-only">Remove Preferred Instructor</span> </th> </thead> <tbody> <tr ng-if="!data.preferred_instructors.length"> <td colspan="4">No preferred instructors defined</td> </tr> <tr ng-repeat="instructor in data.preferred_instructors track by instructor.sys_id"> <th scope="row"> <label for="location_code-{{instructor.sys_id}}" class="sr-only">Location {{$index}}</label> <sn-record-picker id="location_code-{{instructor.sys_id}}" field="instructor.location_code" table="'x_g_dh5_hsisat_location_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="'is_active=true'" required></sn-record-picker> </th> <td> <label for="role_code-{{instructor.sys_id}}" class="sr-only">Instructor Role {{$index}}</label> <sn-record-picker id="role_code-{{instructor.sys_id}}" field="instructor.role_code" table="'x_g_dh5_hsisat_instructor_role_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="'is_active=true'" required></sn-record-picker> </td> <td> <label for="instructor_id-{{instructor.sys_id}}" class="sr-only">Name of Instructor {{$index}}</label> <sn-record-picker id="instructor_id-{{instructor.sys_id}}" field="instructor.instructor_id" table="'x_g_dh5_hsisat_instructor'" display-field="'user_id'" value-field="'sys_id'" search-fields="'user_id'" page-size="100" default-query="'active=true^location_code=' + data.preferred_instructors[$index].location_code.value"></sn-record-picker> </td> <td> <button type="button" class="btn btn-danger" ng-click="removePrefInstructor(instructor.sys_id)"> <span class="sr-only">Remove Preferred Instructor {{$index}}</span> <i class="fa fa-remove" aria-hidden="true"></i> </button> </td> </tr> </tbody> <tfoot> <tr> <td colspan="4"> <button type="button" class="btn btn-default" ng-click="addPrefInstructor()"> Add Preferred Instructor </button> </td> </tr> </tfoot> </table> </div> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Submit </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope) { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.delegate1 { border-radius: 25px; background: #fdfdfd; border: 2px solid #000000; padding: 10px; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>haisp_delegate_wrapper</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Delegate Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.class_options = {}; // turn off the meeting invitation (see HTML Template in the Delegation V2 widget) data.class_options.show_meeting_invitations = false; data.class_form = $sp.getWidget('sp_delegate_v2', data.class_options); data.canDelegate = SecurityUtils.isSectionChief() || SecurityUtils.isUnitChief() || SecurityUtils.isProgramManager(); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JMCumbee</sys_created_by>
<sys_created_on>2025-07-11 18:33:30</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>7ef8772f1b22aa10065762cae54bcbe2</sys_id>
<sys_mod_count>22</sys_mod_count>
<sys_name>HAISP Delegate Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_7ef8772f1b22aa10065762cae54bcbe2</sys_update_name>
<sys_updated_by>JMCumbee</sys_updated_by>
<sys_updated_on>2025-08-19 21:09:44</sys_updated_on>
<template>
<![CDATA[ <!--<div class="delegate"--> <div class="panel panel-default"> <div class="panel-heading"> Delegation </div> <div class="panel-body"> <sp-widget ng-if="data.canDelegate" widget="data.class_form"></sp-widget> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $rootScope) { const c = this; $scope.exportCurriculumModel = function () { c.data.action = "export"; c.server.update() .then(function (response) { delete c.data.action; const { export_url } = response; if (!export_url) return; const anchor = Object.assign( document.createElement("a"), { href: export_url, } ); anchor.click(); anchor.remove(); }); }; $scope.$on("sp.form.submitted", function (event, data) { location.reload(); }); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>ul { list-style: none; padding: 0; } .btn-link { text-align: left; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-configuration-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Configuration Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data) { data.sys_id = $sp.getParameter("sys_id"); data.form_widget = $sp.getWidget("widget-form", { table: Constants.CLASS_CONFIGURATION_TABLE, hideRelatedLists: true, }); if (input) { if (input.action === "export") { const exportGR = new GlideRecord(Constants.EXPORT_CURRICULUM_MODEL_TABLE); exportGR.setValue("class_configuration_id", data.sys_id); exportGR.insert(); try { const exporter = new Exporter_CurriculumModel(exportGR); const attachmentId = exporter.execute(); if (GeneralUtils.isEmpty(attachmentId)) { gs.addErrorMessage("Could not generate export"); } else { data.export_url = "sys_attachment.do?sys_id=" + attachmentId; } } catch (err) { gs.addErrorMessage(err.message); } exportGR.setValue("state", ExportUtils.STATE_COMPLETE); exportGR.update(); } } })($sp, data); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-19 16:40:17</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>92f494941b2f2650065762cae54bcb56</sys_id>
<sys_mod_count>34</sys_mod_count>
<sys_name>HAISP Class Configuration Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_92f494941b2f2650065762cae54bcb56</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-19 18:36:07</sys_updated_on>
<template>
<![CDATA[ <div class="row"> <div class="col-md-9" ng-class="{'col-md-12': data.sys_id == '-1' }"> <sp-widget widget="data.form_widget"></sp-widget> </div> <div class="col-md-3" ng-if="data.sys_id && data.sys_id != '-1'"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Actions </h3> </div> <div class="panel-body"> <ul> <li> <button type="button" class="btn btn-link btn-block" ng-click="exportCurriculumModel()"> Export Curriculum Model </button> </li> </ul> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; function getSortData() { $scope.sort = { name: (() => { if ($scope.data.sort.field !== "name") { return { sort: "none", label: "Sort by curriculum model name" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by curriculum model name, ascending" }; } else { return { sort: "descending", label: "Sort by curriculum model name, descending" }; } })(), description: (() => { if ($scope.data.sort.field !== "description") { return { sort: "none", label: "Sort by description" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by description, ascending" }; } else { return { sort: "descending", label: "Sort by description, descending" }; } })(), enrollment_limit_count: (() => { if ($scope.data.sort.field !== "enrollment_limit_count") { return { sort: "none", label: "Sort by enrollment limit" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by enrollment limit, ascending" }; } else { return { sort: "descending", label: "Sort by enrollment limit, descending" }; } })(), is_active: (() => { if ($scope.data.sort.field !== "is_active") { return { sort: "none", label: "Sort by active status" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by active status, ascending" }; } else { return { sort: "descending", label: "Sort by active status, descending" }; } })(), }; } getSortData(); $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.action = "sort"; c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>th .btn { font-weight: bold; padding: 0; } [scope="row"] { font-weight: normal; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .pagination { margin: 0; } .panel-footer { display: flex; flex-wrap: wrap; gap: 0.5rem; align-items: center; justify-content: space-between; } .number { text-align: right; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-configuration-list</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Configuration List</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data) { data.page = 1; data.batchSize = 10; if (input) { if (GeneralUtils.areEqual(input.action, "paginate")) { data.page = Math.max(input.page, 1); } if (GeneralUtils.areEqual(input.action, "sort")) { data.page = 1; } } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "name", asc: false }); const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; data.rows = []; const recordGR = new GlideRecord(Constants.CLASS_CONFIGURATION_TABLE); if (data.sort.asc) { recordGR.orderBy(data.sort.field); } else { recordGR.orderByDesc(data.sort.field); } recordGR.chooseWindow(startIndex, endIndex); recordGR.query(); data.totalCount = recordGR.getRowCount(); while (recordGR.next()) { data.rows.push(GlideRecordUtils.toJson(recordGR, { full: true })); } data.showCreateCurriculumModel = true; })($sp, data); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-19 17:21:59</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>489ed0101bef2650065762cae54bcbc2</sys_id>
<sys_mod_count>17</sys_mod_count>
<sys_name>HAISP Class Configuration List</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_489ed0101bef2650065762cae54bcbc2</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-19 17:45:31</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Curriculum Models </h2> </div> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col" aria-sort="{{sort['name'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['name'].label" ng-click="sortData($event, 'name')"> Class Name <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['description'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['description'].label" ng-click="sortData($event, 'description')"> Class Description <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" class="number" aria-sort="{{sort['enrollment_limit_count'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['enrollment_limit_count'].label" ng-click="sortData($event, 'enrollment_limit_count')"> Enrollment Limit <i class="fa fa-chevron-down"></i> </button> </th> <th scope="col" aria-sort="{{sort['is_active'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['is_active'].label" ng-click="sortData($event, 'is_active')"> Active <i class="fa fa-chevron-down"></i> </button> </th> </tr> </thead> <tbody> <tr ng-repeat="row in data.rows"> <th scope="row"> <a href="?id=hsi_class_config&sys_id={{row.sys_id}}"> {{row.name || '(empty)'}} </a> </th> <td>{{row.description}}</td> <td class="number">{{row.enrollment_limit_count}}</td> <td>{{row.is_active ? 'Yes' : 'No'}}</td> </tr> </tbody> </table> </div> <div class="panel-footer"> <uib-pagination total-items="data.totalCount" ng-model="data.page" ng-change="paginate()" items-per-page="data.batchSize" class="pagination-sm" boundary-link-numbers="true"></uib-pagination> <div ng-if="data.showCreateCurriculumModel"> <a class="btn btn-primary" href="?id=hsi_class_config&sys_id=-1">Create New Curriculum Model</a> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { const c = this; $scope.submitting = false; let g_form; function redirect() { if ($scope.data.redirect_url) { location.search = $scope.data.redirect_url; } else { history.go(-1); } } function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function() { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function(e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function(e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function($scope, $uibModalInstance) { $scope.accept = function() { $uibModalInstance.close("accept"); }; $scope.dismiss = function() { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function() { const primaryActions = $scope.data.f._ui_actions.filter(function(action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function(event) { $scope.submitting = true; $scope.$evalAsync(function() { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function(event, response, savedId) { redirect(); }); $scope.cancel = function() { $scope.submitting = true; let changes = false; const data = g_form.serialize(); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function() { redirect(); }, function() { $scope.submitting = false; }); } else { redirect(); } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-haisp-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, options) { data.record_table = GeneralUtils.defaultValue(options.record_table, $sp.getParameter("record_table")); data.record_field = GeneralUtils.defaultValue(options.record_field, "sys_id"); data.record_id = GeneralUtils.defaultValue(options.record_id, $sp.getParameter(data.record_field || "")); data.show_breadcrumbs = GeneralUtils.defaultValue( !!options.breadcrumb_options?.length, options.show_breadcrumbs ); data.breadcrumb_options = GeneralUtils.defaultValue(options.breadcrumb_options, []); data.encoded_query = GeneralUtils.defaultValue(options.encoded_query, $sp.getParameter("query")); data.view_name = GeneralUtils.defaultValue(options.view_name, "default"); data.redirect_url = GeneralUtils.defaultValue(options.redirect_url, Constants.VALUE_EMPTY); data.form_title = options.form_title; if (GeneralUtils.isEmpty(data.record_table)) { data.record_id = Constants.VALUE_EMPTY; return; } const recordGR = new GlideRecordSecure(data.record_table); if (GeneralUtils.areEqual(data.record_id, "-1")) { recordGR.newRecord(); data.can_write = recordGR.canCreate(); } else if (recordGR.get(data.record_id)) { data.can_write = recordGR.canWrite(); } if (LogicUtils.not(data.can_write)) { data.record_id = Constants.VALUE_EMPTY; return; } if (GeneralUtils.isEmpty(data.form_title)) { data.form_title = [ recordGR.isNewRecord() ? "Add" : "Edit", recordGR.getLabel(), recordGR.isNewRecord() ? "" : ("(" + recordGR.getDisplayValue() + ")"), ].filter(Boolean).join(" "); } data.f = $sp.getForm(data.record_table, data.record_id, data.encoded_query, data.view_name, false); })($sp, data, options); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-06 15:48:32</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>308c49401bdfe6143b5e657fe54bcb18</sys_id>
<sys_mod_count>28</sys_mod_count>
<sys_name>HAISP Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_308c49401bdfe6143b5e657fe54bcb18</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-19 17:17:33</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.record_id" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.record_id" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> {{data.form_title}} </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb" ng-if="data.show_breadcrumbs"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li ng-repeat="breadcrumb in data.breadcrumb_options" aria-current="{{$last ? 'page' : 'false'}}" ng-class="{active: $last}"> <a ng-if="!$last" href="{{breadcrumb.url}}">{{breadcrumb.label}}</a> <span ng-if="$last">{{breadcrumb.label}}</span> </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.alert a { font-weight: 700; } .alert-success a { color: darken($brand-success, 20%); } .alert-info a { color: darken($brand-info, 20%); } .alert-warning a { color: darken($state-warning-text, 20%); } .alert-danger a { color: darken($brand-danger, 20%); } img { display: block; max-width: 100%; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>hsi-announcements</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Announcements</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.announcements = []; const today = new GlideDate().getValue(); const announcementGR = new GlideRecord(Constants.ANNOUNCEMENT_TABLE); announcementGR.addQuery("start_date", "<=", today); announcementGR.addQuery("end_date", ">=", today); let query = Constants.VALUE_EMPTY; if (SecurityUtils.isInstructor()) { const courseGA = new GlideAggregate(Constants.COURSE_INSTRUCTOR_TABLE); courseGA.addQuery("instructor_id.user_id", gs.getUserID()); courseGA.addAggregate("COUNT"); courseGA.groupBy("course_id.class_id"); courseGA.query(); const classIds = []; while (courseGA.next()) { classIds.push(courseGA.getValue("course_id.class_id")); } query = "announcement_for=academy^ORclassIN" + classIds; } else if (SecurityUtils.isStudent()) { const enrollmentGR = new GlideRecord(Constants.CLASS_ENROLLMENT_TABLE); enrollmentGR.addQuery("student_id.user_id", gs.getUserID()); enrollmentGR.query(); const classIds = []; while (enrollmentGR.next()) { classIds.push(enrollmentGR.getValue("class_id")); } query = "announcement_for=academy^ORclassIN" + classIds; } if (GeneralUtils.hasValue(query)) { announcementGR.addEncodedQuery(query); } announcementGR.orderByDesc("end_date"); announcementGR.query(); while (announcementGR.next()) { data.announcements.push({ type: announcementGR.getValue("type"), content: announcementGR.getValue("content"), announcement_for: announcementGR.getDisplayValue("announcement_for") + (announcementGR.getValue("announcement_for") === "class" ? (" " + announcementGR.getDisplayValue("class")) : ""), }); } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-07-28 03:53:31</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>024294c91b476e905c8ccbb6624bcb74</sys_id>
<sys_mod_count>29</sys_mod_count>
<sys_name>HAISP Announcements</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_024294c91b476e905c8ccbb6624bcb74</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-19 13:31:07</sys_updated_on>
<template>
<![CDATA[ <section class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Announcements </h3> </div> <div class="panel-body"> <div ng-repeat="announcement in data.announcements" class="panel panel-{{announcement.type}}" role="alert"> <div class="panel-heading"> <h4 class="panel-title"> {{announcement.announcement_for}} Announcement </h4> </div> <div class="panel-body" ng-bind-html="announcement.content"></div> </div> <p ng-if="!data.announcements.length"> There are currently no active announcements. </p> </div> </section> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-home-page</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Home Page</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-08-18 21:13:09</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>e7d94c401b23a250065762cae54bcbf3</sys_id>
<sys_mod_count>2</sys_mod_count>
<sys_name>HAISP Home Page</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_e7d94c401b23a250065762cae54bcbf3</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-18 21:15:37</sys_updated_on>
<template>
<![CDATA[ <div class="row"> <div class="col-md-3" ng-if="true"> <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> </h3> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; function deepMerge(object) { return JSON.parse(JSON.stringify(object)); } function getSortData() { $scope.sort = { class_number: (() => { if ($scope.data.sort.field !== "class_number") { return { sort: "none", label: "Sort by class number" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class number, ascending" }; } else { return { sort: "descending", label: "Sort by class number, descending" }; } })(), location_code: (() => { if ($scope.data.sort.field !== "location_code") { return { sort: "none", label: "Sort by location" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by location, ascending" }; } else { return { sort: "descending", label: "Sort by location, descending" }; } })(), state: (() => { if ($scope.data.sort.field !== "state") { return { sort: "none", label: "Sort by status" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by status, ascending" }; } else { return { sort: "descending", label: "Sort by status, descending" }; } })(), start_date: (() => { if ($scope.data.sort.field !== "start_date") { return { sort: "none", label: "Sort by class start date" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class start date, ascending" }; } else { return { sort: "descending", label: "Sort by class start date, descending" }; } })(), class_coordinator_user_id: (() => { if ($scope.data.sort.field !== "class_coordinator_user_id") { return { sort: "none", label: "Sort by class coordinator" }; } if ($scope.data.sort.asc) { return { sort: "ascending", label: "Sort by class coordinator, ascending" }; } else { return { sort: "descending", label: "Sort by class coordinator, descending" }; } })(), }; } getSortData(); const defaultFilters = { class_number: "", location_code: "", state: "", }; $scope.filters = { ...c.data.filters } || deepMerge(defaultFilters); $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.filter = function (action) { c.data.action = "filter"; if (action === "clear") { $scope.filters = deepMerge(defaultFilters); } c.data.filters = $scope.filters; c.server.update() .then(function (response) { delete c.data.action; }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, } getSortData(); c.data.action = "sort"; c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>[scope="row"] { font-weight: normal; } .breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } } .btn-clear { font-weight: bold; padding: 0; text-align: left; } [aria-sort] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .pagination { margin: 0; } .table-footer { display: flex; flex-wrap: wrap; align-items: center; justify-content: space-between; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>hsi_upcoming_courses</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Upcoming Courses</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data, options, input) { data.page = 1; data.batchSize = 25; data.filters = Object.assign( { class_number: "", location_code: "", state: "", }, options.filters ); if (input) { if (GeneralUtils.areEqual(input.action, "paginate")) { data.page = Math.max(input.page, 1); } if (GeneralUtils.areEqual(input.action, "filter")) { data.page = 1; } if (GeneralUtils.areEqual(input.action, "sort")) { data.page = 1; } data.filters = { ...data.filters, ...input.filters }; } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "start_date", asc: false }); function getEncodedQuery(filters) { const filter = []; if (GeneralUtils.hasValue(filters.class_number)) { filter.push("class_numberLIKE" + filters.class_number); } if (GeneralUtils.hasValue(filters.location_code)) { filter.push("location_code=" + filters.location_code); } if (GeneralUtils.hasValue(filters.state)) { filter.push("state=" + filters.state); } return filter.join("^"); } const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; data.classes = []; const classGR = new GlideRecord(Constants.CLASS_TABLE); const filter = getEncodedQuery(data.filters); if (GeneralUtils.hasValue(filter)) { classGR.addEncodedQuery(filter); } if (data.sort.asc) { classGR.orderBy(data.sort.field); } else { classGR.orderByDesc(data.sort.field); } classGR.chooseWindow(startIndex, endIndex); classGR.query(); data.totalCount = classGR.getRowCount(); while (classGR.next()) { data.classes.push({ ...GlideRecordUtils.toJson(classGR, { full: true }), state: GlideRecordUtils.getDisplayValue(classGR, "state"), }); } data.showCreateClass = true; data.location_codes = []; const locationGR = new GlideRecord(Constants.LOCATION_CODE_TABLE); locationGR.addQuery("is_active", true); locationGR.orderBy("name"); locationGR.query(); while (locationGR.next()) { data.location_codes.push(GlideRecordUtils.toJson(locationGR)); } })($sp, data, options, input); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JMCumbee</sys_created_by>
<sys_created_on>2025-08-18 20:10:47</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>96abf7331b9f6250065762cae54bcbf2</sys_id>
<sys_mod_count>1</sys_mod_count>
<sys_name>HSI Upcoming Courses</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_96abf7331b9f6250065762cae54bcbf2</sys_update_name>
<sys_updated_by>JMCumbee</sys_updated_by>
<sys_updated_on>2025-08-18 20:16:25</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> All Classes </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li aria-current="page" class="active">Classes</li> </ol> <div class="row"> <div class="col-md-3"> <form> <h3 class="h4"> Search Filters </h3> <fieldset> <div class="form-group"> <label for="class_number">Class Number</label> <input id="class_number" class="form-control" ng-model="filters.class_number"> </div> <footer> <button type="submit" class="btn btn-primary" ng-click="filter('filter')"> Search </button> <button type="button" class="btn btn-default" ng-click="filter('clear')"> Clear Filter </button> </footer> </fieldset> </form> </div> <div class="col-md-9"> <h3 class="h4"> Search Results </h3> <div class="table-responsive"> <table class="table table-striped"> <thead> <tr> <th scope="col" aria-sort="{{sort['class_number'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['class_number'].label}}" ng-click="sortData($event, 'class_number')"> Class Number <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['location_code'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['location_code'].label}}" ng-click="sortData($event, 'location_code')"> Location <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['state'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['state'].label}}" ng-click="sortData($event, 'state')"> Status <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['start_date'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['start_date'].label}}" ng-click="sortData($event, 'start_date')"> Class Start Date <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['class_coordinator_user_id'].sort}}"> <button type="button" class="btn btn-clear" aria-label="sort['class_coordinator_user_id'].label}}" ng-click="sortData($event, 'class_coordinator_user_id')"> Class Coordinator <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> </tr> </thead> <tbody> <tr ng-if="!data.classes.length"> <td colspan="5">No classes meet the selected criteria</td> </tr> <tr ng-repeat="row in data.classes"> <th scope="row"> <a href="?id=haisp_class_homepage&class_id={{row.sys_id}}">{{row.class_number || 'No Class Number'}}</a> </th> <td>{{row.location_code.label}}</td> <td>{{row.state}}</td> <td>{{row.start_date|date:'MM/dd/yyyy'}}</td> <td>{{row.class_coordinator_user_id.label}}</td> </tr> </tbody> </table> </div> <div class="table-footer"> <uib-pagination total-items="data.totalCount" ng-model="data.page" ng-change="paginate()" items-per-page="data.batchSize" class="pagination-sm" boundary-link-numbers="true"></uib-pagination> <div ng-if="data.showCreateClass"> <a class="btn btn-primary" href="?id=haisp_sc_cat_item&sys_id=a63ab6661b3b9a905c8ccbb6624bcbe4">Create New Class</a> </div> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function(spUtil) { /* widget controller */ const c = this; //console.log(JSON.stringify(c.data.widget)) c.data.widget.data.f._fields.reschedule_reason.value = ''; c.data.widget.data.f._fields.reschedule_reason.displayValue = ''; c.data.widget.data.f._fields.reschedule_explanation.value = ''; c.data.widget.data.f._fields.reschedule_explanation.displayValue = ''; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course Reschedule Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data) { const courseId = $sp.getParameter("course_id"); const courseGR = new GlideRecord(Constants.COURSE_TABLE); let form_title = Constants.VALUE_EMPTY; const breadcrumb_options = []; if (courseGR.get(courseId)) { const classId = GlideRecordUtils.getValue(courseGR, "class_id"); breadcrumb_options.push({ url: "?id=haisp_class_homepage&class_id=" + classId, label: GlideRecordUtils.getDisplayValue(courseGR, "class_id"), }); breadcrumb_options.push({ url: "?id=haisp_class_schedule&class_id=" + classId, label: "Class Schedule", }); breadcrumb_options.push({ url: "?id=haisp_course_homepage&course_id=" + courseId, label: GlideRecordUtils.getValue(courseGR, "instructional_block_name"), }); breadcrumb_options.push({ label: "Reschedule Course", }); form_title = "Reschedule Course (" + GlideRecordUtils.getValue(courseGR, "instructional_block_name") + ")"; } data.widget = $sp.getWidget("widget-haisp-form", { record_table: Constants.COURSE_TABLE, record_id: courseId, redirect_url: "?id=haisp_course_homepage&course_id=" + courseId, view_name: "reschedule_course", form_title, breadcrumb_options, }); })($sp, data); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-08-11 20:31:21</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>152dbfe51bdb62945c8ccbb6624bcb67</sys_id>
<sys_mod_count>9</sys_mod_count>
<sys_name>HAISP Course Reschedule Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_152dbfe51bdb62945c8ccbb6624bcb67</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-08-11 21:34:36</sys_updated_on>
<template>
<![CDATA[ <sp-widget widget="data.widget"></sp-widget> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $http, spUtil) { /* widget controller */ var c = this; $scope.jsonData = {}; $scope.fileType = ""; function clean(csvString) { var str = csvString.toString(); return str.replace(/\r(?=\n|$)/g, ''); } var fileInput = document.getElementById('csvFile'); fileInput.addEventListener('change', function(e) { var file = e.target.files[0]; if (file) { var reader = new FileReader(); reader.onload = function(e) { var csvString = e.target.result; c.data.csvData = csvString; //console.log(csvString) var lines = csvString.split('\n'); var first_line = clean(lines[0]); var headers = first_line.split(','); var jsonData = { 'records': [] }; for (var i = 1; i < lines.length - 1; i++) { var str_line = clean(lines[i]); var values = str_line.split(','); //console.log(values) var entry = {}; for (var j = 0; j < headers.length; j++) { entry[headers[j]] = values[j]; } //jsonData.push(entry); //jsonData[i] = entry; jsonData.records.push(entry); } //console.log(jsonData); $scope.jsonData = jsonData; }; reader.readAsText(file); } }); $scope.upload = function(){ var request = { method: 'POST', url: '/api/now/import/x_g_dh5_hsisat_haisp_sass_report_import/insertMultiple', data: $scope.jsonData, headers: { 'Content-Type': 'application/json', 'Accept':'application/json' } } var file_input = document.getElementById('csvFile'); $http(request).success(function(d){ spUtil.addInfoMessage("Upload was successful"); file_input.value = ""; spUtil.update($scope); setTimeout(() => { // Redirect to a specific window.location = "/hsi-academy?id=haisp_homepage"; //window.location = "?id=hsi_import_course_list&table=x_g_dh5_hsisat_course"; }, 5000); }).error(function(err){ spUtil.addErrorMessage("Upload encountered an error") file_input.value = ""; spUtil.update($scope); }) } }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>::file-selector-button { color: $brand-primary; background-color: #fff; border: 1px solid $brand-primary; padding: 6px 12px; border-radius: 4px; &:hover, &:focus { color: darken($brand-primary, 10%); border-color: darken($brand-primary,10%); } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>hsi_import_course_list</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course List Import</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>LSingh</sys_created_by>
<sys_created_on>2025-08-07 13:50:46</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>683b3d901b9b62545c8ccbb6624bcbd1</sys_id>
<sys_mod_count>6</sys_mod_count>
<sys_name>HAISP Course List Import</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_683b3d901b9b62545c8ccbb6624bcbd1</sys_update_name>
<sys_updated_by>LSingh</sys_updated_by>
<sys_updated_on>2025-08-07 15:58:37</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Import Course List</h3> </div> <form class="panel-body" aria-label="quick links"> <fieldset> <div class="form-group"> <label for="csvFile">Upload Import Course List</label> <input type='file' id="csvFile" accept=".csv"> <p class="help-block"> Upload file must be a csv. </p> </div> <button type='button' value='Upload' class="btn btn-primary" ng-click="upload()">Upload</button> </fieldset> </form> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>img { max-width: 100%; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP - Student Announcements/Course</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.isStudent = (SecurityUtils.isStudentUser() && !gs.hasRole('admin')); data.announcements = $sp.getWidget('hsi-announcements'); data.courses = $sp.getWidget('hsi-courses'); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-08-04 20:56:26</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>52af7f1b1b0baed0065762cae54bcb70</sys_id>
<sys_mod_count>5</sys_mod_count>
<sys_name>HAISP - Student Announcements/Course</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_52af7f1b1b0baed0065762cae54bcb70</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-08-07 13:35:35</sys_updated_on>
<template>
<![CDATA[ <div ng-if="c.data.isStudent"> <sp-widget widget="data.announcements"></sp-widget> <sp-widget widget="data.courses"></sp-widget> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Instructor Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.instructor_options = {}; data.instructor_options.table = "x_g_dh5_hsisat_instructor"; data.instructor_options.o = 'last_name'; data.instructor_options.show_breadcrumbs = true; data.instructor_options.show_new = true; //data.instructor_options //data.instructor_options data.instructor_list = $sp.getWidget('hsi-widget-data-table', data.instructor_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-06-11 19:56:36</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>002cad8e1b46a2103b5e657fe54bcb54</sys_id>
<sys_mod_count>6</sys_mod_count>
<sys_name>HAISP Instructor Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_002cad8e1b46a2103b5e657fe54bcb54</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-06 19:15:34</sys_updated_on>
<template>
<![CDATA[ <div> <sp-widget widget="data.instructor_list"></sp-widget> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ function ($scope, $animate, $rootScope) { $scope.$watch("data.task", function() { $scope.task = $scope.data.task; // copy for shortcuts above }) } ]]>
</client_script>
<controller_as>c</controller_as>
<css>label {font-weight:bold; margin-bottom: 0; margin-top: 10px;} .panel-body { background-color: white !important; } .form-control { background-color: #e6e8ea !important; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Approval Record</name>
<option_schema>[{"name":"","section":"other","default_value":"Part A Victim Information","label":"","type":"string"}]</option_schema>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { var gr = $sp.getRecord(); var task = getRecordBeingApproved(gr); var t = {}; t = $sp.getFieldsObject(task, 'number,short_description,opened_by,requested_by,start_date,end_date,price,recurring_price,recurring_frequency'); t.table = task.getLabel(); var items = []; var idx = 0; var itemsGR = new GlideRecord("sc_req_item"); itemsGR.addQuery("request", task.sys_id); itemsGR.query(); //while (itemsGR.next()) { if (itemsGR.next()) { var item = {}; item.short_description = itemsGR.short_description.toString(); if (itemsGR.getValue("price") > 0) item.price = itemsGR.getDisplayValue("price"); if (itemsGR.getValue("recurring_price") > 0) { item.recurring_price = itemsGR.getDisplayValue("recurring_price"); item.recurring_frequency = itemsGR.getDisplayValue("recurring_frequency"); } if (itemsGR) item.variables = $sp.getRecordVariablesArray(itemsGR); items[idx] = item; idx++; } else { // Get fields of a non-RITM record. // The "task" variable should already be a // GlideRecord of what is being approved. data.table = task.getTableName(); data.f = $sp.getForm(data.table, task.sys_id.toString(), null, "approval"); data.v = $sp.getWidget("sp-variable-editor",{table: data.table, sys_id: task.sys_id.toString()}); for (var prop in data.f._fields) { data.f._fields[prop]["sys_readonly"] = true; } } data.items = items; data.sys_id = gr.getUniqueValue(); data.task = t; //if (task) //data.variables = $sp.getRecordVariablesArray(task); function getRecordBeingApproved(gr) { if (!gr.sysapproval.nil()) return gr.sysapproval.getRefRecord(); return gr.document_id.getRefRecord(); } var ticketConversationOptions = { sys_id: task.getUniqueValue(), table: task.getTableName(), title: gs.getMessage("Activity Stream"), placeholder: gs.getMessage("Type your message here..."), placeholderNoEntries: gs.getMessage("Start a conversation..."), btnLabel: gs.getMessage("Send") }; data.ticketConversation = $sp.getWidget('widget-ticket-conversation', ticketConversationOptions); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-08-06 18:40:43</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>0ef3bd881b572a143b5e657fe54bcb03</sys_id>
<sys_mod_count>5</sys_mod_count>
<sys_name>HAISP Approval Record</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_0ef3bd881b572a143b5e657fe54bcb03</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-08-06 18:49:46</sys_updated_on>
<template>
<![CDATA[ <div> <div class="panel panel-{{::options.color}} b"> <div class="panel-heading"> <h4 class="panel-title">${Details for {{::task.table}} {{::task.number.display_value}}}</h4> </div> <div class="panel-body"> <fieldset disabled> <sp-model form-model="data.f" mandatory="mandatory"></sp-model> </fieldset> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function() { /* widget controller */ const c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-course-session-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course Session Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function($sp, data) { const courseId = $sp.getParameter("course_id"); const courseGR = new GlideRecord(Constants.COURSE_TABLE); let form_title = Constants.VALUE_EMPTY; const breadcrumb_options = []; if (courseGR.get(courseId)) { const classId = GlideRecordUtils.getValue(courseGR, "class_id"); breadcrumb_options.push({ url: "?id=haisp_class_homepage&class_id=" + classId, label: GlideRecordUtils.getDisplayValue(courseGR, "class_id"), }); breadcrumb_options.push({ url: "?id=haisp_class_schedule&class_id=" + classId, label: "Class Schedule", }); breadcrumb_options.push({ url: "?id=haisp_course_homepage&course_id=" + courseId, label: GlideRecordUtils.getValue(courseGR, "instructional_block_name"), }); breadcrumb_options.push({ label: "Edit Session Details", }); form_title = "Edit Session Details (" + GlideRecordUtils.getValue(courseGR, "instructional_block_name") + ")"; } data.widget = $sp.getWidget("widget-haisp-form", { record_table: Constants.COURSE_TABLE, record_id: courseId, redirect_url: "?id=haisp_course_homepage&course_id=" + courseId, view_name: "edit_session", form_title, breadcrumb_options, }); })($sp, data); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-28 20:09:29</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>d2f1fbc51bc7ea903b5e657fe54bcb9d</sys_id>
<sys_mod_count>13</sys_mod_count>
<sys_name>HAISP Course Session Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_d2f1fbc51bc7ea903b5e657fe54bcb9d</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-06 17:56:52</sys_updated_on>
<template>
<![CDATA[ <sp-widget widget="data.widget"></sp-widget> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>img { max-width: 100%; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP - NonStudent Announcements/Course</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.isStudent = (SecurityUtils.isStudentUser() && !gs.hasRole('admin')); data.announcements = $sp.getWidget('hsi-announcements'); data.courses = $sp.getWidget('hsi-courses'); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-08-04 21:03:22</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>007108ef1b0baed0065762cae54bcb17</sys_id>
<sys_mod_count>3</sys_mod_count>
<sys_name>HAISP - NonStudent Announcements/Course</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_007108ef1b0baed0065762cae54bcb17</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-08-05 15:35:05</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!c.data.isStudent"> <sp-widget widget="data.announcements"></sp-widget> <sp-widget widget="data.courses"></sp-widget> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $location, $window, spUtil) { /* widget controller */ var c = this; if (c.data.newUI) { const search = new URLSearchParams(location.search); const sysId = search.get("sys_id"); if (sysId && sysId !== "-1") { location.search = "?id=haisp_course_configurations_form&sys_id=" + sysId; } else { const parentId = search.get("query").split("=")[1]; location.search = "?id=haisp_course_configurations_form&parent_id=" + parentId; } return; } //console.log(c.data.instructor_roles) $scope.mandatory = []; if(!c.data.new_record){ var pref_1_sys_id = c.data.preferences[0]?._fields.facility_id.value; var pref_2_sys_id = 'sys_id!=' + c.data.preferences[1]?._fields.facility_id.value; var pref_3_sys_id = c.data.preferences[2]?._fields.facility_id.value; $scope.pref_1 = { displayValue: c.data.preferences[0]?._fields.facility_id.displayValue || '', value: c.data.preferences[0]?._fields.facility_id.value || '', name: 'pref_1', 'default-query': 'sys_id!=' + pref_2_sys_id } if ($scope.pref_1.value == '') { c.hide2 = true; } $scope.pref_2 = { displayValue: c.data.preferences[1]?._fields.facility_id.displayValue || '', value: c.data.preferences[1]?._fields.facility_id.value || '', name: 'pref_2' } if ($scope.pref_2.value == '') { c.hide3 = true; } $scope.pref_3 = { displayValue: c.data.preferences[2]?._fields.facility_id.displayValue || '', value: c.data.preferences[2]?._fields.facility_id.value || '', name: 'pref_3' } if ($scope.pref_1.value == '') { $scope.mandatory.push({ 'label': 'Facility ID' }); } } $scope.saveForm = function(action) { c.data.action = action; c.server.update().then(function() { var new_url = ""; if(action == 'save'){ console.log(c.data.sys_id); console.log(c.data.class_configuration); if(c.data.reload == 'new'){ new_url = "id=hsi_course_configuration&table=x_g_dh5_hsisat_course_configuration&sys_id=" + c.data.sys_id + "&query=class_configuration_id=" + c.data.class_configuration; $location.search(new_url); } if(c.data.reload == 'refresh'){ $window.location.reload(); } } if(action == 'submit'){ new_url = "id=hsi_class_config&table=x_g_dh5_hsisat_class_configuration&sys_id=" + c.data.class_configuration; $location.search(new_url); } }) } $scope.addRole = function() { c.data.instructor_roles.push({ 'sys_id': '', 'instructor_role_code': { 'value': '', 'displayValue': '' }, 'instructor_count': { 'value': '', 'displayValue': '' }, 'certifications': { 'value': '', 'displayValue': '' }, 'skills': { 'value': '', 'displayValue': '' } }) } $scope.deleteRole = function(index) { //console.log(index); if (c.data.instructor_roles[index].sys_id != "") { c.data.deleted.push(c.data.instructor_roles[index].sys_id); } //console.log($scope.deleted); c.data.instructor_roles.splice(index, 1); } $scope.$on("field.change", function(evt, parms) { console.log(parms.field.name); //console.log(parms.newValue); //console.log(JSON.stringify(parms)); //console.log(JSON.stringify($scope.mandatory)) if (parms.field.name == 'pref_1') { setPref(0, parms.newValue, parms.displayValue); c.data.pref_2_sys_id = 'sys_id!=' + parms.newValue + '^sys_id!=' + c.data.preferences[2]._fields.facility_id.value; c.data.pref_3_sys_id = 'sys_id!=' + parms.newValue + '^sys_id!=' + c.data.preferences[1]._fields.facility_id.value; if (parms.newValue == '') { $scope.pref_1.value = $scope.pref_2.value; $scope.pref_1.displayValue = $scope.pref_2.displayValue; setPref(0, $scope.pref_2.value, $scope.pref_2.displayValue); $scope.pref_2.value = $scope.pref_3.value; $scope.pref_2.displayValue = $scope.pref_3.displayValue; setPref(1, $scope.pref_3.value, $scope.pref_3.displayValue); $scope.pref_3.value = ''; $scope.pref_3.displayValue = ''; setPref(2, '', ''); } if ($scope.pref_1.value == '') { c.hide2 = true; } else { c.hide2 = false; } } if (parms.field.name == 'pref_2') { setPref(1, parms.newValue, parms.displayValue); c.data.pref_1_sys_id = 'sys_id!=' + parms.newValue + '^sys_id!=' + c.data.preferences[2]._fields.facility_id.value; c.data.pref_3_sys_id = 'sys_id!=' + parms.newValue + '^sys_id!=' + c.data.preferences[0]._fields.facility_id.value; if (parms.newValue == '') { $scope.pref_2.value = $scope.pref_3.value; $scope.pref_2.displayValue = $scope.pref_3.displayValue; setPref(1, $scope.pref_3.value, $scope.pref_3.displayValue); $scope.pref_3.value = ''; $scope.pref_3.displayValue = ''; setPref(2, '', ''); } if ($scope.pref_2.value == '') { c.hide3 = true; } else { c.hide3 = false; } } if (parms.field.name == 'pref_3') { setPref(2, parms.newValue, parms.displayValue); c.data.pref_1_sys_id = 'sys_id!=' + parms.newValue + '^sys_id!=' + c.data.preferences[1]._fields.facility_id.value; c.data.pref_2_sys_id = 'sys_id!=' + parms.newValue + '^sys_id!=' + c.data.preferences[0]._fields.facility_id.value; } function setPref(arr_in, newValue, displayValue) { c.data.preferences[arr_in]._fields.facility_id.value = newValue; c.data.preferences[arr_in]._fields.facility_id.displayValue = displayValue; } }); //console.log(JSON.stringify(c.data.f)); //console.log(pref_2_sys_id); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.btn { margin-left: 15px; } .asterisk-div { margin: 2rem 0 1.5rem; } .row { margin-left: -1.5rem; margin-right: -1.5rem; } .pull-right { float: right !important; } .panel-footer { padding: 1rem 1.5rem; background-color: #f5f5f5; border-top: .1rem solid #ddd; border-bottom-right-radius: .3rem; border-bottom-left-radius: .3rem; } * { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; } .sc-field-error-label { margin-right: .5em; display: inline-block; background-color: #d54309; } .alert { padding: 1.5rem; margin-bottom: 2rem; border: .1rem solid transparent; border-radius: .4rem; } .alert-info { color: #2390b0; background-color: white; border-color: #5bc0de; } table.panel { width: 95%; margin-top: 1.5rem; margin-left: 1.5rem; margin-right: 1.5rem; } td { padding: 5px; } .facility-header { margin-left: 1.5rem; } .role-btn { margin-left: 1.5rem; } .red { color: red; margin-left: 1rem; } .academics { background-color:#ffffff; border:solid 1px #d3d6dc; padding-left:2px; padding-right:2px; } .defensive { background-color:#b8d3ef; padding-left:2px; padding-right:2px; } .entry { background-color:#A9DA89; padding-left:2px; padding-right:2px; } .firearms { background-color:#FF7474; padding-left:2px; padding-right:2px; } .physical { background-color:#E4E4E4; padding-left:2px; padding-right:2px; } .academics_cci { background-color:#F9CF93; padding-left:2px; padding-right:2px; } .academy { background-color:#5EAF41; padding-left:2px; padding-right:2px; } .student { background-color:#FFF586; padding-left:2px; padding-right:2px; } .legal { background-color:#D8AAED; padding-left:2px; padding-right:2px; } .misc { background-color:#FFC4CD; padding-left:2px; padding-right:2px; } .cbp { background-color:#92FFE9; padding-left:2px; padding-right:2px; } .hq { background-color:#92FFE9; padding-left:2px; padding-right:2px; } .opr { background-color:#92FFE9; padding-left:2px; padding-right:2px; } .isd { background-color:#92FFE9; padding-left:2px; padding-right:2px; } </css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Course Configuration Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.newUI = GeneralUtils.getProperty("x_g_dh5_hsisat.feature.ui.v2"); data.table = $sp.getParameter('table'); data.sys_id = $sp.getParameter('sys_id'); if($sp.getParameter('query')){ data.query = $sp.getParameter('query'); data.class_configuration = data.query.split('=')[1]; } else { var gr_cc = new GlideRecordSecure(data.table); gr_cc.get(data.sys_id); data.class_configuration = gr_cc.getValue('class_configuration_id'); } data.preferences = []; data.deleted = []; data.new_record = (data.sys_id == -1); //console.log(data.class_configuration); if(input){ data.f = input.f; if(!data.new_record){ data.preferences = input.preferences; data.instructor_roles = input.instructor_roles; var dataChanged = false; var gr_update = new GlideRecordSecure(data.table); gr_update.get(data.sys_id); for(var f in data.f._fields){ if((gr_update.getValue(f) || '') != data.f._fields[f].value){ //console.log(f + ' = ' + (gr_update.getValue(f) || '') + ' - ' + data.f._fields[f].value) gr_update.setValue(f, data.f._fields[f].value); dataChanged = true; } } if(dataChanged){ gr_update.update(); } for(var p in data.preferences){ console.log(JSON.stringify(data.preferences[p])) var pref_sys_id = data.preferences[p].sys_id var gr_pref = new GlideRecordSecure('x_g_dh5_hsisat_course_facility_preference'); gr_pref.get(pref_sys_id); gr_pref.setValue('facility_id', data.preferences[p]._fields.facility_id.value); gr_pref.update(); //console.log(data.preferences[p]._fields.facility_id.displayValue); } if(data.instructor_roles.length > 0){ for(var c in data.instructor_roles){ var c_config = data.instructor_roles[c]; //console.log(c_config); if(c_config.sys_id == ''){ var gr_cic_ins = new GlideRecordSecure("x_g_dh5_hsisat_course_instructor_configuration"); gr_cic_ins.initialize(); gr_cic_ins.setValue('course_configuration_id', data.sys_id); gr_cic_ins.setValue('instructor_role_code', c_config.instructor_role_code.value); gr_cic_ins.setValue('instructor_count', c_config.instructor_count.value); gr_cic_ins.setValue('certifications', c_config.certifications.value); gr_cic_ins.setValue('skills', c_config.skills.value); gr_cic_ins.insert(); } if(c_config.sys_id != ''){ var gr_cic_upd = new GlideRecordSecure("x_g_dh5_hsisat_course_instructor_configuration"); gr_cic_upd.get(c_config.sys_id); gr_cic_upd.setValue('instructor_role_code', c_config.instructor_role_code.value); gr_cic_upd.setValue('instructor_count', c_config.instructor_count.value); gr_cic_upd.setValue('certifications', c_config.certifications.value); gr_cic_upd.setValue('skills', c_config.skills.value); gr_cic_upd.update(); } } } if(input.deleted.length > 0){ for(var cic in input.deleted){ var gr_del = new GlideRecordSecure("x_g_dh5_hsisat_course_instructor_configuration"); gr_del.get(input.deleted[cic]); gr_del.deleteRecord(); } } data.reload = 'refresh'; } if(data.new_record){ var gr_ins = new GlideRecordSecure(data.table); gr_ins.initialize(); for(var f in data.f._fields){ gr_ins.setValue(f, data.f._fields[f].value); } data.sys_id = gr_ins.insert(); console.log('inserted sys_id ' + data.sys_id); var count = [1,2,3]; for (var c in count) { var gr_fac = new GlideRecord("x_g_dh5_hsisat_course_facility_preference"); gr_fac.initialize(); gr_fac.setValue('course_configuration_id', data.sys_id); gr_fac.setValue('preference_order', count[c]); gr_fac.insert(); } data.reload = 'new'; data.new_record = false; } } data.f = $sp.getForm(data.table, data.sys_id); if(!data.new_record){ var gr = new GlideRecordSecure("x_g_dh5_hsisat_course_facility_preference"); gr.addQuery('course_configuration_id', data.sys_id); gr.orderBy('preference_order'); gr.query(); while(gr.next()){ data.preferences.push($sp.getForm("x_g_dh5_hsisat_course_facility_preference", gr.getValue(('sys_id')))); } //data.pref_1_sys_id = 'sys_id!=' + data.preferences[1]._fields.facility_id.value + '^sys_id!=' + data.preferences[2]._fields.facility_id.value; //data.pref_2_sys_id = 'sys_id!=' + data.preferences[0]._fields.facility_id.value + '^sys_id!=' + data.preferences[2]._fields.facility_id.value; //data.pref_3_sys_id = 'sys_id!=' + data.preferences[0]._fields.facility_id.value + '^sys_id!=' + data.preferences[1]._fields.facility_id.value; data.instructor_roles = []; var gr_roles = new GlideRecordSecure("x_g_dh5_hsisat_course_instructor_configuration"); gr_roles.addQuery('course_configuration_id', data.sys_id); gr_roles.query(); while(gr_roles.next()){ data.instructor_roles.push({ 'sys_id': gr_roles.getValue('sys_id'), 'instructor_role_code': { 'value': gr_roles.getValue('instructor_role_code'), 'displayValue': gr_roles.getDisplayValue('instructor_role_code') }, 'instructor_count': { 'value': parseInt(gr_roles.getValue('instructor_count')), 'displayValue': gr_roles.getDisplayValue('instructor_count') }, 'certifications': { 'value': gr_roles.getValue('certifications'), 'displayValue': gr_roles.getDisplayValue('certifications') }, 'skills': { 'value': gr_roles.getValue('skills'), 'displayValue': gr_roles.getDisplayValue('skills') } }) } } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-05-29 14:51:48</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>8dd96db91b7da6105c8ccbb6624bcbcb</sys_id>
<sys_mod_count>364</sys_mod_count>
<sys_name>HAISP Course Configuration Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_8dd96db91b7da6105c8ccbb6624bcbcb</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-05 13:49:24</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Course Configuration</h3> </div> <nav class="panel-body"> <div class="asterisk-div ng-scope"> <span class="fa fa-asterisk asterisk mandatory" title="asterisk"></span> Indicates required </div> <sp-model form_model="data.f" mandatory="mandatory"></sp-model> <!-- Facility Preferences --> <div ng-if="!c.data.new_record"> <row class="col-lg-12"> <div class=""> <span class="h4 ng-binding facility-header" role="heading" aria-level="3">FACILITY PREFERENCES</span> <table class="panel panel-default"> <tr> <td></td> <td class="col-md-6">Facility</td> <td class="col-md-6">Preference Order</td> </tr> <tr> <td><span style="padding-right: .25em" title="Mandatory" class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': c.data.preferences[0]._fields.facility_id.value+'' != ''}"></span></td> <td> <sn-record-picker field="pref_1" table="'x_g_dh5_hsisat_facility'" display-field="'building_room'" value-field="'sys_id'" search-fields="'building_room'" page-size="100" default-query="data.pref_1_sys_id"> </sn-record-picker> </td> <td> <input class="ng-scope form-control" ng-model="c.data.preferences[0]._fields.preference_order.value" readonly="true"> </td> </tr> <tr> <td></td> <td> <sn-record-picker field="pref_2" table="'x_g_dh5_hsisat_facility'" display-field="'building_room'" value-field="'sys_id'" search-fields="'building_room'" sn-disabled="c.hide2" page-size="100" default-query="data.pref_2_sys_id"> </sn-record-picker> </td> <td> <input class="ng-scope form-control" ng-model="c.data.preferences[1]._fields.preference_order.value" readonly="true"> </td> </tr> <tr> <td></td> <td> <sn-record-picker field="pref_3" table="'x_g_dh5_hsisat_facility'" display-field="'building_room'" value-field="'sys_id'" search-fields="'building_room'" sn-disabled="c.hide3" page-size="100" default-query="data.pref_3_sys_id"> </sn-record-picker> </td> <td> <input class="ng-scope form-control" ng-model="c.data.preferences[2]._fields.preference_order.value" readonly="true"> </td> </tr> </table> </div> </row> <!-- Instructor Requirements Section --> <row class="col-lg-12"> <div class=""> <span class="h4 ng-binding facility-header" role="heading" aria-level="3">INSTRUCTOR REQUIREMENTS</span> <table class="panel panel-default"> <tr> <th></th> <td class="col-md-3">Instructor Role</td> <td class="col-md-3">Number of Instructors</td> <td class="col-md-3">Required Certifications</td> <td class="col-md-3">Preferred Knowledge Areas</td> </tr> <tr ng-repeat="r in c.data.instructor_roles"> <td><span style="padding-right: .25em" class="fa fa-times red" ng-click="deleteRole($index)"></span></td> <td> <sn-record-picker field="c.data.instructor_roles[$index].instructor_role_code" table="'x_g_dh5_hsisat_instructor_role_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" default-query="'is_active=true'"> </sn-record-picker> </td> <td> <input type="number" class="ng-scope form-control" ng-model="r.instructor_count.value"> </td> <td> <sn-record-picker field="c.data.instructor_roles[$index].certifications" table="'x_g_dh5_hsisat_certification_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" multiple="true" page-size="100" default-query="'is_active=true'"> </sn-record-picker> </td> <td> <sn-record-picker field="c.data.instructor_roles[$index].skills" table="'x_g_dh5_hsisat_instructor_skill_code'" display-field="'name'" value-field="'sys_id'" search-fields="'name'" multiple="true" page-size="100" default-query="'is_active=true'"> </sn-record-picker> </td> </tr> </table> <button class="btn btn-primary role-btn" ng-click="addRole()"> Add Instructor Role </button> </div> </row> </div> </nav> <div class="panel-footer"> <button type="submit" ng-click="saveForm('submit')" ng-disabled="submitting" class="btn btn-primary action-btn pull-right ng-scope" ng-if="!c.data.new_record"> Submit and Return </button> <button type="submit" ng-click="saveForm('save')" ng-disabled="submitting" class="btn btn-primary action-btn pull-right ng-scope"> Save </button> <div style="clear: both;"></div> <div ng-if="mandatory.length" class="alert alert-info ng-scope" style="margin-top: 0.5em;" aria-live="polite" aria-atomic="true"> <!-- ngIf: mandatory.length > 0 --> <span ng-if="mandatory.length &gt; 0" class="ng-scope"> Required information </span> <!-- end ngIf: mandatory.length > 0 --> <!-- ngRepeat: f in mandatory --> <span ng-repeat="f in mandatory" class="label sc-field-error-label ng-binding ng-scope" ng-bind="f.label"></span> <!-- end ngRepeat: f in mandatory --> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function() { var c = this; c.selected = []; // ng-sortable clone means cannot reorder c.availableAs = { itemMoved: function (event) { event.source.itemScope.item.used = true; }, clone: true // clone this side } c.selectedAs = { itemMoved: function (event) { // moved back to available var item = event.source.itemScope.item; moveToAvailable(item); removeItem(c.data.class_enrollment, item); }, dragStart: function () { c.availableAs.clone = false; }, dragEnd: function () { c.availableAs.clone = true; } } // double moves from Available to Selected c.onDblClick = function(item) { var t = angular.copy(item); item.used = true; // original is now used c.selected.push(t); } // double on selected removes and unsets Available used c.onSelDblClick = function(item) { moveToAvailable(item); removeItem(c.selected, item); } function removeItem(array, item) { var n = array.indexOf(item); if (n !== -1) array.splice(n, 1); } function moveToAvailable(item) { var t = item.sys_id.value; angular.forEach(c.data.class_enrollment, function(target) { if (target.sys_id.value == t) target.used = false; }) } } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-class-enrollment-update-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Enrollment Update Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecord(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.canEdit = classGR.canWrite(); data.class_enrollment = []; const enrollmentGR = new GlideRecord(Constants.CLASS_ENROLLMENT_TABLE); enrollmentGR.addQuery("class_id", data.classId); enrollmentGR.orderBy("name"); enrollmentGR.query(); while (enrollmentGR.next()) { data.class_enrollment.push({ sys_id: enrollmentGR.getUniqueValue(), user_id: GlideRecordUtils.getValue(enrollmentGR, "student_id.user_id"), name: GlideRecordUtils.getDisplayValue(enrollmentGR, "student_id") }); } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-29 13:45:47</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>c1a32f9d1b4f6e903b5e657fe54bcba9</sys_id>
<sys_mod_count>17</sys_mod_count>
<sys_name>HAISP Class Enrollment Update Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_c1a32f9d1b4f6e903b5e657fe54bcba9</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 16:19:10</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div class="panel panel-default" ng-if="data.classId && data.canEdit"> <div class="panel-heading"> <h2 class="panel-title"> Update Class Roster ({{data.class_details.class_number}}) </h2> </div> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.classId}}">{{data.class_details.class_number}}</a> </li> <li> <a href="?id=haisp_class_enrollment&class_id={{data.classId}}">Class Enrollment</a> </li> <li aria-current="page" class="active"> Update Class Roster </li> </ol> <div class="row"> <div class="col-md-6"> <h3> Available </h3> <div> <div ng-repeat="item in c.data.class_enrollment|filter:c.search" ng-dblclick="c.onDblClick(item)"> <div> <span>{{item.name}}</span> </div> </div> </div> </div> <div class="col-md-6"> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; let g_form; function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function (e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function () { const primaryActions = $scope.data.f._ui_actions.filter(function (action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function (event) { $scope.submitting = true; const activeElement = document.activeElement; if (activeElement) activeElement.blur(); $scope.$evalAsync(function () { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function(event, response, savedId) { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }); $scope.$on("$sp.html.editor.progress", function (event, conf) { spUtil.addInfoMessage(conf.state); }); $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_form.serialize(document.getElementById("form-widget")); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-add-announcement</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Add Announcement</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } const announcementGR = new GlideRecord(Constants.ANNOUNCEMENT_TABLE); announcementGR.addQuery("class", data.classId); announcementGR.addQuery("announcement_for", "class"); data.canCreate = announcementGR.canCreate(); if (LogicUtils.not(data.canCreate)) return; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.f = $sp.getForm(announcementGR.getTableName(), "-1", announcementGR.getEncodedQuery(), "add_announcement", false); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-25 21:33:26</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>436828d01bc762903b5e657fe54bcbb7</sys_id>
<sys_mod_count>17</sys_mod_count>
<sys_name>HAISP Class Add Announcement</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_436828d01bc762903b5e657fe54bcbb7</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 16:18:33</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId || !data.canCreate" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.classId && data.canCreate" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Add Announcement ({{data.class_details.class_number}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Create Announcement </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; let g_form; function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function (e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function () { const primaryActions = $scope.data.f._ui_actions.filter(function (action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function (event) { $scope.submitting = true; const activeElement = document.activeElement; if (activeElement) activeElement.blur(); $scope.$evalAsync(function () { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function(event, response, savedId) { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; }); $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_form.serialize(document.getElementById("form-widget")); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-enrollment-edit-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Enrollment Edit Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.enrollmentId = $sp.getParameter("enrollment_id"); if (GeneralUtils.isEmpty(data.enrollmentId)) return; const enrollmentGR = new GlideRecordSecure(Constants.CLASS_ENROLLMENT_TABLE); if (LogicUtils.not(enrollmentGR.get(data.enrollmentId))) { data.enrollmentId = Constants.VALUE_EMPTY; return; } const classGR = enrollmentGR.class_id.getRefRecord(); if (LogicUtils.not(LogicUtils.and(classGR.isValidRecord(), classGR.canRead()))) { data.enrollmentId = Constants.VALUE_EMPTY; return; } data.classId = classGR.getUniqueValue(); data.canEdit = enrollmentGR.canWrite(); if (LogicUtils.not(data.canEdit)) return; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.enrollment_details = GlideRecordUtils.toJson(enrollmentGR, { full: true }); data.f = $sp.getForm(enrollmentGR.getTableName(), data.enrollmentId, "", "edit_enrollment", false); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-25 17:48:36</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>6df43fc81bcf22903b5e657fe54bcb7a</sys_id>
<sys_mod_count>5</sys_mod_count>
<sys_name>HAISP Class Enrollment Edit Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_6df43fc81bcf22903b5e657fe54bcb7a</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 16:18:21</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.enrollmentId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.classId && data.canEdit" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Edit Student Enrollment ({{data.enrollment_details.student_id.label}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li> <a href="?id=haisp_class_enrollment&class_id={{data.class_details.sys_id}}">Class Enrollment</a> </li> <li aria-current="page" class="active"> Edit Enrolled Student </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; let g_form; function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function (e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function () { const primaryActions = $scope.data.f._ui_actions.filter(function (action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function (event) { $scope.submitting = true; const activeElement = document.activeElement; if (activeElement) activeElement.blur(); $scope.$evalAsync(function () { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function(event, response, savedId) { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }); $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_form.serialize(document.getElementById("form-widget")); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-cancellation-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Cancellation Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.canEdit = classGR.canWrite(); if (LogicUtils.not(data.canEdit)) return; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.f = $sp.getForm(classGR.getTableName(), data.classId, "", "cancel_class", false); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-24 20:46:27</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>cd14977f1bb26e503b5e657fe54bcb4d</sys_id>
<sys_mod_count>22</sys_mod_count>
<sys_name>HAISP Class Cancellation Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_cd14977f1bb26e503b5e657fe54bcb4d</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 16:18:10</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.classId && data.canEdit" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Cancel Class ({{data.class_details.class_number}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Cancel Class </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; let g_form; function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function (e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function () { const primaryActions = $scope.data.f._ui_actions.filter(function (action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function (event) { $scope.submitting = true; $scope.$evalAsync(function () { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function(event, response, savedId) { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }); $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_form.serialize(document.getElementById("form-widget")); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-dates-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Dates Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id") || "77df00f61beae210065762cae54bcb8a"; if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.canEdit = classGR.canWrite(); if (LogicUtils.not(data.canEdit)) return; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.f = $sp.getForm(classGR.getTableName(), data.classId, "", "edit_dates", false); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-24 14:36:23</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>c86ff9371bb22e503b5e657fe54bcb37</sys_id>
<sys_mod_count>14</sys_mod_count>
<sys_name>HAISP Class Dates Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_c86ff9371bb22e503b5e657fe54bcb37</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 16:17:57</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.classId && data.canEdit" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Edit Class Dates ({{data.class_details.class_number}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Edit Class Dates </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; let g_form; function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function (e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function () { const primaryActions = $scope.data.f._ui_actions.filter(function (action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function (event) { $scope.submitting = true; $scope.$evalAsync(function () { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function (event, response, savedId) { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }); $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_form.serialize(document.getElementById("form-widget")); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_class_homepage&class_id=" + $scope.data.classId; } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-details-form</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Details Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id") || "77df00f61beae210065762cae54bcb8a"; if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } data.canEdit = classGR.canWrite(); if (LogicUtils.not(data.canEdit)) return; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.f = $sp.getForm(classGR.getTableName(), data.classId, "", "edit_details", false); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-23 21:18:10</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>3e911ee31b3e6a503b5e657fe54bcb74</sys_id>
<sys_mod_count>57</sys_mod_count>
<sys_name>HAISP Class Details Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_3e911ee31b3e6a503b5e657fe54bcb74</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 16:17:46</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.classId && data.canEdit" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Edit Class Details ({{data.class_details.class_number}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_classes">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li aria-current="page" class="active"> Edit Class Details </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; if (c.data.newUI) { location.search = "?id=haisp_classes"; return; } }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Classes Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.newUI = GeneralUtils.getProperty("x_g_dh5_hsisat.feature.ui.v2"); var class_sys_id = $sp.getParameter('sys_id'); data.classes_options = {}; data.classes_options.table = "x_g_dh5_hsisat_class"; data.classes_options.show_new = true; data.classes_options.show_breadcrumbs = false; data.classes_list = $sp.getWidget('hsi-widget-data-table', data.classes_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-07-15 13:00:25</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>e6135ffc1bba6650065762cae54bcb9f</sys_id>
<sys_mod_count>4</sys_mod_count>
<sys_name>HAISP Classes Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_e6135ffc1bba6650065762cae54bcb9f</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 15:58:29</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.newUI"> <sp-widget widget="data.classes_list"></sp-widget> </div> <div ng-if="data.newUI" class="panel panel-default"> <div class="panel-body"> Redirecting... </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope, $location, $window, spUtil, spModal) { var c = this; if (c.data.newUI) { location.search = "?id=haisp_course_homepage&course_id=" + c.data.sys_id; } c.data.deleted = []; $scope.mandatory = []; //console.log(c.data.facilities); console.log(c.data.unApproved); $scope.approveFacility = function() { var body = ""; body += '<p>Assigned facility(s) for course are sufficient for the course requirements and do not require a change of venue?</p>'; body += getFacilities(); spModal.open({ title: 'Approve Facility(s)', message: body, buttons: [ {label:'${Yes}', 'class': 'btn-primary'}, {label:'${Cancel}', cancel: true}, ] }).then(function(choice) { c.data.action = 'approve'; c.server.update().then(function () { }) }, function() { // Cancel }); } $scope.requestChange = function() { c.data.action = 'notify'; c.server.update().then(function () {}) } $scope.saveForm = function(action) { if($scope.mandatory.length > 0){ spUtil.addErrorMessage('Mandatory fields are missing'); } else { c.data.action = action; c.server.update().then(function() { var new_url = ""; if(action == 'save'){ //console.log(c.data.sys_id); //console.log(c.data.class_configuration); $window.location.reload(); } if(action == 'submit'){ new_url = "id=haisp_class_form&table=x_g_dh5_hsisat_class&sys_id=" + c.data.class; $location.search(new_url); } }) } } function getFacilities() { var str = "<p>"; c.data.facilities.forEach(function(facility){ str += ' • ' + facility.facility_id.displayValue + '<br>'; }) str += '</p>'; return str; }; } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.btn { margin-left: 15px; } td { padding-right: 30px; padding-top: 15px; } .sc-field-error-label { margin-right: .5em; display: inline-block; background-color: #d54309; } .ins_sect { padding-top: 20px; clear: both; } .add-fac-btn { margin-top: 15px; clear: both; } .red { color: red; margin-left: 1rem; } .fac-td { padding-right: 5px; } .list-btn-cont { padding: 20px; } .preferred_error { background-color: #e3a3b0; border: 1px solid #db4730; width: 100%; padding: 8px; border-radius: 5px; } .preferred_error span { padding-right: 10px; } .facility-picker { margin-bottom: 2px; } .facility-picker-red { border: solid 1px red; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Course</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ // data.sys_id = $sp.getParameter('sys_id'); // data -> client = $scope.data // data -> template = data.instructors data.newUI = GeneralUtils.getProperty("x_g_dh5_hsisat.feature.ui.v2"); data.sys_id = $sp.getParameter('sys_id'); data.deleted = []; data.notified = false; var gr_c = new GlideRecordSecure("x_g_dh5_hsisat_course"); gr_c.get(data.sys_id); data.class = gr_c.getValue('class_id'); data.f = $sp.getForm( gr_c.getTableName(), data.sys_id ); var notifIncrement = Number(gr_c.getValue('notified_fletc_request_sent')); if(input){ if(input.action == 'approve'){ //console.log(input.action); var gr_approve_facs = new GlideRecordSecure('x_g_dh5_hsisat_course_facility'); gr_approve_facs.addQuery('course_id', data.sys_id); gr_approve_facs.query(); while(gr_approve_facs.next()){ gr_approve_facs.setValue('is_approved', true); gr_approve_facs.update(); } } else if(input.action == 'notify') { data.notified = true; gs.eventQueue('x_g_dh5_hsisat.notify_fletc', gr_c); notifIncrement += 1; gr_c.setValue('notified_fletc_request_sent', notifIncrement); gr_c.update(); } else { data.f = input.f; data.facilities = input.facilities; var dataChanged = false; var gr_update = new GlideRecordSecure('x_g_dh5_hsisat_course'); gr_update.get(data.sys_id); for(var f in data.f._fields){ if((gr_update.getValue(f) || '') != data.f._fields[f].value){ //console.log(f + ' = ' + (gr_update.getValue(f) || '') + ' - ' + data.f._fields[f].value) gr_update.setValue(f, data.f._fields[f].value); dataChanged = true; } } if(dataChanged){ gr_update.update(); } if(data.facilities.length > 0){ for(var f in data.facilities){ var fac = data.facilities[f]; //console.log(c_config); var gr_fac_upd = new GlideRecordSecure("x_g_dh5_hsisat_course_facility"); gr_fac_upd.get(fac.sys_id); gr_fac_upd.setValue('course_id', data.sys_id); gr_fac_upd.setValue('facility_id', fac.facility_id.value); gr_fac_upd.update(); } } } } data.instructors = []; var gr_roles = new GlideRecordSecure("x_g_dh5_hsisat_course_instructor"); gr_roles.addQuery('course_id', data.sys_id); gr_roles.query(); while (gr_roles.next()) { data.instructors.push({ 'sys_id': gr_roles.getValue('sys_id'), 'instructor_role_code': { 'value': gr_roles.getValue('instructor_role_code'), 'displayValue': gr_roles.getDisplayValue('instructor_role_code') }, 'instructor_id': { 'value': (gr_roles.getValue('instructor_id')), 'displayValue': gr_roles.getDisplayValue('instructor_id') }, }); } data.unApproved = false; data.facilities = [] var gr_facilities = new GlideRecordSecure("x_g_dh5_hsisat_course_facility"); gr_facilities.addQuery('course_id', data.sys_id); gr_facilities.query(); while (gr_facilities.next()) { data.facilities.push({ 'sys_id': gr_facilities.getValue('sys_id'), 'facility_id': { 'value': gr_facilities.getValue('facility_id'), 'displayValue': gr_facilities.getDisplayValue('facility_id'), 'is_approved': gr_facilities.getDisplayValue('is_approved') } }); if(gr_facilities.getDisplayValue('is_approved') == 'false'){ data.unApproved = true; } } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-06-26 17:53:05</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>38fe5ebe1b5ea6103b5e657fe54bcba0</sys_id>
<sys_mod_count>169</sys_mod_count>
<sys_name>HSI Course</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_38fe5ebe1b5ea6103b5e657fe54bcba0</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-08-01 15:56:07</sys_updated_on>
<template>
<![CDATA[ <div ng-if="data.newUI" class="panel panel-default"> <div class="panel-body"> Redirecting... </div> </div> <div ng-if="!data.newUI" class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Course</h3> </div> <nav class="panel-body" aria-label=""> <form id="widget-form"> <sp-model form_model="data.f" mandatory="mandatory"></sp-model> <div class="fac_sect"> <div> <h3 class="h4"> Assigned Facility </h3> </div> <div> <table class="col-lg-12 col-md-12"> <tr> <th class="col-lg-12 col-md-12">Facility Name</th> </tr> <tr ng-repeat="facility in data.facilities"> <td> <sn-record-picker field="c.data.facilities[$index].facility_id" table="'x_g_dh5_hsisat_facility'" display-field="'building_room'" value-field="'sys_id'" search-fields="'building_room'" page-size="100" default-query="" ng-class="{'facility-picker-red': facility.facility_id.is_approved == 'false'}" class="facility-picker"> </sn-record-picker> <div ng-if="facility.facility_id.is_approved == 'false'" class="preferred_error"><span class="fa fa-info-circle"></span>Not a preferred facility.</div> </td> </tr> </table> <div ng-if="c.data.unApproved"> <button class="btn btn-default add-fac-btn" ng-click="approveFacility()">Approve Facility</button> <button class="btn btn-default add-fac-btn" ng-click="requestChange()" ng-disabled="c.data.notified">Request Facility Change</button> </div> </div> </div> <div class="ins_sect"> <div> <h3 class="h4"> Assigned Instructors </h3> </div> <div> <table class="col-lg-12"> <tr> <th class="col-md-6">Instructor</th> <th class="col-md-6">Role</th> </tr> <tr ng-repeat="instructor in data.instructors"> <td><input class="form form-control first-td" value="{{instructor.instructor_id.displayValue}}" readonly="true"/></td> <td><input class="form form-control" value="{{instructor.instructor_role_code.displayValue}}" readonly="true"/></td> </tr> </table> </div> </div> </form> </nav> <div class="list-btn-cont"> <a href="?id=haisp_instructor_scheduling&opened_from=course&course={{data.sys_id}}">Go to Course Scheduler</a> </div> <div class="panel-footer"> <button type="submit" ng-click="saveForm('submit')" ng-disabled="submitting" class="btn btn-primary action-btn pull-right ng-scope" ng-if="!c.data.new_record"> Submit and Return </button> <button type="submit" ng-click="saveForm('save')" ng-disabled="submitting" class="btn btn-primary action-btn pull-right ng-scope"> Save </button> <div style="clear: both;"></div> <div ng-if="mandatory.length" class="alert alert-info ng-scope" style="margin-top: 0.5em;" aria-live="polite" aria-atomic="true"> <!-- ngIf: mandatory.length > 0 --> <span ng-if="mandatory.length &gt; 0" class="ng-scope"> Required information </span> <!-- end ngIf: mandatory.length > 0 --> <!-- ngRepeat: f in mandatory --> <span ng-repeat="f in mandatory" class="label sc-field-error-label ng-binding ng-scope" ng-bind="f.label"></span> <!-- end ngRepeat: f in mandatory --> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $http, spUtil) { /* widget controller */ var c = this; $scope.jsonData = {}; $scope.fileType = ""; function clean(csvString) { var str = csvString.toString(); return str.replace(/\r(?=\n|$)/g, ''); } var fileInput = document.getElementById('csvFile'); fileInput.addEventListener('change', function(e) { var file = e.target.files[0]; if (file) { var reader = new FileReader(); reader.onload = function(e) { var csvString = e.target.result; c.data.csvData = csvString; //console.log(csvString) var lines = csvString.split('\n'); var first_line = clean(lines[0]); var headers = first_line.split(','); var jsonData = { 'records': [] }; for (var i = 1; i < lines.length - 1; i++) { var str_line = clean(lines[i]); var values = str_line.split(','); //console.log(values) var entry = {}; for (var j = 0; j < headers.length; j++) { entry[headers[j]] = values[j]; } //jsonData.push(entry); //jsonData[i] = entry; jsonData.records.push(entry); } //console.log(jsonData); $scope.jsonData = jsonData; }; reader.readAsText(file); } }); $scope.upload = function(){ var request = { method: 'POST', url: '/api/now/import/x_g_dh5_hsisat_haisp_import_sass_report/insertMultiple', data: $scope.jsonData, headers: { 'Content-Type': 'application/json', 'Accept':'application/json' } } var file_input = document.getElementById('csvFile'); $http(request).success(function(d){ spUtil.addInfoMessage("Upload was successful"); file_input.value = ""; spUtil.update($scope); setTimeout(() => { // Redirect to a specific window.location = "?id=haisp_class_list&table=x_g_dh5_hsisat_class"; }, 5000); }).error(function(err){ spUtil.addErrorMessage("Upload encountered an error") file_input.value = ""; spUtil.update($scope); }) } }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>::file-selector-button { color: $brand-primary; background-color: #fff; border: 1px solid $brand-primary; padding: 6px 12px; border-radius: 4px; &:hover, &:focus { color: darken($brand-primary, 10%); border-color: darken($brand-primary,10%); } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>haisp_sass_report_import</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP SASS Report Import</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JMCumbee</sys_created_by>
<sys_created_on>2025-07-01 20:23:48</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>b852fcac1be6ee505c8ccbb6624bcbf0</sys_id>
<sys_mod_count>85</sys_mod_count>
<sys_name>HAISP SASS Report Import</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_b852fcac1be6ee505c8ccbb6624bcbf0</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-30 17:10:13</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">SASS Report Import</h3> </div> <form class="panel-body" aria-label="quick links"> <fieldset> <div class="form-group"> <label for="csvFile">Upload SASS Facility Report</label> <input type='file' id="csvFile" accept=".csv"> <p class="help-block"> Upload file must be a csv. </p> </div> <button type='button' value='Upload' class="btn btn-primary" ng-click="upload()">Upload</button> </fieldset> </form> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $location) { /* widget controller */ var c = this; //console.log(JSON.stringify(c.data.enrollment_record)); $scope.saveForm = function(action){ c.data.action = action; $scope.server.update().then(function(){ c.data.action = ''; var new_url = 'id=haisp_class_form&table=x_g_dh5_hsisat_class&sys_id=' + c.data.class_id; $location.search(new_url) }) } }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.panel-footer { padding: 1rem 1.5rem; background-color: #f5f5f5; border-top: .1rem solid #ddd; border-bottom-right-radius: .3rem; border-bottom-left-radius: .3rem; } .pull-right { float: right !important; } .btn { margin-left: 15px; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Student Enrollment</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.sys_id = $sp.getParameter('sys_id'); data.query = $sp.getParameter('query'); data.class_id = ''; data.new_record = false; data.param_obj = {}; if(data.sys_id == '-1'){ data.new_record = true; if(data.query){ var query_arr = data.query.split('^'); query_arr.forEach(function(param){ var param_arr = param.split('='); data.param_obj[param_arr[0]] = param_arr[1]; }) } if(data.param_obj.hasOwnProperty('class_id')){ var gr_class = new GlideRecord('x_g_dh5_hsisat_class'); gr_class.get(data.param_obj.class_id); data.class_id = gr_class.getValue('sys_id'); } } else { var gr_enroll = new GlideRecord('x_g_dh5_hsisat_class_enrollment'); gr_enroll.get(data.sys_id); data.class_id = gr_enroll.getValue('class_id'); } if(input){ var gr_student = new GlideRecordSecure('x_g_dh5_hsisat_class_enrollment'); if(input.action == 'submit'){ //console.log(input.action); if(data.sys_id == '-1'){ gr_student.initialize(); gr_student.setValue('class_id', data.class_id); gr_student.setValue('student_id', input.enrollment_record._fields.student_id.value); gr_student.insert(); } } if(input.action == 'remove'){ //console.log(input.action); gr_student.get(data.sys_id); gr_student.setValue('is_active', false); gr_student.update(); } } data.enrollment_record = $sp.getForm('x_g_dh5_hsisat_class_enrollment', data.sys_id); if(data.sys_id == '-1'){ data.enrollment_record._fields.class_id.value = gr_class.getValue('sys_id'); data.enrollment_record._fields.class_id.displayValue = gr_class.getDisplayValue(); } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-07-29 19:04:30</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>712c60ad1b4bae903b5e657fe54bcbf0</sys_id>
<sys_mod_count>33</sys_mod_count>
<sys_name>HAISP Student Enrollment</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_712c60ad1b4bae903b5e657fe54bcbf0</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-07-30 14:17:17</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <div class="panel-title"> Enrollment </div> </div> <div class="panel-body"> <sp-model form_model="data.enrollment_record" mandatory="mandatory"></sp-model> </div> <div class="panel-footer"> <button type="submit" ng-click="saveForm('submit')" ng-disabled="submitting" class="btn btn-primary action-btn pull-right ng-scope"> Submit and Return </button> <button type="submit" ng-click="saveForm('remove')" ng-disabled="submitting" class="btn btn-primary action-btn pull-right ng-scope" ng-if="!c.data.new_record"> Remove Student </button> <div style="clear: both;"></div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope) { /* widget controller */ var c = this; $scope.active_tab = ""; document.getElementById('courses').style.display = 'none'; document.getElementById('students').style.display = 'none'; $scope.activateTab = function(tabId) { //console.log(tabId) if($scope.active_tab != ""){ document.getElementById('btn_' + $scope.active_tab).classList.remove('btn-primary'); document.getElementById('btn_' + $scope.active_tab).classList.add('btn-default'); document.getElementById($scope.active_tab).style.display = 'none'; } // Show the selected tab content $scope.active_tab = tabId; document.getElementById('btn_' + tabId).classList.add('btn-primary'); document.getElementById('btn_' + tabId).classList.remove('btn-default'); document.getElementById(tabId).style.display = ''; }; // Initialize certification tab as primary $scope.activateTab('courses'); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.nav-link { border: .1rem solid #005ea2; margin-top: 2rem; margin-left: 2rem; } .nav-link:hover { background-color: #005ea2; color: white; border: .1rem solid #005ea2; } .coming_soon { padding: 40px; } .b { border: .1rem solid #dee5e7; border-top: .1rem solid #005ea2; } .nav-tabs { border-bottom: .1rem solid #005ea2; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Courses Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ var class_sys_id = $sp.getParameter('sys_id'); data.courses_options = {}; data.courses_options.table = "x_g_dh5_hsisat_course"; data.courses_options.filter = "class_id=" + class_sys_id; data.courses_options.show_breadcrumbs = false; data.courses_list = $sp.getWidget('hsi-widget-data-table', data.courses_options); data.students_options = {}; data.students_options.table = "x_g_dh5_hsisat_class_enrollment"; data.students_options.filter = "is_active=true^class_id=" + class_sys_id; //data.students_options.fields = "student_id, sys_created_on, sys_created_by"; data.students_options.column_labels = {'student_id': 'Student', 'sys_created_on': 'Email Address', 'sys_created_by': 'Business Phone'} data.students_options.show_breadcrumbs = false; data.students_options.show_new = true; data.students_list = $sp.getWidget('hsi-widget-data-table', data.students_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-07-02 15:04:49</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>36c238fc1b6226905c8ccbb6624bcbe8</sys_id>
<sys_mod_count>18</sys_mod_count>
<sys_name>HAISP Courses Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_36c238fc1b6226905c8ccbb6624bcbe8</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-07-29 19:19:36</sys_updated_on>
<template>
<![CDATA[ <div class="tabs panel panel-default"> <ul class="nav nav-tabs"> <li class="nav-item"> <a id="btn_courses" class="btn btn-default nav-link" ng-click="activateTab('courses')">Courses</a> </li> <li class="nav-item"> <a id="btn_students" class="btn btn-default nav-link" ng-click="activateTab('students')">Students</a> </li> </ul> <div id="courses" class="tab-content"> <sp-widget widget="data.courses_list"></sp-widget> </div> <div id="students" class="tab-content"> <sp-widget widget="data.students_list"></sp-widget> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($rootScope, $scope, $timeout, $uibModal, spUtil) { /* widget controller */ const c = this; $scope.submitting = false; let g_form; function initForm(gFormInstance) { if (gFormInstance.getTableName() === $scope.data.f.table) { g_form = gFormInstance; $timeout(function () { $rootScope.$emit("spModel.gForm.rendered", g_form); }, 175); } } $scope.$on("spModel.gForm.initialized", function (e, gFormInstance) { initForm(gFormInstance); }); $scope.$on("spModel.gForm.env.created", function (e, gFormInstance) { initForm(gFormInstance); }); c.modalController = function ($scope, $uibModalInstance) { $scope.accept = function () { $uibModalInstance.close("accept"); }; $scope.dismiss = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.getPrimaryAction = function () { const primaryActions = $scope.data.f._ui_actions.filter(function (action) { return action.primary; }); return primaryActions.length ? primaryActions[0] : null; }; $scope.submit = function (event) { $scope.submitting = true; const activeElement = document.activeElement; if (activeElement) activeElement.blur(); $scope.$evalAsync(function () { const action = $scope.getPrimaryAction(); if (!g_form.submit(action.action_name || action.sys_id)) { $scope.submitting = false; } }); }; $scope.$on("spModel.uiActionComplete", function(event, response, savedId) { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; }); $scope.cancel = function () { $scope.submitting = true; let changes = false; const data = g_form.serialize(document.getElementById("form-widget")); for (let i = 0, field; (field = data[i]); i++) { if (field.value !== field.originalValue) { changes = true; break; } } if (changes) { $uibModal.open({ animation: true, controller: c.modalController, template: `<div class="modal-header"> <h3 class="modal-title">Confirm your selection</h3> </div> <div class="modal-body"> <p>You have unsaved changes, are you sure you would like to proceed?</p> </div> <div class="modal-footer"> <button type="submit" class="btn btn-primary" ng-click="accept()">Ok</button> <button type="button" class="btn btn-default" ng-click="dismiss()">Cancel</button> </div>` }) .result .then(function () { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; }, function () { $scope.submitting = false; }); } else { location.search = "?id=haisp_class_enrollment&class_id=" + $scope.data.classId; } }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>.breadcrumb { background-color: transparent; margin: -1.5rem 0 0.5rem; padding-inline: 0; .active { color: #1b1b1b; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>widget-haisp-class-enrollment-create-for</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Enrollment Create Form</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { data.classId = $sp.getParameter("class_id"); if (GeneralUtils.isEmpty(data.classId)) return; const classGR = new GlideRecordSecure(Constants.CLASS_TABLE); if (LogicUtils.not(classGR.get(data.classId))) { data.classId = Constants.VALUE_EMPTY; return; } const enrollmentGR = new GlideRecord(Constants.CLASS_ENROLLMENT_TABLE); enrollmentGR.addQuery("class_id", data.classId); data.canEdit = enrollmentGR.canWrite(); if (LogicUtils.not(data.canEdit)) return; data.class_details = GlideRecordUtils.toJson(classGR, { full: true }); data.f = $sp.getForm(enrollmentGR.getTableName(), "-1", enrollmentGR.getEncodedQuery(), "edit_enrollment", false); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-29 14:34:59</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>540fef591bcf6e903b5e657fe54bcbed</sys_id>
<sys_mod_count>4</sys_mod_count>
<sys_name>HAISP Class Enrollment Create Form</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_540fef591bcf6e903b5e657fe54bcbed</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-29 15:15:55</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.classId || !data.canEdit" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <form id="form-widget" ng-if="data.classId && data.canEdit" class="panel panel-default" ng-submit="submit($event)"> <div class="panel-heading"> <h2 class="panel-title"> Add Student Enrollment ({{data.class_details.class_number}}) </h2> </div> <fieldset ng-disabled="submitting"> <div class="panel-body"> <ol class="breadcrumb"> <li> <a href="?id={{::portal.homepage_dv}}">Home</a> </li> <li> <a href="?id=haisp_class_list">Classes</a> </li> <li> <a href="?id=haisp_class_homepage&class_id={{data.class_details.sys_id}}">{{data.class_details.class_number}}</a> </li> <li> <a href="?id=haisp_class_enrollment&class_id={{data.class_details.sys_id}}">Class Enrollment</a> </li> <li aria-current="page" class="active"> Add Student Enrollment </li> </ol> <sp-model form_model="data.f" mandatory="mandatory" embedded_in_modal="false"></sp-model> </div> <div class="panel-footer"> <button type="submit" class="btn btn-primary"> Save Changes </button> <button type="button" class="btn btn-default" ng-click="cancel()"> Cancel </button> </div> </fieldset> </form> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Form Wrapper</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.class_options = {}; data.class_options.hideRelatedLists = true; data.class_form = $sp.getWidget('widget-form', data.class_options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-07-03 17:30:44</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>f08d9e811b6e26903b5e657fe54bcb87</sys_id>
<sys_mod_count>3</sys_mod_count>
<sys_name>HAISP Class Form Wrapper</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_f08d9e811b6e26903b5e657fe54bcb87</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-07-29 12:20:26</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-body"> <sp-widget widget="data.class_form"></sp-widget> <p> <a href="https://icegov.sharepoint.com/:f:/r/sites/olcd/New%20OLCD%20Doc%20Library/Course%20Library/HSISAT/HSISAT%20%5B2.2%5D?csf=1&web=1&e=MGsd9d" target="_blank">HSI Academy Student Library</a> </p> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller = function($scope) { const c = this; $scope.navigate = function () { history.back(); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id>widget-haisp-class-statics</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Class Statistics</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-07-25 22:26:35</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>b8d3f0501b4b62903b5e657fe54bcb66</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_name>HAISP Class Statistics</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_b8d3f0501b4b62903b5e657fe54bcb66</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-25 22:26:35</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title">Coming Soon!</h2> </div> <div class="panel-body text-center"> <p>Your class statistics page will be here soon!</p> <button type="button" class="btn btn-link" ng-click="navigate()"> Go back to where you were! </button> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HSI Notifications PH</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JNWurm</sys_created_by>
<sys_created_on>2025-05-13 14:55:30</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>9fb093ec1b61aa50065762cae54bcb2d</sys_id>
<sys_mod_count>6</sys_mod_count>
<sys_name>HSI Notifications PH</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_9fb093ec1b61aa50065762cae54bcb2d</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-07-14 04:27:25</sys_updated_on>
<template>
<![CDATA[ <div class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title">Announcements</h3> </div> <div class="panel-body">Coming Soon</div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($http, $scope, spUtil) { /* widget controller */ var c = this; $scope.avatarPicture = ""; fetch("/api/now/live/profiles/sys_user." + $scope.data.userId, { headers: { "X-UserToken": g_ck, } }) .then(function (response) { if (response.ok) { return response.json(); } throw response; }) .then(function (data) { const avatarPicture = data.result.avatar.replace("?t=small", ""); $scope.avatarPicture = { "background-image": "url('" + avatarPicture + "')", color: "transparent", }; }); $scope.toggleActive = function () { c.data.dataToUpdate = { active: !$scope.data.instructor.is_active, }; c.server.update() .then(function (response) { delete c.data.dataToUpdate; }); }; $scope.toggleTDY = function () { c.data.dataToUpdate = { tdy: !$scope.data.instructor.is_tdy, }; c.server.update() .then(function (response) { delete c.data.dataToUpdate; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>dl { margin: 0; > * + * { margin-top: 0.5em; } } .mia i { font-size: 6rem; } .mia { color: #808080; } .user-details { word-wrap: break-word; overflow-wrap: break-word; } .badge { background-color: var(--badge-color, #777); box-shadow: 0 0 1px 2px rgba(0, 0, 0, 0.1); color: var(--badge-text); font-size: inherit; font-weight: normal; } h2 { display: flex; align-items: center; gap: 1rem; } </css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>haisp_instructor_profile_user</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP User Instructor Profile</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ const log = new Logger("Instructor User Details", "Portal Widget"); data.instructorId = $sp.getParameter("sys_id"); const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); if (GeneralUtils.areEqual(data.instructorId, "me")) { instructorGR.addQuery("user_id", gs.getUserID()); } else { instructorGR.addQuery("sys_id", data.instructorId); } instructorGR.query(); if (LogicUtils.not(instructorGR.next())) { data.instructorId = Constants.VALUE_EMPTY; return; } data.instructorId = instructorGR.getUniqueValue(); data.userId = GlideRecordUtils.getValue(instructorGR, "user_id"); data.canEditProfile = InstructorUtils.canWriteRecord(instructorGR); data.isUserAdmin = SecurityUtils.isUserAdmin(); if (input?.dataToUpdate) { try { GlideRecordUtils.save(instructorGR, input.dataToUpdate); } catch (err) { log.error(err.message, "dataToUpdate"); gs.addErrorMessage("Could not save profile: " + err.message); } } data.instructor = { name: GlideRecordUtils.getDisplayValue(instructorGR, "user_id"), title: GlideRecordUtils.getDisplayValue(instructorGR, "title"), location: GlideRecordUtils.getDisplayValue(instructorGR, "location_code"), business_phone: GlideRecordUtils.getDisplayValue(instructorGR, "business_phone"), mobile_phone: GlideRecordUtils.getDisplayValue(instructorGR, "moble_phone"), // !sic is_tdy: GlideRecordUtils.getValue(instructorGR, "tdy"), is_active: GlideRecordUtils.getValue(instructorGR, "active"), unit: { name: GlideRecordUtils.getDisplayValue(instructorGR, "aor_code"), color: "#" + GlideRecordUtils.getValue(instructorGR, "aor_code.aor_color"), text: getTextColorForBackground(hexToRgb(GlideRecordUtils.getValue(instructorGR, "aor_code.aor_color"))), }, }; function hexToRgb(hex) { // Remove the hash (#) if present hex = hex.replace(/^#/, ""); // Parse the red, green, and blue components const r = parseInt(hex.substring(0, 2), 16) || 255; // red const g = parseInt(hex.substring(2, 4), 16) || 255; // green const b = parseInt(hex.substring(4, 6), 16) || 255; // blue return [r, g, b]; } function getTextColorForBackground([r, g, b] = []) { // Normalize RGB values const normalizedR = r / 255; const normalizedG = g / 255; const normalizedB = b / 255; // Apply luminance formula components const calcComponent = (value) => value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4); const luminance = 0.2126 * calcComponent(normalizedR) + 0.7152 * calcComponent(normalizedG) + 0.0722 * calcComponent(normalizedB); // Compare luminance against threshold (0.5) return luminance > 0.5 ? "#000" : "#fff"; } // sp-editable field data: data.instructorForm = $sp.getForm(Constants.INSTRUCTOR_TABLE, data.instructorId); data.instructorFormView = data.instructorForm._view; data.instructorModel = data.instructorForm._fields; })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-03-05 08:30:31</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>e7432e521bccaa503b5e657fe54bcb57</sys_id>
<sys_mod_count>486</sys_mod_count>
<sys_name>HAISP User Instructor Profile</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_e7432e521bccaa503b5e657fe54bcb57</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-10 17:46:18</sys_updated_on>
<template>
<![CDATA[ <div ng-if="!data.instructorId" class="panel panel-default"> <div class="panel-heading"> <h2 class="panel-title"> Invalid Access </h2> </div> <div class="panel-body"> <p> You have tried to access a page that you do not have access to. Please ensure you have the proper credentials prior to accessing this page. </p> <a href="?id={{::portal.homepage_dv}}">Return to Home</a> </div> </div> <div ng-if="data.instructorId" class="panel panel-default"> <div class="panel-body"> <div class="row"> <div class="col-xs-12 col-sm-4 text-center"> <div class="row"> <div class="avatar-extra-large avatar-container" aria-hidden="true"> <div class="avatar soloAvatar bottom"> <div class="sub-avatar mia" ng-style="avatarPicture"> <i class="fa fa-user"></i> </div> </div> </div> </div> <div class="row actions m-t" ng-if="data.isUserAdmin"> <div class="btn-group" uib-dropdown> <button id="instructor-actions" type="button" class="btn btn-default" uib-dropdown-toggle> Actions <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> <ul role="menu" aria-labelledby="instructor-actions" uib-dropdown-menu> <li role="menuitem"> <a href="javascript:void(0)" ng-click="toggleActive()">{{data.instructor.is_active ? "Set Inactive" : "Set Active"}}</a> </li> <li role="menuitem" ng-if="data.instructor.is_active"> <a href="javascript:void(0)" ng-click="toggleTDY()">{{data.instructor.is_tdy ? "Remove TDY" : "Set TDY"}}</a> </li> </ul> </div> </div> </div> <div class="col-xs-12 col-sm-8 user-details"> <h2> {{data.instructor.name}} <span ng-if="data.instructor.is_active && data.instructor.is_tdy" class="label label-primary text-sm">TDY</span> <span ng-if="!data.instructor.is_active" class="label label-danger text-sm">Inactive</span> </h2> <div class="row"> <div class="col-md-6"> <dl> <div> <dt>Title</dt> <dd><sp-editable-field editable-by-user=data.canEditProfile table="x_g_dh5_hsisat_instructor" table-id="data.instructorId" field-model="data.instructorModel.title"></sp-editable-field></dd> </div> <div> <dt>Unit</dt> <dd class="badge" style="--badge-color: {{data.instructor.unit.color}}; --badge-text: {{data.instructor.unit.text || 'black'}}"> {{data.instructor.unit.name || "N/A"}} </dd> </div> <div> <dt>Location</dt> <dd><sp-editable-field editable-by-user=data.canEditProfile table="x_g_dh5_hsisat_instructor" table-id="data.instructorId" field-model="data.instructorModel.location_code"></sp-editable-field></dd> </div> </dl> </div> <div class="col-md-6"> <dl> <div> <dt>Business Phone</dt> <dd><sp-editable-field editable-by-user=data.canEditProfile table="x_g_dh5_hsisat_instructor" table-id="data.instructorId" field-model="data.instructorModel.business_phone"></sp-editable-field></dd> </div> <div> <dt>Mobile Phone</dt> <dd><sp-editable-field editable-by-user=data.canEditProfile table="x_g_dh5_hsisat_instructor" table-id="data.instructorId" field-model="data.instructorModel.moble_phone"></sp-editable-field></dd> </div> <div> <dt>Email</dt> <dd><sp-editable-field editable-by-user=data.canEditProfile table="x_g_dh5_hsisat_instructor" table-id="data.instructorId" field-model="data.instructorModel.email"></sp-editable-field></dd> </div> </dl> </div> </div> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>/*.flex-container { display: flex; flex-direction: column; // justify-content: space-between; max-width: 70rem; max-height: 225px; margin: 0 auto; padding 0 8px; } .panel-default{ width: 65%; margin: 0 auto; margin-bottom: 2rem; } .agency-header{ text-weight: bold; font-size: 30px; border-bottom: ridge; width: 70rem; height: 20%; //overflow: hidden; //background-color: #f1f1f1; padding: 0 10px; } .detail-container{ display: flex; flex-direction: row; justify-content: space-evenly; } .right-col{ padding-left: 10px; padding-top: 40px; //background-color: blue; width: 50%; p{ padding-top: 5px; } } .left-col{ padding-left: 10px; padding-top: 15px; //background-color: red; width: 50%; p{ padding-top: 2px; } } */ dl { margin: 0; > * + * { margin-top: 0.5em; } }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>haisp_instructor_profile_agency_details</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Agency Details Instructor Profile</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.instructorId = $sp.getParameter("sys_id"); const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); if (GeneralUtils.areEqual(data.instructorId, "me")) { instructorGR.addQuery("user_id", gs.getUserID()); } else { instructorGR.addQuery("sys_id", data.instructorId); } instructorGR.query(); if (LogicUtils.not(instructorGR.next())) { data.instructorId = Constants.VALUE_EMPTY; return; } data.instAgency = instructorGR.getDisplayValue("company"); data.instProgram = instructorGR.getDisplayValue("program"); data.instBranch = instructorGR.getDisplayValue("branch"); data.instSection = instructorGR.getDisplayValue("section"); data.instDivision = instructorGR.getDisplayValue("division"); data.instManager = instructorGR.getDisplayValue("manager_id") data.instManagerEmail = instructorGR.getDisplayValue("manager_email"); data.instChief = instructorGR.getDisplayValue("branch_chief_id"); data.instChiefEmail = instructorGR.getDisplayValue("branch_chief_email"); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-03-11 16:32:51</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>653b0fd81b1c26d03b5e657fe54bcb4c</sys_id>
<sys_mod_count>95</sys_mod_count>
<sys_name>HAISP Agency Details Instructor Profile</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_653b0fd81b1c26d03b5e657fe54bcb4c</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-10 17:45:17</sys_updated_on>
<template>
<![CDATA[ <div ng-if="data.instructorId" class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Agency Details </h3> </div> <div class="panel-body"> <div class="row"> <div class="col-md-6"> <dl> <div> <dt>Agency</dt> <dd>{{c.data.instAgency || "N/A"}}</dd> </div> <div> <dt>Program</dt> <dd>{{c.data.instProgram || "N/A"}}</dd> </div> <div> <dt>Division</dt> <dd>{{c.data.instDivision || "N/A"}}</dd> </div> <div> <dt>Branch</dt> <dd>{{c.data.instBranch || "N/A"}}</dd> </div> <div> <dt>Section</dt> <dd>{{c.data.instSection || "N/A"}}</dd> </div> </dl> </div> <div class="col-md-6"> <dl> <div> <dt>Section Chief</dt> <dd>{{c.data.instManager || "N/A"}}</dd> </div> <div> <dt>Section Chief Email</dt> <dd>{{c.data.instManagerEmail || "N/A"}}</dd> </div> <div> <dt>Unit Chief</dt> <dd>{{c.data.instChief || "N/A"}}</dd> </div> <div> <dt>Unit Chief Email</dt> <dd>{{c.data.instChiefEmail || "N/A"}}</dd> </div> </dl> </div> </div> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $uibModal) { /* widget controller */ const c = this; function getSortData() { $scope.sort = { name: (() => { if ($scope.data?.sort.field !== "skill_code") { return { sort: "none", label: "Sort by knowledge area" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by knowledge area, ascending" }; } else { return { sort: "descending", label: "Sorted by knowledge area, descending" }; } })(), experience_date: (() => { if ($scope.data?.sort.field !== "recent_experience_date") { return { sort: "none", label: "Sort by most recent date of experience" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by most recent date of experience, ascending" }; } else { return { sort: "descending", label: "Sorted by most recent date of experience, descending" }; } })(), status: (() => { if ($scope.data?.sort.field !== "status") { return { sort: "none", label: "Sort by status" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by status, ascending" }; } else { return { sort: "descending", label: "Sorted by status, descending" }; } })(), }; } if ($scope.data.instructorId) getSortData(); $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; }); }; $scope.expand = function (event) { event.target.closest("tr").nextElementSibling.classList.toggle("hidden"); const btn = event.target.closest("button"); const icon = btn.querySelector(".fa"); if (btn.getAttribute("aria-expanded") === "false") { icon.classList.remove("fa-plus"); icon.classList.add("fa-minus"); btn.setAttribute("aria-expanded", "true"); } else { icon.classList.remove("fa-minus"); icon.classList.add("fa-plus"); btn.setAttribute("aria-expanded", "false"); } }; c.modalController = function ($scope, $uibModalInstance) { $scope.errors = []; $scope.max_date = new Date().toISOString().split("T")[0]; $scope.knowledge_areas = c.data.knowledge_areas; $scope.selected = null; $scope.knowledge = { instructor_id: c.data.instructorId, skill_code: "", other: "", recent_experience_date: "", explanation_of_your_experience: "", }; $scope.handleSelection = function () { $scope.selected = $scope.knowledge_areas.find((item) => { return item.id === $scope.knowledge.skill_code }); if (!$scope.selected?.allow_write_in) $scope.knowledge.other = ""; }; $scope.validate = function (knowledge) { $scope.errors = []; if (!knowledge.skill_code) $scope.errors.push("Knowledge Area is required"); if ($scope.selected?.allow_write_in && !knowledge.other) $scope.errors.push("Explanation of other is required"); if (!knowledge.recent_experience_date) $scope.errors.push("Most Recent Date of Experience is required"); if (!knowledge.explanation_of_your_experience) $scope.errors.push("Explanation of experience is required"); return !$scope.errors.length; }; $scope.submit = function () { if (!$scope.validate($scope.knowledge)) return; $uibModalInstance.close($scope.knowledge); }; $scope.cancel = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.open = function () { const modalInstance = $uibModal.open({ animation: true, controller: c.modalController, templateUrl: "add-knowledge-modal.html", }) .result .then(function (knowledge) { c.data.dataToInsert = knowledge; c.server.update() .then(function (res) { delete c.data.dataToInsert; }); }); }; $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>ol { list-style: none; padding: 0; > * + * { margin-top: 1.5rem; } } tbody { border: none !important; tr + tr > * { border-top: none !important; } th, td { vertical-align: middle !important; } } [scope="row"] { font-weight: normal; } [aria-sort] > button { font-weight: bold; padding: 0; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .date, .actions { text-align: right; } .panel-body > * + * { margin-top: 1rem; } .panel-footer { display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center; } .pagination { margin: 0; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>haisp_instructor_profile_knowledge</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Knowledge Instructor Profile</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ const log = new Logger("Academy Instructor Knowledge", "Portal Widget"); data.instructorId = $sp.getParameter("sys_id"); data.page = 1; if (input?.sort) { data.page = 1; } if (input?.action === "paginate") { data.page = Math.max(input.page, 1); } data.batchSize = 5; if (GeneralUtils.isEmpty(data.instructorId)) return; const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); if (GeneralUtils.areEqual(data.instructorId, "me")) { instructorGR.addQuery("user_id", gs.getUserID()); } else { instructorGR.addQuery("sys_id", data.instructorId); } instructorGR.query(); if (LogicUtils.not(instructorGR.next())) { data.instructorId = Constants.VALUE_EMPTY; return; } data.instructorId = instructorGR.getUniqueValue(); data.sysUserId = GlideRecordUtils.getValue(instructorGR, "user_id"); data.canEdit = LogicUtils.or( GeneralUtils.areEqual(data.sysUserId, gs.getUserID()), SecurityUtils.isInstructorEditor() ); if (GeneralUtils.hasValue(input?.dataToInsert)) { try { data.newKnowledgeId = GlideRecordUtils.save( new GlideRecord(Constants.INSTRUCTOR_SKILL_TABLE), input.dataToInsert ); } catch (err) { log.error(err.message, "dataToInsert"); } } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "recent_experience_date", asc: false }); const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; const knowledgeGR = new GlideRecord(Constants.INSTRUCTOR_SKILL_TABLE); knowledgeGR.addQuery("instructor_id", data.instructorId); if (LogicUtils.not(data.canEdit)) { knowledgeGR.addQuery("approval", "approved"); } if (data.sort.asc) { knowledgeGR.orderBy(data.sort.field); } else { knowledgeGR.orderByDesc(data.sort.field); } knowledgeGR.chooseWindow(startIndex, endIndex); knowledgeGR.query(); data.totalCount = knowledgeGR.getRowCount(); const knowledge = []; while (knowledgeGR.next()) { knowledge.push({ sys_id: knowledgeGR.getUniqueValue(), knowledge_area: GlideRecordUtils.getDisplayValue(knowledgeGR, "skill_code"), knowledge_area_code: GlideRecordUtils.getValue(knowledgeGR, "skill_code"), knowledge_area_other: GlideRecordUtils.getValue(knowledgeGR, "other"), experience_date: GlideRecordUtils.getValue(knowledgeGR, "recent_experience_date"), status_code: GlideRecordUtils.getValue(knowledgeGR, "status"), status: GlideRecordUtils.getDisplayValue(knowledgeGR, "status"), description: GlideRecordUtils.getDisplayValue(knowledgeGR, "explanation_of_your_experience"), approval: GlideRecordUtils.getValue(knowledgeGR, "approval"), history: (() => { const journalGR = new GlideRecord("sys_journal_field"); journalGR.addQuery("element", "approval_history"); journalGR.addQuery("element_id", knowledgeGR.getUniqueValue()); journalGR.orderByDesc("sys_created_on"); journalGR.query(); const history = []; while (journalGR.next()) { history.push(journalGR.getValue("sys_created_on") + " - " + journalGR.getValue("value").replaceAll("\n", "<br>")); } return history.filter(Boolean); })(), }); } data.knowledge_areas = (() => { const NOT_SELECTABLE_STATUSES = ["not requested", "requested", "approved"]; const NOT_SELECTABLE_CODES = knowledge.filter((item) => NOT_SELECTABLE_STATUSES.includes(item.approval)) .map((item) => item.knowledge_area_code); const codeGR = new GlideRecord(Constants.SKILL_CODE_TABLE); if (GeneralUtils.isEmpty(NOT_SELECTABLE_CODES)) { codeGR.addNotNullQuery("sys_id") .addOrCondition("allow_write_in", true); } else { codeGR.addQuery("sys_id", "NOT IN", NOT_SELECTABLE_CODES) .addOrCondition("allow_write_in", true); } codeGR.addQuery("is_active", true); codeGR.orderBy("display_sequence"); codeGR.query(); const knowledge_areas = []; while (codeGR.next()) { knowledge_areas.push({ id: codeGR.getUniqueValue(), name: GlideRecordUtils.getDisplayValue(codeGR, "name"), allow_write_in: GlideRecordUtils.getValue(codeGR, "allow_write_in"), }); } return knowledge_areas; })(); data.instructor = { knowledge, }; /* data.sysUserID = $sp.getParameter("sys_id"); //console.log('Instructor TEST: sysid '+data.sysUserID); if (!data.sysUserID || data.sysUserID == gs.getUser().getID()) { data.sysUserID = gs.getUser().getID(); data.canAddSkills = true; } var sysUserGR = new GlideRecord("sys_user"); data.userExists = sysUserGR.get(data.sysUserID) && sysUserGR.canRead(); const instructorGR = new GlideRecord("x_g_dh5_hsisat_instructor"); // use the id provided in the URL, otherwise, get the current user's id: if ($sp.getParameter("sys_id")) { instructorGR.addQuery('sys_id', data.sysUserID); } else { instructorGR.addQuery("user_id", gs.getUserID()); } instructorGR.query(); if (LogicUtils.not(instructorGR.next())) return; data.instructorId = instructorGR.getUniqueValue(); data.skills = []; const skillGR = new GlideRecord("x_g_dh5_hsisat_instructor_skill"); skillGR.addQuery("instructor_id", data.instructorId); skillGR.query(); while (skillGR.next()) { data.skills.push({ skill_code: skillGR.getDisplayValue('skill_code'), recent_experience_date: skillGR.getValue('recent_experience_date'), status: skillGR.getDisplayValue('status'), sysID: skillGR.sys_id.toString() }); } //if the user is a member of the Academy Admin, Program Manager, scheduler, Section or Unit chief groups: if (gs.getUser().isMemberOf('HAISP - Application Administrators') || gs.getUser().isMemberOf('HAISP - Unit Program Managers') || gs.getUser().isMemberOf('HAISP - Schedulers') || gs.getUser().isMemberOf('HAISP - Section Chiefs') || gs.getUser().isMemberOf('HAISP - Unit Chiefs')) { data.canAddSkills = true; } */ })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-03-12 07:27:52</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>62f71ea41bd4e6d03b5e657fe54bcb3b</sys_id>
<sys_mod_count>127</sys_mod_count>
<sys_name>HAISP Knowledge Instructor Profile</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_62f71ea41bd4e6d03b5e657fe54bcb3b</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-10 17:25:44</sys_updated_on>
<template>
<![CDATA[ <div ng-if="data.instructorId" class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Knowledge Areas </h3> </div> <div class="table-responsive"> <table class="table"> <caption>Please include any relevant knowledge and/or advanced educational skills.</caption> <thead> <tr> <th scope="col" aria-sort="{{sort['name'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['name'].label}}" ng-click="sortData($event, 'skill_code')"> Knowledge Area <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['experience_date'].sort}}" class="date"> <button type="button" class="btn btn-clear" aria-label="{{sort['experience_date'].label}}" ng-click="sortData($event, 'recent_experience_date')"> Most Recent Date of Experience <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['status'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['status'].sort}}" ng-click="sortData($event, 'status')"> Status <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col"> <span class="sr-only">Actions</span> </th> </tr> </thead> <tbody ng-repeat="knowledge in data.instructor.knowledge"> <tr> <th scope="row"> <a ng-href="?id=hsi_form&instructor_id={{data.instructorId}}&table=x_g_dh5_hsisat_instructor_skill&sys_id={{knowledge.sys_id}}"> {{knowledge.knowledge_area}} </a> </th> <td class="date">{{knowledge.experience_date | date}}</td> <td>{{knowledge.status}}</td> <td> <button type="button" class="btn btn-default pull-right" ng-click="expand($event)" aria-expanded="false" aria-controls="details-{{knowledge.sys_id}}"> <span class="sr-only">Expand {{knowledge.knowledge_code}}</span> <i aria-hidden="true" class="fa fa-plus"></i> </button> </td> </tr> <tr id="details-{{knowledge.sys_id}}" class="hidden"> <td colspan="3"> <div class="row"> <div class="col-xs-12"> <p> {{knowledge.description}} </p> <h4> Approval History </h4> <ol ng-if="knowledge.history.length"> <li ng-repeat="history in knowledge.history" ng-bind-html="history"></li> </ol> <p ng-if="!knowledge.history.length"> No approval history for this knowledge area </p> </div> </div> </td> </tr> </tbody> <tbody ng-if="!data.instructor.knowledge.length"> <tr> <td colspan="4">There are no recorded Knowledge for this instructor.</td> </tr> </tbody> </table> </div> <div class="panel-footer"> <button class="btn btn-default" ng-click="open()" ng-if="data.canEdit"> Add Knowledge Area </button> <uib-pagination total-items="data.totalCount" items-per-page="data.batchSize" ng-model="data.page" ng-change="paginate()" boundary-link-numbers="true" rotate="false"></uib-pagination> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function($scope, $uibModal) { /* widget controller */ const c = this; function getSortData() { $scope.sort = { name: (() => { if ($scope.data?.sort.field !== "certification_code") { return { sort: "none", label: "Sort by name" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by name, ascending" }; } else { return { sort: "descending", label: "Sorted by name, descending" }; } })(), expiration_date: (() => { if ($scope.data?.sort.field !== "expiration_date") { return { sort: "none", label: "Sort by expiration date" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by expiration date, ascending" }; } else { return { sort: "descending", label: "Sorted by expiration date, descending" }; } })(), status: (() => { if ($scope.data?.sort.field !== "status") { return { sort: "none", label: "Sort by status" }; } if ($scope.data?.sort.asc) { return { sort: "ascending", label: "Sorted by status, ascending" }; } else { return { sort: "descending", label: "Sorted by status, descending" }; } })(), }; } if ($scope.data.instructorId) getSortData(); c.modalController = function ($scope, $uibModalInstance) { $scope.errors = []; $scope.max_date = new Date().toISOString().split("T")[0]; $scope.certification_codes = c.data.certification_codes; $scope.certification = { instructor_id: c.data.instructorId, effective_date: "", certification_code: "", attachment: null, }; $scope.validate = function (certification) { $scope.errors = []; if (!certification.certification_code) $scope.errors.push("Certification selection is required"); if (!certification.effective_date) $scope.errors.push("Completion Date is required"); if (!certification.attachment) $scope.errors.push("Proof of certification must be attached"); return !$scope.errors.length; }; $scope.submit = function () { if (!$scope.validate($scope.certification)) return; $uibModalInstance.close($scope.certification); }; $scope.cancel = function () { $uibModalInstance.dismiss("cancel"); }; }; $scope.open = function () { const modalInstance = $uibModal.open({ animation: true, controller: c.modalController, templateUrl: "add-certification-modal.html", }) .result .then(function (certification) { c.data.dataToInsert = certification; c.server.update() .then(function (response) { delete c.data.dataToInsert; if (response.newCertificationId) { fetch("/api/now/attachment/file?table_name=x_g_dh5_hsisat_instructor_certification&table_sys_id=" + response.newCertificationId + "&file_name=" + certification.attachment.name, { method: "POST", headers: { "Content-Type": "multipart/form-data", "X-UserToken": g_ck, }, body: certification.attachment, }) .then((res) => { if (res.ok) return res.json(); throw res; }) .then(({ result }) => { const sysId = result.sys_id; const cert = $scope.data.instructor.certifications.find( (item) => item.id === response.newCertificationId ); if (cert) { cert.attachment_id = sysId; } }) } }); }); }; $scope.sortData = function (event, field) { const header = event.target.closest("th"); const order = header.getAttribute("aria-sort"); $scope.data.sort = { field, asc: order === "ascending" ? false : true, }; getSortData(); c.data.sort = $scope.data.sort; c.server.update() .then(function (response) { delete c.data.sort; }); }; $scope.expand = function (event) { event.target.closest("tr").nextElementSibling.classList.toggle("hidden"); const btn = event.target.closest("button"); const icon = btn.querySelector(".fa"); if (btn.getAttribute("aria-expanded") === "false") { icon.classList.remove("fa-plus"); icon.classList.add("fa-minus"); btn.setAttribute("aria-expanded", "true"); } else { icon.classList.remove("fa-minus"); icon.classList.add("fa-plus"); btn.setAttribute("aria-expanded", "false"); } }; $scope.paginate = function () { c.data.action = "paginate"; c.server.update() .then(function (response) { delete c.data.action; }); }; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css>ol { list-style: none; padding: 0; > * + * { margin-top: 1.5rem; } } tbody { border: none !important; tr + tr > * { border-top: none !important; } th, td { vertical-align: middle !important; } } [scope="row"] { font-weight: normal; } [scope="row"], [scope="row"] ~ td { vertical-align: initial; } [aria-sort] > button { font-weight: bold; padding: 0; } [aria-sort="none"] .fa-chevron-down { display: none; } [aria-sort="ascending"] .fa-chevron-down, [aria-sort="descending"] .fa-chevron-down { display: inline-block; } [aria-sort="ascending"] .fa-chevron-down { transform: rotate(180deg); } .date, .actions { text-align: right; } .panel-body > * + * { margin-top: 1rem; } .panel-footer { display: flex; justify-content: space-between; align-items: center; } .pagination { margin: 0; }</css>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id>haisp_instructor_profile_certification</id>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Certification Instructor Profile</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ const log = new Logger("Academy Instructor Certifications", "Portal Widget"); data.page = 1; if (input?.sort) { data.page = 1; } if (input?.action === "paginate") { data.page = Math.max(input.page, 1); } data.batchSize = 5; data.instructorId = $sp.getParameter("sys_id"); if (GeneralUtils.isEmpty(data.instructorId)) return; const instructorGR = new GlideRecord(Constants.INSTRUCTOR_TABLE); if (GeneralUtils.areEqual(data.instructorId, "me")) { instructorGR.addQuery("user_id", gs.getUserID()); } else { instructorGR.addQuery("sys_id", data.instructorId); } instructorGR.query(); if (LogicUtils.not(instructorGR.next())) { data.instructorId = Constants.VALUE_EMPTY; return; } data.instructorId = instructorGR.getUniqueValue(); data.sysUserId = GlideRecordUtils.getValue(instructorGR, "user_id"); data.canEdit = LogicUtils.or( GeneralUtils.areEqual(data.sysUserId, gs.getUserID()), SecurityUtils.isInstructorEditor() ); if (GeneralUtils.hasValue(input?.dataToInsert)) { try { data.newCertificationId = GlideRecordUtils.save( new GlideRecord(Constants.INSTRUCTOR_CERTIFICATION_TABLE), input.dataToInsert ); } catch (err) { log.error(err.message, "dataToInsert"); } } data.sort = GeneralUtils.defaultValue(input?.sort, { field: "expiration_date", asc: false }); const startIndex = (data.page - 1) * data.batchSize; const endIndex = data.page * data.batchSize; const certificationGR = new GlideRecord(Constants.INSTRUCTOR_CERTIFICATION_TABLE); certificationGR.addQuery("instructor_id", data.instructorId); if (LogicUtils.not(data.canEdit)) { certificationGR.addQuery("approval", "approved"); } if (data.sort.asc) { certificationGR.orderBy(data.sort.field); } else { certificationGR.orderByDesc(data.sort.field); } certificationGR.chooseWindow(startIndex, endIndex); certificationGR.query(); data.totalCount = certificationGR.getRowCount(); const certifications = []; while (certificationGR.next()) { const attachmentGR = new GlideRecord(Constants.ATTACHMENT_TABLE); attachmentGR.orderByDesc("sys_created_on"); attachmentGR.setLimit(1); attachmentGR.addQuery("table_name", Constants.INSTRUCTOR_CERTIFICATION_TABLE); attachmentGR.addQuery("table_sys_id", certificationGR.getUniqueValue()); attachmentGR.query(); let attachmentId = null; if (attachmentGR.next()) attachmentId = attachmentGR.getUniqueValue(); certifications.push({ sys_id: certificationGR.getUniqueValue(), name: GlideRecordUtils.getDisplayValue(certificationGR, "certification_code"), certification_code: GlideRecordUtils.getValue(certificationGR, "certification_code"), effective_date: GlideRecordUtils.getValue(certificationGR, "effective_date"), expiration_date: GlideRecordUtils.getValue(certificationGR, "expiration_date"), status: GlideRecordUtils.getDisplayValue(certificationGR, "status"), status_code: GlideRecordUtils.getValue(certificationGR, "status"), approval: GlideRecordUtils.getValue(certificationGR, "approval"), history: (() => { const journalGR = new GlideRecord("sys_journal_field"); journalGR.addQuery("element", "approval_history"); journalGR.addQuery("element_id", certificationGR.getUniqueValue()); journalGR.orderByDesc("sys_created_on"); journalGR.query(); const history = []; while (journalGR.next()) { history.push(journalGR.getValue("sys_created_on") + " - " + journalGR.getValue("value").replaceAll("\n", "<br>")); } return history.filter(Boolean); })(), attachment_id: attachmentId, }); } data.certification_codes = (() => { const NOT_SELECTABLE_STATUSES = ["not requested", "requested", "approved"]; const NOT_SELECTABLE_CODES = certifications.filter((item) => NOT_SELECTABLE_STATUSES.includes(item.approval)) .map((item) => item.certification_code); const codeGR = new GlideRecord(Constants.CERTIFICATION_CODE_TABLE); if (GeneralUtils.hasValue(NOT_SELECTABLE_CODES)) { codeGR.addQuery("sys_id", "NOT IN", NOT_SELECTABLE_CODES); } codeGR.addQuery("is_active", true); codeGR.orderBy("name"); codeGR.query(); const certification_codes = []; while (codeGR.next()) { certification_codes.push({ id: codeGR.getUniqueValue(), name: GlideRecordUtils.getDisplayValue(codeGR, "name"), }); } return certification_codes; })(); data.instructor = { certifications, }; })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-03-12 08:14:03</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>baa2ea681b58e6d03b5e657fe54bcb50</sys_id>
<sys_mod_count>191</sys_mod_count>
<sys_name>HAISP Certification Instructor Profile</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_baa2ea681b58e6d03b5e657fe54bcb50</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-07-10 17:24:25</sys_updated_on>
<template>
<![CDATA[ <div ng-if="data.instructorId" class="panel panel-default"> <div class="panel-heading"> <h3 class="panel-title"> Certifications and Job-Related Education </h3> </div> <div class="table-responsive"> <table class="table"> <caption>Please include any relevant certifications and/or advanced educational training or education.</caption> <thead> <tr> <th scope="col" aria-sort="{{sort['name'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['name'].label}}" ng-click="sortData($event, 'certification_code')"> Name <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['expiration_date'].sort}}" class="date"> <button type="button" class="btn btn-clear" aria-label="{{sort['expiration_date'].label}}" ng-click="sortData($event, 'expiration_date')"> Expiration Date <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col" aria-sort="{{sort['status'].sort}}"> <button type="button" class="btn btn-clear" aria-label="{{sort['status'].label}}" ng-click="sortData($event, 'status')"> Status <i class="fa fa-chevron-down" aria-hidden="true"></i> </button> </th> <th scope="col"> <span class="sr-only">Actions</span> </th> </tr> </thead> <tbody ng-repeat="certification in data.instructor.certifications track by certification.sys_id"> <tr> <th scope="row"> <a ng-href="?id=hsi_form&instructor_id={{data.instructorId}}&table=x_g_dh5_hsisat_instructor_certification&sys_id={{certification.sys_id}}"> {{certification.name}} </a> </th> <td class="date">{{certification.expiration_date | date}}</td> <td>{{certification.status}}</td> <td> <button type="button" class="btn btn-default pull-right" ng-click="expand($event)" aria-expanded="false" aria-controls="details-{{certification.sys_id}}"> <span class="sr-only">Expand {{certification.certification_code}}</span> <i aria-hidden="true" class="fa fa-plus"></i> </button> </td> </tr> <tr id="details-{{certification.sys_id}}" class="hidden"> <td colspan="3"> <div class="row"> <div class="col-xs-12"> <a ng-if="certification.attachment_id" href="/sys_attachment.do?sys_id={{certification.attachment_id}}" download>Download Certification</a> <p ng-if="!certification.attachment_id"> No certification attachment provided. </p> <div> <h4> Approval History </h4> <ol ng-if="certification.history.length"> <li ng-repeat="history in certification.history" ng-bind-html="history"></li> </ol> <p ng-if="!certification.history.length"> No approval history for this certification. </p> </div> </div> </div> </td> </tr> </tbody> <tbody ng-if="!data.instructor.certifications.length"> <tr> <td colspan="4">There are no recorded certifications for this instructor.</td> </tr> </tbody> </table> </div> <div class="panel-footer"> <button class="btn btn-default" ng-click="open()" ng-if="data.canEdit"> Add Certification </button> <uib-pagination total-items="data.totalCount" items-per-page="data.batchSize" ng-model="data.page" ng-change="paginate()" boundary-link-numbers="true" rotate="false"></uib-pagination> </div> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Academy Approvals</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ (function() { /* populate the 'data' object */ /* e.g., data.table = $sp.getValue('table'); */ data.approvals_options = {}; data.approvals_options.table = "sysapproval_approver"; data.approvals_options.filter = "state=requested^approverIN" + getDelegatedApprovals(); data.approvals_options.fields = "approver,source_table,sys_created_on"; data.approvals_options.column_labels = {'approver': 'Approver', 'source_table': 'Name', 'sys_created_on': 'Submitted On'}; data.approvals_options.o = "sys_created_on"; data.approvals_options.d = "des"; data.approvals_widget = $sp.getWidget("hsi-widget-data-table", data.approvals_options); function getDelegatedApprovals() { var user = gs.getUserID(); var answer = new Array(); var i = 0; answer[i++] = new String(user); var g = new GlideRecord("sys_user_delegate"); g.addQuery("delegate", user); g.addQuery("approvals", "true"); g.addQuery("starts", "<=", gs.daysAgo(0)); g.addQuery("ends", ">=", gs.daysAgo(0)); g.query(); while (g.next()) answer[i++] = new String(g.user); return answer; } })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JCMoldes</sys_created_by>
<sys_created_on>2025-06-10 15:37:28</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>b237abed1b4ea2d03b5e657fe54bcb0f</sys_id>
<sys_mod_count>13</sys_mod_count>
<sys_name>HAISP Academy Approvals</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_b237abed1b4ea2d03b5e657fe54bcb0f</sys_update_name>
<sys_updated_by>JNWurm</sys_updated_by>
<sys_updated_on>2025-07-09 15:47:31</sys_updated_on>
<template>
<![CDATA[ <div> <sp-widget widget="data.approvals_widget"></sp-widget> </div> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>standard</category>
<client_script>
<![CDATA[ function ($scope, spUtil, $rootScope, $timeout, spAriaUtil, spGtd, $window, i18n) { var c = this; $scope.data = c.data; $scope.collapse = function() { $rootScope.$emit('sp-navbar-collapse'); } $scope.loadingIndicator = $rootScope.loadingIndicator; $scope.accessibilityEnabled = spAriaUtil.g_accessibility === "true"; $scope.$on('sp_loading_indicator', function(e, value) { $scope.loadingIndicator = value; }); // PRB1108244: visibleItems array is used to improve keyboard nav // in menu, refresh it as needed $scope.$watch('data.menu.items', function() { $scope.visibleItems = []; if ($scope.data.menu.items) { for (var i in $scope.data.menu.items) { var item = $scope.data.menu.items[i]; if (item.items || (item.scriptedItems && item.scriptedItems.count != 0)) $scope.visibleItems.push(item); } } }, true); // Get list of record watchers var record_watchers = []; if ($scope.data.menu.items) { for(var i in $scope.data.menu.items) { var item = $scope.data.menu.items[i]; if (item.type == 'scripted') { if (item.scriptedItems.record_watchers) record_watchers = record_watchers.concat(item.scriptedItems.record_watchers); } if (item.type == 'filtered') { record_watchers.push({'table':item.table,'filter':item.filter}); } } } // Init record watchers for (var y in record_watchers){ var watcher = record_watchers[y]; spUtil.recordWatch($scope, watcher.table, watcher.filter); } $rootScope.$broadcast('sp-header-loaded'); } ]]>
</client_script>
<controller_as>c</controller_as>
<css>.header-loader { float: left; width: 24px; position: relative; top: 24px; } </css>
<data_table>sp_instance_menu</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list>title</field_list>
<has_preview>false</has_preview>
<id>haisp-header-menu</id>
<internal>false</internal>
<link>
<![CDATA[ function(scope, elem) { function isMDScreenSize() { return window.matchMedia('(max-width: 992px)').matches; } var KEY = { TAB : 9, ENTER : 13, ESC : 27, SPACE_BAR : 32, LEFT : 37, UP : 38, RIGHT : 39, DOWN : 40 } $('.navbar').on('keydown','[id="sp-nav-bar"]:visible',function(e) { var mdScreenSize = isMDScreenSize(); var target = e.target; if (target.localName == 'a') { var currentMenuItem = $(target).parents('li').first(); var parentUL = currentMenuItem.parents('ul').first(); var menuItem = currentMenuItem; var targetInSubmenu = !currentMenuItem.is('.header-menu-item'); if (targetInSubmenu) { menuItem = $(target).parents('li.header-menu-item').first(); } if (mdScreenSize && e.keyCode == KEY.RIGHT) { if ($(target).is('.dropdown-toggle') || $(target).is('[data-toggle="dropdown"]')) { // Target is a main menu item with sub-menu e.preventDefault(); e.stopPropagation(); currentMenuItem.addClass('open'); $('> a:visible', menuItem).attr("aria-expanded", "true"); currentMenuItem.find('.dropdown-menu a:visible').first().focus(); } } else if (mdScreenSize && e.keyCode == KEY.LEFT) { if (parentUL.is('.dropdown-menu')) { // Target is a sub-menu item parentUL.parents('.header-menu-item').first().removeClass('open').find('> a:visible').first().focus(); setAriaExpnadedFalse(menuItem); } } else if ((mdScreenSize && e.keyCode == KEY.UP) || (!mdScreenSize && e.keyCode == KEY.LEFT)) { handleFocus(false, e, mdScreenSize, menuItem, currentMenuItem, parentUL, targetInSubmenu); } else if((mdScreenSize && e.keyCode == KEY.DOWN) || (!mdScreenSize && e.keyCode == KEY.RIGHT)) { handleFocus(true, e, mdScreenSize, menuItem, currentMenuItem, parentUL, targetInSubmenu); } if(e.keyCode == KEY.TAB) { if($(target).parents('li').hasClass('open')) $(target).dropdown('toggle'); setAriaExpnadedFalse(menuItem); } } }); function setAriaExpnadedFalse(menuItem) { if (menuItem.is('.dropdown')) $('> a:visible', menuItem).attr("aria-expanded", "false"); } function handleFocus(next, event, mdScreenSize, menuItem, currentMenuItem, parentUL, targetInSubmenu) { event.preventDefault(); if (targetInSubmenu) { var itemsInSubmenu = parentUL.find('li.visible'); var firstSubmenuItem = itemsInSubmenu.first(); var lastSubmenuItem = itemsInSubmenu.last(); } var allMenuItems = $('li.header-menu-item:visible', '.navbar'); var firstMenuItem = allMenuItems.first(); var lastMenuItem = allMenuItems.last(); if (!mdScreenSize) { currentMenuItem.removeClass('open'); setAriaExpnadedFalse(menuItem); if (targetInSubmenu) menuItem.removeClass('open'); } else { event.stopPropagation(); if (!targetInSubmenu) { menuItem.removeClass('open'); setAriaExpnadedFalse(menuItem); } } var indexMenuItem = allMenuItems.index(menuItem); var targetMenuItem = next ? allMenuItems.eq(indexMenuItem + 1) : allMenuItems.eq(indexMenuItem - 1); var menuItemToFocus = targetMenuItem.length ? targetMenuItem : next ? firstMenuItem: lastMenuItem; //enable circular navigation if (mdScreenSize && targetInSubmenu) { targetMenuItem = next ? currentMenuItem.nextAll('li:visible').first() : currentMenuItem.prevAll('li:visible').first(); menuItemToFocus = targetMenuItem.length ? targetMenuItem : next ? firstSubmenuItem: lastSubmenuItem; //enable circular navigation } menuItemToFocus.find('a').focus(); } $(elem).on('click', '[data-toggle="dropdown"]', function(e) { var $target = $(e.target); setTimeout(function() { $('.dropdown-menu a:visible', $target.parents('.header-menu-item')).first().focus(); }, 0); }); setTimeout(function(){ $('[data-toggle-second="tooltip"]').tooltip(); bsDropdownTooltipShim('#cart-dropdown', '#cart-dropdown-wrapper'); bsDropdownTooltipShim('#wishlist-menu', "#wishlist-menu-wrapper"); }); function bsDropdownTooltipShim(tooltipTrigger, dropdownParent) { if ($(dropdownParent).length) { $(tooltipTrigger).tooltip(); $(dropdownParent).on('shown.bs.dropdown', function() { $(tooltipTrigger).tooltip('disable'); $(tooltipTrigger).tooltip('hide'); }); $(dropdownParent).on('hidden.bs.dropdown', function() { $(tooltipTrigger).tooltip('enable'); }); } } } ]]>
</link>
<name>HAISP Header Menu</name>
<option_schema/>
<public>true</public>
<roles/>
<script>
<![CDATA[ (function(){ // build menus var menu_id = $sp.getValue('sys_id'); // instance sys_id data.menu = {}; data.menu.items = $sp.getMenuItems(menu_id); data.isLoggedIn = gs.getSession().isLoggedIn(); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>RJMacKen</sys_created_by>
<sys_created_on>2025-02-25 18:13:27</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>072c133f1b33de90065762cae54bcbc1</sys_id>
<sys_mod_count>39</sys_mod_count>
<sys_name>HAISP Header Menu</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_072c133f1b33de90065762cae54bcbc1</sys_update_name>
<sys_updated_by>RJMacKen</sys_updated_by>
<sys_updated_on>2025-06-27 21:11:02</sys_updated_on>
<template>
<![CDATA[ <ul class="nav navbar-nav" aria-label="${Header}"> <div class="header-loader" ng-class="{'invisible': !loadingIndicator}"> <div class="hidden-xs hidden-sm sp-loading-indicator la-sm"> <div></div> <div></div> <div></div> </div> </div> <li ng-repeat="item in visibleItems"> <a id="{{item.hint}}" ng-if="item.items.length == 0 && !item.scriptedItems" ng-href="{{item.href}}" target="{{item.url_target}}">{{ item.label }}</a> <a id="{{item.hint}}" ng-if="item.items.length > 0" href="javascript:void(0)" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">{{ item.label }} <span class="caret"></span></a> <ul ng-if="item.items.length > 0" class="dropdown-menu" role="menu"> <li ng-repeat="item in item.items" ng-attr-role="{{ !item.href ? 'separator' : 'listitem' }}" ng-class="{ divider: !item.href }"> <a id="{{item.hint}}" ng-if="item.items.length == 0 && !item.scriptedItems && item.href" ng-href="{{item.href}}" target="{{item.url_target}}">{{ item.label }}</a> </li> </ul> </li> </ul> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; //g_form.addInfoMessage('xyz'); }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance_table</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>true</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Add New Certification</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ /* var certCode = current.certCode; // This should match the name of your input field if (!certCode) { throw new Error('Certification Code is required.'); } var expDate = current.expiration_date; // Assuming field name in the form if (!expDate) { throw new Error('Certification Date is required.'); } // Create a new record in the instructor certification table var certRecord = new GlideRecord('instructor_certification'); certRecord.initialize(); certRecord.certification_code = certCode; certRecord.expiration_date; // Certification date // Here you can add other fields as required // Insert the record var newSysId = certRecord.insert(); if (!newSysId) { throw new Error('Failed to insert certification record.'); } // Optionally, return a success message or any additional information return { success: true, message: 'Certification added successfully.', sys_id: newSysId }; */ (function () { // const instructorId = "3d49daa01b20e6505c8ccbb6624bcb6e"; const instructorId = $sp.getParameter("instructor_id"); data.instructorId = instructorId; const options = { view: "Default view", table: "x_g_dh5_hsisat_instructor_certification", sys_id: -1, query: "instructor_id=" + instructorId }; data.form_widget = $sp.getWidget("widget-form", options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JHudson1</sys_created_by>
<sys_created_on>2025-04-01 04:47:21</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>4252f08f1ba02650065762cae54bcb3a</sys_id>
<sys_mod_count>31</sys_mod_count>
<sys_name>HAISP Add New Certification</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_4252f08f1ba02650065762cae54bcb3a</sys_update_name>
<sys_updated_by>JCMoldes</sys_updated_by>
<sys_updated_on>2025-05-12 18:14:33</sys_updated_on>
<template>
<![CDATA[ <!-- <div style="margin: 20px;"> <h2>Add Instructor Certification</h2> <form id="certificationForm"> <div style="margin-bottom: 15px;"> <label for="certCode">Certification Code <abbr title="required">*</abbr> </label> <input type="text" id="certCode" name="certCode" class="form-control" data-table="certification_code" data-field="name" required /> </div> <div style="margin-bottom: 15px;"> <label for="expDate">Certification Date:</label> <input type="date" id="expDate" name="expDate" required /> </div> <div style="margin-bottom: 15px;"> <label for="attachment">Please attach record of completion:</label> <input type="file" id="attachment" name="attachment" required /> </div> <button type="submit">Add Certification</button> </form> <div id="responseMessage" style="margin-top: 15px;"></div> </div> --> <sp-widget widget="data.form_widget"></sp-widget> ]]>
</template>
</sp_widget>
<sp_widget action="INSERT_OR_UPDATE">
<category>custom</category>
<client_script>
<![CDATA[ api.controller=function() { /* widget controller */ var c = this; }; ]]>
</client_script>
<controller_as>c</controller_as>
<css/>
<data_table>sp_instance_table</data_table>
<demo_data/>
<description/>
<docs display_value=""/>
<field_list/>
<has_preview>false</has_preview>
<id/>
<internal>false</internal>
<link>
<![CDATA[ function link(scope, element, attrs, controller) { } ]]>
</link>
<name>HAISP Add New Knowledge</name>
<option_schema/>
<public>false</public>
<roles/>
<script>
<![CDATA[ /* var certCode = current.certCode; // This should match the name of your input field if (!certCode) { throw new Error('Certification Code is required.'); } var expDate = current.expiration_date; // Assuming field name in the form if (!expDate) { throw new Error('Certification Date is required.'); } // Create a new record in the instructor certification table var certRecord = new GlideRecord('instructor_certification'); certRecord.initialize(); certRecord.certification_code = certCode; certRecord.expiration_date; // Certification date // Here you can add other fields as required // Insert the record var newSysId = certRecord.insert(); if (!newSysId) { throw new Error('Failed to insert certification record.'); } // Optionally, return a success message or any additional information return { success: true, message: 'Certification added successfully.', sys_id: newSysId }; */ (function () { // const instructorId = "3d49daa01b20e6505c8ccbb6624bcb6e"; const instructorId = $sp.getParameter("instructor_id"); data.instructorId = instructorId; const options = { view: "Default view", table: "x_g_dh5_hsisat_instructor_skill", sys_id: -1, query: "instructor_id=" + instructorId }; data.form_widget = $sp.getWidget("widget-form", options); })(); ]]>
</script>
<servicenow>false</servicenow>
<sys_class_name>sp_widget</sys_class_name>
<sys_created_by>JHudson1</sys_created_by>
<sys_created_on>2025-04-08 04:26:28</sys_created_on>
<sys_customer_update>false</sys_customer_update>
<sys_id>9ea1fc951b3caa903b5e657fe54bcbb3</sys_id>
<sys_mod_count>1</sys_mod_count>
<sys_name>HAISP Add New Knowledge</sys_name>
<sys_package display_value="HSI Academy Instructor Scheduling Portal" source="x_g_dh5_hsisat">4fa2b1261b1fda50065762cae54bcb72</sys_package>
<sys_policy/>
<sys_replace_on_upgrade>false</sys_replace_on_upgrade>
<sys_scope display_value="HSI Academy Instructor Scheduling Portal">4fa2b1261b1fda50065762cae54bcb72</sys_scope>
<sys_update_name>sp_widget_9ea1fc951b3caa903b5e657fe54bcbb3</sys_update_name>
<sys_updated_by>JHudson1</sys_updated_by>
<sys_updated_on>2025-04-08 04:29:32</sys_updated_on>
<template>
<![CDATA[ <!-- <div style="margin: 20px;"> <h2>Add Instructor Certification</h2> <form id="certificationForm"> <div style="margin-bottom: 15px;"> <label for="certCode">Certification Code <abbr title="required">*</abbr> </label> <input type="text" id="certCode" name="certCode" class="form-control" data-table="certification_code" data-field="name" required /> </div> <div style="margin-bottom: 15px;"> <label for="expDate">Certification Date:</label> <input type="date" id="expDate" name="expDate" required /> </div> <div style="margin-bottom: 15px;"> <label for="attachment">Please attach record of completion:</label> <input type="file" id="attachment" name="attachment" required /> </div> <button type="submit">Add Certification</button> </form> <div id="responseMessage" style="margin-top: 15px;"></div> </div> --> <sp-widget widget="data.form_widget"></sp-widget> ]]>
</template>
</sp_widget>
</unload>
